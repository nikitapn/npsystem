// Copyright (c) 2021 nikitapnn1@gmail.com
// This file is a part of npsystem (Distributed Control System) and covered by LICENSING file in the topmost directory

namespace nprpc {

using oid_t     = u64;
using poa_idx_t = u16;
using oflags_t  = u16;
using uuid_t    = u8[16];
using ifs_idx_t = u8;
using fn_idx_t  = u8;

ExceptionCommFailure : exception {}
ExceptionTimeout : exception {}
ExceptionObjectNotExist : exception {}
ExceptionUnknownFunctionIndex : exception {}
ExceptionUnknownMessageId : exception {}
ExceptionUnsecuredObject : exception {
  class_id: string;
}
ExceptionBadAccess : exception {}
ExceptionBadInput : exception {}

enum DebugLevel {
  DebugLevel_Critical,
  DebugLevel_InactiveTimeout,
  DebugLevel_EveryCall,
  DebugLevel_EveryMessageContent,
  DebugLevel_TraceAll,
};

enum EndPointType {
  Tcp,
  TcpTethered,
  WebSocket,
  SecuredWebSocket,
  SharedMemory,
};

namespace detail {
ObjectIdLocal : flat {
  poa_idx: poa_idx_t;
  object_id: oid_t;
}

enum ObjectFlag {
  /**
    * false  - transient object
    * true   - persistent object
    */
  Persistent = 1,
  /**
    * true  - only one client can access the object in the existing opened session (this is for objects that originate from webbrowser or clients behind NAT)
    * false - multiple clients can access the object by opening multiple sessions
    */
  Tethered  = 2,
}

[force_helpers=1]
ObjectId : flat {
  object_id: oid_t;
  poa_idx: poa_idx_t;
  flags: oflags_t;
  /** UUID of the machine where the object was created */
  origin: uuid_t;
  class_id: string;
  /**
    * List of urls available for connection separated by ';'
    * Currently supported protocols:
    *   [PLAIN | TETHERED] tcp://<hostname>:<port>
    *   [PLAIN]            ws://<hostname>:<port>
    *   [SECURED]          wss://hostname>:<port>
    *   [PLAIN]            mem://<path>
    */
  urls: string;
}

} // namespace detail

namespace impl {
enum MessageId: u32 {
  FunctionCall = 0,
  BlockResponse,
  AddReference,
  ReleaseObject,
  Success,
  Exception,
  Error_PoaNotExist,
  Error_ObjectNotExist,
  Error_CommFailure,
  Error_UnknownFunctionIdx,
  Error_UnknownMessageId,
  Error_BadAccess,
  Error_BadInput
}

enum MessageType: u32 {
  Request = 0,
  Answer
}

Header: flat {
  size: u32;
  msg_id: MessageId;
  msg_type: MessageType;
  reserved: u32;
}

CallHeader: flat {
  poa_idx: poa_idx_t;
  interface_idx: ifs_idx_t;
  function_idx: fn_idx_t;
  object_id: oid_t;
}




} // namespace impl

} // namespace nprpc
