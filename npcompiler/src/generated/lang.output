Terminals unused in grammar

   ','


Grammar

    0 $accept: module $end

    1 module: module0
    2       | module module0

    3 module0: PROGRAM IDENTIFIER prog_decl stmt_list end_program
    4        | FUNCTION IDENTIFIER function stmt_list end_function
    5        | FUNCTION_BLOCK IDENTIFIER function end_function_block

    6 end_program: END_PROGRAM

    7 end_function: END_FUNCTION

    8 end_function_block: END_FUNCTION_BLOCK

    9 function: function0
   10         | function function0

   11 function0: var_decl_local

   12 stmt_list: %empty
   13          | stmt_list stmt

   14 stmt: assignment
   15     | if_stmt

   16 semicolon: error
   17          | ';'

   18 semicolon1: error
   19           | ';'

   20 ident: IDENTIFIER
   21      | EXTERNAL_IDENTIFIER

   22 assignment: ident ASSIGNMENT exp semicolon

   23 var_type: NPT_BOOL
   24         | NPT_U8
   25         | NPT_I8
   26         | NPT_U16
   27         | NPT_I16
   28         | NPT_U32
   29         | NPT_I32
   30         | NPT_F32

   31 prog_decl: %empty
   32          | prog_decl var_decl_local
   33          | prog_decl var_decl_global

   34 $@1: %empty

   35 var_decl_local: VAR $@1 var_decl_seq END_VAR

   36 var_decl_seq: %empty
   37             | var_decl_seq var_decl0

   38 $@2: %empty

   39 var_decl_global: VAR_GLOBAL $@2 var_decl_seq_global END_VAR

   40 var_decl_seq_global: %empty
   41                    | var_decl_seq_global var_decl0

   42 var_decl0: IDENTIFIER ':' var_type semicolon1

   43 if_stmt: IF logical_exp THEN stmt_list else_clause

   44 else_clause: ELSIF logical_exp THEN stmt_list else_clause
   45            | ELSE stmt_list END_IF
   46            | END_IF

   47 number: NUMBER_DISCRETE
   48       | NUMBER_INTEGER
   49       | NUMBER_FLOAT

   50 logical_exp: exp
   51            | exp '<' exp
   52            | exp LE exp
   53            | exp '>' exp
   54            | exp GE

   55 exp: '(' exp ')'
   56    | '-' exp
   57    | '+' exp
   58    | exp '+' exp
   59    | exp '-' exp
   60    | exp '*' exp
   61    | exp '/' exp
   62    | number
   63    | ident


Terminals, with rules where they appear

$end (0) 0
'(' (40) 55
')' (41) 55
'*' (42) 60
'+' (43) 57 58
',' (44)
'-' (45) 56 59
'/' (47) 61
':' (58) 42
';' (59) 17 19
'<' (60) 51
'>' (62) 53
error (256) 16 18
PROGRAM (258) 3
END_PROGRAM (259) 6
FUNCTION (260) 4
END_FUNCTION (261) 7
FUNCTION_BLOCK (262) 5
END_FUNCTION_BLOCK (263) 8
VAR (264) 35
VAR_GLOBAL (265) 39
END_VAR (266) 35 39
IDENTIFIER <val_str> (267) 3 4 5 20 42
EXTERNAL_IDENTIFIER <val_str> (268) 21
GE (269) 54
LE (270) 52
ASSIGNMENT (271) 22
IF (272) 43
THEN (273) 43 44
ELSIF (274) 44
ELSE (275) 45
END_IF (276) 45 46
NUMBER_DISCRETE <val_discrete> (277) 47
NUMBER_INTEGER <val_str> (278) 48
NUMBER_FLOAT <val_float> (279) 49
NPT_I8 (280) 25
NPT_U8 (281) 24
NPT_I16 (282) 27
NPT_U16 (283) 26
NPT_I32 (284) 29
NPT_U32 (285) 28
NPT_F32 (286) 30
NPT_BOOL (287) 23


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
module <val_node> (45)
    on left: 1 2, on right: 0 2
module0 <val_node> (46)
    on left: 3 4 5, on right: 1 2
end_program (47)
    on left: 6, on right: 3
end_function (48)
    on left: 7, on right: 4
end_function_block (49)
    on left: 8, on right: 5
function <val_node> (50)
    on left: 9 10, on right: 4 5 10
function0 <val_node> (51)
    on left: 11, on right: 9 10
stmt_list <val_node> (52)
    on left: 12 13, on right: 3 4 13 43 44 45
stmt <val_node> (53)
    on left: 14 15, on right: 13
semicolon (54)
    on left: 16 17, on right: 22
semicolon1 (55)
    on left: 18 19, on right: 42
ident <val_node> (56)
    on left: 20 21, on right: 22 63
assignment <val_node> (57)
    on left: 22, on right: 14
var_type <val_int> (58)
    on left: 23 24 25 26 27 28 29 30, on right: 42
prog_decl <val_node> (59)
    on left: 31 32 33, on right: 3 32 33
var_decl_local <val_node> (60)
    on left: 35, on right: 11 32
$@1 (61)
    on left: 34, on right: 35
var_decl_seq <val_node> (62)
    on left: 36 37, on right: 35 37
var_decl_global <val_node> (63)
    on left: 39, on right: 33
$@2 (64)
    on left: 38, on right: 39
var_decl_seq_global <val_node> (65)
    on left: 40 41, on right: 39 41
var_decl0 <val_node> (66)
    on left: 42, on right: 37 41
if_stmt <val_node> (67)
    on left: 43, on right: 15
else_clause (68)
    on left: 44 45 46, on right: 43 44
number <val_node> (69)
    on left: 47 48 49, on right: 62
logical_exp (70)
    on left: 50 51 52 53 54, on right: 43 44
exp <val_node> (71)
    on left: 55 56 57 58 59 60 61 62 63, on right: 22 50 51 52 53 54
    55 56 57 58 59 60 61


State 0

    0 $accept: . module $end
    1 module: . module0
    2       | . module module0
    3 module0: . PROGRAM IDENTIFIER prog_decl stmt_list end_program
    4        | . FUNCTION IDENTIFIER function stmt_list end_function
    5        | . FUNCTION_BLOCK IDENTIFIER function end_function_block

    PROGRAM         shift, and go to state 1
    FUNCTION        shift, and go to state 2
    FUNCTION_BLOCK  shift, and go to state 3

    module   go to state 4
    module0  go to state 5


State 1

    3 module0: PROGRAM . IDENTIFIER prog_decl stmt_list end_program

    IDENTIFIER  shift, and go to state 6


State 2

    4 module0: FUNCTION . IDENTIFIER function stmt_list end_function

    IDENTIFIER  shift, and go to state 7


State 3

    5 module0: FUNCTION_BLOCK . IDENTIFIER function end_function_block

    IDENTIFIER  shift, and go to state 8


State 4

    0 $accept: module . $end
    2 module: module . module0
    3 module0: . PROGRAM IDENTIFIER prog_decl stmt_list end_program
    4        | . FUNCTION IDENTIFIER function stmt_list end_function
    5        | . FUNCTION_BLOCK IDENTIFIER function end_function_block

    $end            shift, and go to state 9
    PROGRAM         shift, and go to state 1
    FUNCTION        shift, and go to state 2
    FUNCTION_BLOCK  shift, and go to state 3

    module0  go to state 10


State 5

    1 module: module0 .

    $default  reduce using rule 1 (module)


State 6

    3 module0: PROGRAM IDENTIFIER . prog_decl stmt_list end_program
   31 prog_decl: . %empty
   32          | . prog_decl var_decl_local
   33          | . prog_decl var_decl_global

    $default  reduce using rule 31 (prog_decl)

    prog_decl  go to state 11


State 7

    4 module0: FUNCTION IDENTIFIER . function stmt_list end_function
    9 function: . function0
   10         | . function function0
   11 function0: . var_decl_local
   35 var_decl_local: . VAR $@1 var_decl_seq END_VAR

    VAR  shift, and go to state 12

    function        go to state 13
    function0       go to state 14
    var_decl_local  go to state 15


State 8

    5 module0: FUNCTION_BLOCK IDENTIFIER . function end_function_block
    9 function: . function0
   10         | . function function0
   11 function0: . var_decl_local
   35 var_decl_local: . VAR $@1 var_decl_seq END_VAR

    VAR  shift, and go to state 12

    function        go to state 16
    function0       go to state 14
    var_decl_local  go to state 15


State 9

    0 $accept: module $end .

    $default  accept


State 10

    2 module: module module0 .

    $default  reduce using rule 2 (module)


State 11

    3 module0: PROGRAM IDENTIFIER prog_decl . stmt_list end_program
   12 stmt_list: . %empty  [END_PROGRAM, IDENTIFIER, EXTERNAL_IDENTIFIER, IF]
   13          | . stmt_list stmt
   32 prog_decl: prog_decl . var_decl_local
   33          | prog_decl . var_decl_global
   35 var_decl_local: . VAR $@1 var_decl_seq END_VAR
   39 var_decl_global: . VAR_GLOBAL $@2 var_decl_seq_global END_VAR

    VAR         shift, and go to state 12
    VAR_GLOBAL  shift, and go to state 17

    $default  reduce using rule 12 (stmt_list)

    stmt_list        go to state 18
    var_decl_local   go to state 19
    var_decl_global  go to state 20


State 12

   34 $@1: . %empty
   35 var_decl_local: VAR . $@1 var_decl_seq END_VAR

    $default  reduce using rule 34 ($@1)

    $@1  go to state 21


State 13

    4 module0: FUNCTION IDENTIFIER function . stmt_list end_function
   10 function: function . function0
   11 function0: . var_decl_local
   12 stmt_list: . %empty  [END_FUNCTION, IDENTIFIER, EXTERNAL_IDENTIFIER, IF]
   13          | . stmt_list stmt
   35 var_decl_local: . VAR $@1 var_decl_seq END_VAR

    VAR  shift, and go to state 12

    $default  reduce using rule 12 (stmt_list)

    function0       go to state 22
    stmt_list       go to state 23
    var_decl_local  go to state 15


State 14

    9 function: function0 .

    $default  reduce using rule 9 (function)


State 15

   11 function0: var_decl_local .

    $default  reduce using rule 11 (function0)


State 16

    5 module0: FUNCTION_BLOCK IDENTIFIER function . end_function_block
    8 end_function_block: . END_FUNCTION_BLOCK
   10 function: function . function0
   11 function0: . var_decl_local
   35 var_decl_local: . VAR $@1 var_decl_seq END_VAR

    END_FUNCTION_BLOCK  shift, and go to state 24
    VAR                 shift, and go to state 12

    end_function_block  go to state 25
    function0           go to state 22
    var_decl_local      go to state 15


State 17

   38 $@2: . %empty
   39 var_decl_global: VAR_GLOBAL . $@2 var_decl_seq_global END_VAR

    $default  reduce using rule 38 ($@2)

    $@2  go to state 26


State 18

    3 module0: PROGRAM IDENTIFIER prog_decl stmt_list . end_program
    6 end_program: . END_PROGRAM
   13 stmt_list: stmt_list . stmt
   14 stmt: . assignment
   15     | . if_stmt
   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   22 assignment: . ident ASSIGNMENT exp semicolon
   43 if_stmt: . IF logical_exp THEN stmt_list else_clause

    END_PROGRAM          shift, and go to state 27
    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    IF                   shift, and go to state 30

    end_program  go to state 31
    stmt         go to state 32
    ident        go to state 33
    assignment   go to state 34
    if_stmt      go to state 35


State 19

   32 prog_decl: prog_decl var_decl_local .

    $default  reduce using rule 32 (prog_decl)


State 20

   33 prog_decl: prog_decl var_decl_global .

    $default  reduce using rule 33 (prog_decl)


State 21

   35 var_decl_local: VAR $@1 . var_decl_seq END_VAR
   36 var_decl_seq: . %empty
   37             | . var_decl_seq var_decl0

    $default  reduce using rule 36 (var_decl_seq)

    var_decl_seq  go to state 36


State 22

   10 function: function function0 .

    $default  reduce using rule 10 (function)


State 23

    4 module0: FUNCTION IDENTIFIER function stmt_list . end_function
    7 end_function: . END_FUNCTION
   13 stmt_list: stmt_list . stmt
   14 stmt: . assignment
   15     | . if_stmt
   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   22 assignment: . ident ASSIGNMENT exp semicolon
   43 if_stmt: . IF logical_exp THEN stmt_list else_clause

    END_FUNCTION         shift, and go to state 37
    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    IF                   shift, and go to state 30

    end_function  go to state 38
    stmt          go to state 32
    ident         go to state 33
    assignment    go to state 34
    if_stmt       go to state 35


State 24

    8 end_function_block: END_FUNCTION_BLOCK .

    $default  reduce using rule 8 (end_function_block)


State 25

    5 module0: FUNCTION_BLOCK IDENTIFIER function end_function_block .

    $default  reduce using rule 5 (module0)


State 26

   39 var_decl_global: VAR_GLOBAL $@2 . var_decl_seq_global END_VAR
   40 var_decl_seq_global: . %empty
   41                    | . var_decl_seq_global var_decl0

    $default  reduce using rule 40 (var_decl_seq_global)

    var_decl_seq_global  go to state 39


State 27

    6 end_program: END_PROGRAM .

    $default  reduce using rule 6 (end_program)


State 28

   20 ident: IDENTIFIER .

    $default  reduce using rule 20 (ident)


State 29

   21 ident: EXTERNAL_IDENTIFIER .

    $default  reduce using rule 21 (ident)


State 30

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   43 if_stmt: IF . logical_exp THEN stmt_list else_clause
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   50 logical_exp: . exp
   51            | . exp '<' exp
   52            | . exp LE exp
   53            | . exp '>' exp
   54            | . exp GE
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident        go to state 46
    number       go to state 47
    logical_exp  go to state 48
    exp          go to state 49


State 31

    3 module0: PROGRAM IDENTIFIER prog_decl stmt_list end_program .

    $default  reduce using rule 3 (module0)


State 32

   13 stmt_list: stmt_list stmt .

    $default  reduce using rule 13 (stmt_list)


State 33

   22 assignment: ident . ASSIGNMENT exp semicolon

    ASSIGNMENT  shift, and go to state 50


State 34

   14 stmt: assignment .

    $default  reduce using rule 14 (stmt)


State 35

   15 stmt: if_stmt .

    $default  reduce using rule 15 (stmt)


State 36

   35 var_decl_local: VAR $@1 var_decl_seq . END_VAR
   37 var_decl_seq: var_decl_seq . var_decl0
   42 var_decl0: . IDENTIFIER ':' var_type semicolon1

    END_VAR     shift, and go to state 51
    IDENTIFIER  shift, and go to state 52

    var_decl0  go to state 53


State 37

    7 end_function: END_FUNCTION .

    $default  reduce using rule 7 (end_function)


State 38

    4 module0: FUNCTION IDENTIFIER function stmt_list end_function .

    $default  reduce using rule 4 (module0)


State 39

   39 var_decl_global: VAR_GLOBAL $@2 var_decl_seq_global . END_VAR
   41 var_decl_seq_global: var_decl_seq_global . var_decl0
   42 var_decl0: . IDENTIFIER ':' var_type semicolon1

    END_VAR     shift, and go to state 54
    IDENTIFIER  shift, and go to state 52

    var_decl0  go to state 55


State 40

   47 number: NUMBER_DISCRETE .

    $default  reduce using rule 47 (number)


State 41

   48 number: NUMBER_INTEGER .

    $default  reduce using rule 48 (number)


State 42

   49 number: NUMBER_FLOAT .

    $default  reduce using rule 49 (number)


State 43

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   57    | '+' . exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 56


State 44

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   55 exp: . '(' exp ')'
   56    | . '-' exp
   56    | '-' . exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 57


State 45

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   55 exp: . '(' exp ')'
   55    | '(' . exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 58


State 46

   63 exp: ident .

    $default  reduce using rule 63 (exp)


State 47

   62 exp: number .

    $default  reduce using rule 62 (exp)


State 48

   43 if_stmt: IF logical_exp . THEN stmt_list else_clause

    THEN  shift, and go to state 59


State 49

   50 logical_exp: exp .  [THEN]
   51            | exp . '<' exp
   52            | exp . LE exp
   53            | exp . '>' exp
   54            | exp . GE
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp

    GE   shift, and go to state 60
    LE   shift, and go to state 61
    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    '/'  shift, and go to state 65
    '<'  shift, and go to state 66
    '>'  shift, and go to state 67

    $default  reduce using rule 50 (logical_exp)


State 50

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   22 assignment: ident ASSIGNMENT . exp semicolon
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 68


State 51

   35 var_decl_local: VAR $@1 var_decl_seq END_VAR .

    $default  reduce using rule 35 (var_decl_local)


State 52

   42 var_decl0: IDENTIFIER . ':' var_type semicolon1

    ':'  shift, and go to state 69


State 53

   37 var_decl_seq: var_decl_seq var_decl0 .

    $default  reduce using rule 37 (var_decl_seq)


State 54

   39 var_decl_global: VAR_GLOBAL $@2 var_decl_seq_global END_VAR .

    $default  reduce using rule 39 (var_decl_global)


State 55

   41 var_decl_seq_global: var_decl_seq_global var_decl0 .

    $default  reduce using rule 41 (var_decl_seq_global)


State 56

   57 exp: '+' exp .  [error, GE, LE, THEN, '+', '-', ';', '<', '>', ')']
   58    | exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp

    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 57 (exp)

    Conflict between rule 57 and token '+' resolved as reduce (%left '+').
    Conflict between rule 57 and token '-' resolved as reduce (%left '-').
    Conflict between rule 57 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 57 and token '/' resolved as shift ('+' < '/').


State 57

   56 exp: '-' exp .  [error, GE, LE, THEN, '+', '-', ';', '<', '>', ')']
   58    | exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp

    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 56 (exp)

    Conflict between rule 56 and token '+' resolved as reduce (%left '+').
    Conflict between rule 56 and token '-' resolved as reduce (%left '-').
    Conflict between rule 56 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 56 and token '/' resolved as shift ('-' < '/').


State 58

   55 exp: '(' exp . ')'
   58    | exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    '/'  shift, and go to state 65
    ')'  shift, and go to state 70


State 59

   12 stmt_list: . %empty
   13          | . stmt_list stmt
   43 if_stmt: IF logical_exp THEN . stmt_list else_clause

    $default  reduce using rule 12 (stmt_list)

    stmt_list  go to state 71


State 60

   54 logical_exp: exp GE .

    $default  reduce using rule 54 (logical_exp)


State 61

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   52 logical_exp: exp LE . exp
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 72


State 62

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   58    | exp '+' . exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 73


State 63

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   59    | exp '-' . exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 74


State 64

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   60    | exp '*' . exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 75


State 65

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   61    | exp '/' . exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 76


State 66

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   51 logical_exp: exp '<' . exp
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 77


State 67

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   53 logical_exp: exp '>' . exp
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident   go to state 46
    number  go to state 47
    exp     go to state 78


State 68

   16 semicolon: . error
   17          | . ';'
   22 assignment: ident ASSIGNMENT exp . semicolon
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp

    error  shift, and go to state 79
    '+'    shift, and go to state 62
    '-'    shift, and go to state 63
    '*'    shift, and go to state 64
    '/'    shift, and go to state 65
    ';'    shift, and go to state 80

    semicolon  go to state 81


State 69

   23 var_type: . NPT_BOOL
   24         | . NPT_U8
   25         | . NPT_I8
   26         | . NPT_U16
   27         | . NPT_I16
   28         | . NPT_U32
   29         | . NPT_I32
   30         | . NPT_F32
   42 var_decl0: IDENTIFIER ':' . var_type semicolon1

    NPT_I8    shift, and go to state 82
    NPT_U8    shift, and go to state 83
    NPT_I16   shift, and go to state 84
    NPT_U16   shift, and go to state 85
    NPT_I32   shift, and go to state 86
    NPT_U32   shift, and go to state 87
    NPT_F32   shift, and go to state 88
    NPT_BOOL  shift, and go to state 89

    var_type  go to state 90


State 70

   55 exp: '(' exp ')' .

    $default  reduce using rule 55 (exp)


State 71

   13 stmt_list: stmt_list . stmt
   14 stmt: . assignment
   15     | . if_stmt
   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   22 assignment: . ident ASSIGNMENT exp semicolon
   43 if_stmt: . IF logical_exp THEN stmt_list else_clause
   43        | IF logical_exp THEN stmt_list . else_clause
   44 else_clause: . ELSIF logical_exp THEN stmt_list else_clause
   45            | . ELSE stmt_list END_IF
   46            | . END_IF

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    IF                   shift, and go to state 30
    ELSIF                shift, and go to state 91
    ELSE                 shift, and go to state 92
    END_IF               shift, and go to state 93

    stmt         go to state 32
    ident        go to state 33
    assignment   go to state 34
    if_stmt      go to state 35
    else_clause  go to state 94


State 72

   52 logical_exp: exp LE exp .  [THEN]
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 52 (logical_exp)


State 73

   58 exp: exp . '+' exp
   58    | exp '+' exp .  [error, GE, LE, THEN, '+', '-', ';', '<', '>', ')']
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp

    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 58 (exp)

    Conflict between rule 58 and token '+' resolved as reduce (%left '+').
    Conflict between rule 58 and token '-' resolved as reduce (%left '-').
    Conflict between rule 58 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 58 and token '/' resolved as shift ('+' < '/').


State 74

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   59    | exp '-' exp .  [error, GE, LE, THEN, '+', '-', ';', '<', '>', ')']
   60    | exp . '*' exp
   61    | exp . '/' exp

    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 59 (exp)

    Conflict between rule 59 and token '+' resolved as reduce (%left '+').
    Conflict between rule 59 and token '-' resolved as reduce (%left '-').
    Conflict between rule 59 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 59 and token '/' resolved as shift ('-' < '/').


State 75

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   60    | exp '*' exp .  [error, GE, LE, THEN, '+', '-', '*', '/', ';', '<', '>', ')']
   61    | exp . '/' exp

    $default  reduce using rule 60 (exp)

    Conflict between rule 60 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 60 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 60 and token '*' resolved as reduce (%left '*').
    Conflict between rule 60 and token '/' resolved as reduce (%left '/').


State 76

   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp
   61    | exp '/' exp .  [error, GE, LE, THEN, '+', '-', '*', '/', ';', '<', '>', ')']

    $default  reduce using rule 61 (exp)

    Conflict between rule 61 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 61 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 61 and token '*' resolved as reduce (%left '*').
    Conflict between rule 61 and token '/' resolved as reduce (%left '/').


State 77

   51 logical_exp: exp '<' exp .  [THEN]
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 51 (logical_exp)


State 78

   53 logical_exp: exp '>' exp .  [THEN]
   58 exp: exp . '+' exp
   59    | exp . '-' exp
   60    | exp . '*' exp
   61    | exp . '/' exp

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 53 (logical_exp)


State 79

   16 semicolon: error .

    $default  reduce using rule 16 (semicolon)


State 80

   17 semicolon: ';' .

    $default  reduce using rule 17 (semicolon)


State 81

   22 assignment: ident ASSIGNMENT exp semicolon .

    $default  reduce using rule 22 (assignment)


State 82

   25 var_type: NPT_I8 .

    $default  reduce using rule 25 (var_type)


State 83

   24 var_type: NPT_U8 .

    $default  reduce using rule 24 (var_type)


State 84

   27 var_type: NPT_I16 .

    $default  reduce using rule 27 (var_type)


State 85

   26 var_type: NPT_U16 .

    $default  reduce using rule 26 (var_type)


State 86

   29 var_type: NPT_I32 .

    $default  reduce using rule 29 (var_type)


State 87

   28 var_type: NPT_U32 .

    $default  reduce using rule 28 (var_type)


State 88

   30 var_type: NPT_F32 .

    $default  reduce using rule 30 (var_type)


State 89

   23 var_type: NPT_BOOL .

    $default  reduce using rule 23 (var_type)


State 90

   18 semicolon1: . error
   19           | . ';'
   42 var_decl0: IDENTIFIER ':' var_type . semicolon1

    error  shift, and go to state 95
    ';'    shift, and go to state 96

    semicolon1  go to state 97


State 91

   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   44 else_clause: ELSIF . logical_exp THEN stmt_list else_clause
   47 number: . NUMBER_DISCRETE
   48       | . NUMBER_INTEGER
   49       | . NUMBER_FLOAT
   50 logical_exp: . exp
   51            | . exp '<' exp
   52            | . exp LE exp
   53            | . exp '>' exp
   54            | . exp GE
   55 exp: . '(' exp ')'
   56    | . '-' exp
   57    | . '+' exp
   58    | . exp '+' exp
   59    | . exp '-' exp
   60    | . exp '*' exp
   61    | . exp '/' exp
   62    | . number
   63    | . ident

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    NUMBER_DISCRETE      shift, and go to state 40
    NUMBER_INTEGER       shift, and go to state 41
    NUMBER_FLOAT         shift, and go to state 42
    '+'                  shift, and go to state 43
    '-'                  shift, and go to state 44
    '('                  shift, and go to state 45

    ident        go to state 46
    number       go to state 47
    logical_exp  go to state 98
    exp          go to state 49


State 92

   12 stmt_list: . %empty
   13          | . stmt_list stmt
   45 else_clause: ELSE . stmt_list END_IF

    $default  reduce using rule 12 (stmt_list)

    stmt_list  go to state 99


State 93

   46 else_clause: END_IF .

    $default  reduce using rule 46 (else_clause)


State 94

   43 if_stmt: IF logical_exp THEN stmt_list else_clause .

    $default  reduce using rule 43 (if_stmt)


State 95

   18 semicolon1: error .

    $default  reduce using rule 18 (semicolon1)


State 96

   19 semicolon1: ';' .

    $default  reduce using rule 19 (semicolon1)


State 97

   42 var_decl0: IDENTIFIER ':' var_type semicolon1 .

    $default  reduce using rule 42 (var_decl0)


State 98

   44 else_clause: ELSIF logical_exp . THEN stmt_list else_clause

    THEN  shift, and go to state 100


State 99

   13 stmt_list: stmt_list . stmt
   14 stmt: . assignment
   15     | . if_stmt
   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   22 assignment: . ident ASSIGNMENT exp semicolon
   43 if_stmt: . IF logical_exp THEN stmt_list else_clause
   45 else_clause: ELSE stmt_list . END_IF

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    IF                   shift, and go to state 30
    END_IF               shift, and go to state 101

    stmt        go to state 32
    ident       go to state 33
    assignment  go to state 34
    if_stmt     go to state 35


State 100

   12 stmt_list: . %empty
   13          | . stmt_list stmt
   44 else_clause: ELSIF logical_exp THEN . stmt_list else_clause

    $default  reduce using rule 12 (stmt_list)

    stmt_list  go to state 102


State 101

   45 else_clause: ELSE stmt_list END_IF .

    $default  reduce using rule 45 (else_clause)


State 102

   13 stmt_list: stmt_list . stmt
   14 stmt: . assignment
   15     | . if_stmt
   20 ident: . IDENTIFIER
   21      | . EXTERNAL_IDENTIFIER
   22 assignment: . ident ASSIGNMENT exp semicolon
   43 if_stmt: . IF logical_exp THEN stmt_list else_clause
   44 else_clause: . ELSIF logical_exp THEN stmt_list else_clause
   44            | ELSIF logical_exp THEN stmt_list . else_clause
   45            | . ELSE stmt_list END_IF
   46            | . END_IF

    IDENTIFIER           shift, and go to state 28
    EXTERNAL_IDENTIFIER  shift, and go to state 29
    IF                   shift, and go to state 30
    ELSIF                shift, and go to state 91
    ELSE                 shift, and go to state 92
    END_IF               shift, and go to state 93

    stmt         go to state 32
    ident        go to state 33
    assignment   go to state 34
    if_stmt      go to state 35
    else_clause  go to state 103


State 103

   44 else_clause: ELSIF logical_exp THEN stmt_list else_clause .

    $default  reduce using rule 44 (else_clause)
