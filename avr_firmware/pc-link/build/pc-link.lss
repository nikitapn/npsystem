
build/pc-link.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000163a  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .nrww         00000200  00001c00  00001c00  00001714  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000006  00800062  0000163a  0000170e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000020c  00800068  00800068  00001914  2**0
                  ALLOC
  4 .user_text    00000000  00001640  00001640  00001914  2**0
                  CONTENTS
  5 .eeprom       000000c8  00810000  00810000  00001914  2**0
                  ALLOC
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001914  2**2
                  CONTENTS, READONLY
  7 .comment      00000011  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY
  8 .debug_abbrev 0000044e  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000048c  00000000  00000000  00001daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  0000223b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000017a  00000000  00000000  00002255  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .stab         00003f90  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .stabstr      000034c9  00000000  00000000  00006360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	d6 c3       	rjmp	.+1964   	; 0x7b0 <__vector_1>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	32 c0       	rjmp	.+100    	; 0x6c <__vector_3>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	93 ca       	rjmp	.-2778   	; 0xfffff53a <__eeprom_end+0xff7ef472>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	71 c3       	rjmp	.+1762   	; 0x6fa <__vector_11>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	99 c3       	rjmp	.+1842   	; 0x74e <__vector_13>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61
      32:	a0 e6       	ldi	r26, 0x60	; 96
      34:	b0 e0       	ldi	r27, 0x00	; 0

00000036 <zero_loop>:
      36:	1d 92       	st	X+, r1
      38:	b4 30       	cpi	r27, 0x04	; 4
      3a:	e9 f7       	brne	.-6      	; 0x36 <zero_loop>
      3c:	af 35       	cpi	r26, 0x5F	; 95
      3e:	d9 f7       	brne	.-10     	; 0x36 <zero_loop>

00000040 <__do_copy_data>:
      40:	10 e0       	ldi	r17, 0x00	; 0
      42:	a2 e6       	ldi	r26, 0x62	; 98
      44:	b0 e0       	ldi	r27, 0x00	; 0
      46:	ea e3       	ldi	r30, 0x3A	; 58
      48:	f6 e1       	ldi	r31, 0x16	; 22
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a8 36       	cpi	r26, 0x68	; 104
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	22 e0       	ldi	r18, 0x02	; 2
      58:	a8 e6       	ldi	r26, 0x68	; 104
      5a:	b0 e0       	ldi	r27, 0x00	; 0
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a4 37       	cpi	r26, 0x74	; 116
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	6a d0       	rcall	.+212    	; 0x13c <main>
      68:	e6 ca       	rjmp	.-2612   	; 0xfffff636 <__eeprom_end+0xff7ef56e>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <__vector_3>:
      6c:	0f 93       	push	r16
      6e:	0f b7       	in	r16, 0x3f	; 63
      70:	0f 93       	push	r16
      72:	23 94       	inc	r2
      74:	0f 91       	pop	r16
      76:	0f bf       	out	0x3f, r16	; 63
      78:	0f 91       	pop	r16
      7a:	18 95       	reti

0000007c <get_crc>:
      7c:	dc 01       	movw	r26, r24
      7e:	8f ef       	ldi	r24, 0xFF	; 255
      80:	9f ef       	ldi	r25, 0xFF	; 255

00000082 <calc_crc>:
      82:	fd e1       	ldi	r31, 0x1D	; 29
      84:	ed 91       	ld	r30, X+
      86:	e8 27       	eor	r30, r24
      88:	84 91       	lpm	r24, Z
      8a:	98 27       	eor	r25, r24
      8c:	89 2f       	mov	r24, r25
      8e:	fa 95       	dec	r31
      90:	94 91       	lpm	r25, Z
      92:	6a 95       	dec	r22
      94:	b1 f7       	brne	.-20     	; 0x82 <calc_crc>
      96:	08 95       	ret

00000098 <udp_packet>:
void transit_send(void);
void transit_answer(void);
void transit_timeout(void);

// при посылке 128 байт - выходит из синхронизации
void udp_packet(eth_frame_t *eth_frame, uint16_t len) {
      98:	cf 93       	push	r28
      9a:	df 93       	push	r29
	ip_packet_t *ip = (void*)(eth_frame->data);
	udp_packet_t *udp = (void*)(ip->data);
	Frame* udp_frame = (void*)udp->data;

	if(udp->to_port != htons(PORT)) return;
      9c:	fc 01       	movw	r30, r24
      9e:	24 a1       	ldd	r18, Z+36	; 0x24
      a0:	35 a1       	ldd	r19, Z+37	; 0x25
      a2:	2d 36       	cpi	r18, 0x6D	; 109
      a4:	38 48       	sbci	r19, 0x88	; 136
      a6:	71 f4       	brne	.+28     	; 0xc4 <udp_packet+0x2c>
	
	if (udp_frame->h.fun_num & F_NOT_TRANSIT) {
      a8:	fc 01       	movw	r30, r24
      aa:	24 a5       	ldd	r18, Z+44	; 0x2c
      ac:	27 ff       	sbrs	r18, 7
      ae:	08 c0       	rjmp	.+16     	; 0xc0 <udp_packet+0x28>
      b0:	ec 01       	movw	r28, r24
		prepare_answer();
      b2:	16 d4       	rcall	.+2092   	; 0x8e0 <prepare_answer>
		udp_reply(eth_frame, udp_frame->h.len);
      b4:	6d a5       	ldd	r22, Y+45	; 0x2d
      b6:	70 e0       	ldi	r23, 0x00	; 0
      b8:	ce 01       	movw	r24, r28
	} else {
		transit = len;
	}
}
      ba:	df 91       	pop	r29
      bc:	cf 91       	pop	r28

	if(udp->to_port != htons(PORT)) return;
	
	if (udp_frame->h.fun_num & F_NOT_TRANSIT) {
		prepare_answer();
		udp_reply(eth_frame, udp_frame->h.len);
      be:	ae c8       	rjmp	.-3748   	; 0xfffff21c <__eeprom_end+0xff7ef154>
	} else {
		transit = len;
      c0:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <transit>
	}
}
      c4:	df 91       	pop	r29
      c6:	cf 91       	pop	r28
      c8:	08 95       	ret

000000ca <transit_send>:
void transit_send() {
	eth_frame_t* eth_frame = (void*)net_buf;
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	
	memcpy(&frame, udp->data, transit);
      ca:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <transit>
      ce:	50 e0       	ldi	r21, 0x00	; 0
      d0:	66 ed       	ldi	r22, 0xD6	; 214
      d2:	71 e0       	ldi	r23, 0x01	; 1
      d4:	83 e2       	ldi	r24, 0x23	; 35
      d6:	91 e0       	ldi	r25, 0x01	; 1
      d8:	9e ca       	rjmp	.-2756   	; 0xfffff616 <__eeprom_end+0xff7ef54e>

000000da <transit_answer>:
}

void transit_answer() {
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
	eth_frame_t* eth_frame = (void*)net_buf;
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	
	memcpy(udp->data, &frame, frame.h.len);
      de:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <frame+0x3>
      e2:	d0 e0       	ldi	r29, 0x00	; 0
      e4:	ae 01       	movw	r20, r28
      e6:	63 e2       	ldi	r22, 0x23	; 35
      e8:	71 e0       	ldi	r23, 0x01	; 1
      ea:	86 ed       	ldi	r24, 0xD6	; 214
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	93 da       	rcall	.-2778   	; 0xfffff616 <__eeprom_end+0xff7ef54e>
	udp_reply(eth_frame, frame.h.len);
      f0:	be 01       	movw	r22, r28
      f2:	8c ea       	ldi	r24, 0xAC	; 172
      f4:	91 e0       	ldi	r25, 0x01	; 1
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
	eth_frame_t* eth_frame = (void*)net_buf;
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	
	memcpy(udp->data, &frame, frame.h.len);
	udp_reply(eth_frame, frame.h.len);
      fa:	90 c8       	rjmp	.-3808   	; 0xfffff21c <__eeprom_end+0xff7ef154>

000000fc <transit_timeout>:
void transit_timeout() {
	eth_frame_t* eth_frame = (void*)net_buf;
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	
	udp->data[0] = 0xff;
      fc:	ec ea       	ldi	r30, 0xAC	; 172
      fe:	f1 e0       	ldi	r31, 0x01	; 1
     100:	8f ef       	ldi	r24, 0xFF	; 255
     102:	82 a7       	std	Z+42, r24	; 0x2a
	udp->data[1] = 'T';
     104:	84 e5       	ldi	r24, 0x54	; 84
     106:	83 a7       	std	Z+43, r24	; 0x2b
	udp->data[2] = 0x41;
     108:	81 e4       	ldi	r24, 0x41	; 65
     10a:	84 a7       	std	Z+44, r24	; 0x2c
	udp->data[3] = 0xbf;
     10c:	8f eb       	ldi	r24, 0xBF	; 191
     10e:	85 a7       	std	Z+45, r24	; 0x2d
	
	udp_reply(eth_frame, 4);
     110:	64 e0       	ldi	r22, 0x04	; 4
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	cf 01       	movw	r24, r30
     116:	82 c8       	rjmp	.-3836   	; 0xfffff21c <__eeprom_end+0xff7ef154>

00000118 <status_led_proc>:
}


void status_led_proc(void) {
	if (timer_expired(G_TIMER_WORK_LED, 500)) {
     118:	64 ef       	ldi	r22, 0xF4	; 244
     11a:	71 e0       	ldi	r23, 0x01	; 1
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	5d da       	rcall	.-2886   	; 0xfffff5da <__eeprom_end+0xff7ef512>
     120:	88 23       	and	r24, r24
     122:	21 f0       	breq	.+8      	; 0x12c <status_led_proc+0x14>
		LED_PORT ^= (1 << WORK_LED);
     124:	95 b3       	in	r25, 0x15	; 21
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	89 27       	eor	r24, r25
     12a:	85 bb       	out	0x15, r24	; 21
     12c:	08 95       	ret

0000012e <watch_enc28j60>:
	}
}

void watch_enc28j60(void) {
	if (timer_expired(G_WATCH_ENC28J69, 500)) {
     12e:	64 ef       	ldi	r22, 0xF4	; 244
     130:	71 e0       	ldi	r23, 0x01	; 1
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	52 da       	rcall	.-2908   	; 0xfffff5da <__eeprom_end+0xff7ef512>
     136:	81 11       	cpse	r24, r1
		enc28cj60_reinit_if_failed();
     138:	48 c6       	rjmp	.+3216   	; 0xdca <enc28cj60_reinit_if_failed>
     13a:	08 95       	ret

0000013c <main>:
	}
}


int main(void) {
	LED_DDR = 0xff;
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	84 bb       	out	0x14, r24	; 20

	timers_init();
     140:	15 da       	rcall	.-3030   	; 0xfffff56c <__eeprom_end+0xff7ef4a4>
	net_init();
     142:	7b d2       	rcall	.+1270   	; 0x63a <net_init>
	lan_init();
     144:	ad d9       	rcall	.-3238   	; 0xfffff4a0 <__eeprom_end+0xff7ef3d8>

	sei();
     146:	78 94       	sei

	while (1) {
		timers_update();
     148:	19 da       	rcall	.-3022   	; 0xfffff57c <__eeprom_end+0xff7ef4b4>
		net_poll();
     14a:	aa d2       	rcall	.+1364   	; 0x6a0 <net_poll>
		if (!(status & HIGH_PRIORITY) && !transit) lan_poll();
     14c:	34 fc       	sbrc	r3, 4
     14e:	05 c0       	rjmp	.+10     	; 0x15a <main+0x1e>
     150:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <transit>
     154:	81 11       	cpse	r24, r1
     156:	01 c0       	rjmp	.+2      	; 0x15a <main+0x1e>
     158:	ca d9       	rcall	.-3180   	; 0xfffff4ee <__eeprom_end+0xff7ef426>
		status_led_proc();
     15a:	de df       	rcall	.-68     	; 0x118 <status_led_proc>
		watch_enc28j60();
     15c:	e8 df       	rcall	.-48     	; 0x12e <watch_enc28j60>
	}
     15e:	f4 cf       	rjmp	.-24     	; 0x148 <main+0xc>

00000160 <propagation_delay>:

	start_transmit();
}

static void propagation_delay(void) {
	ptf = saved_ptf;
     160:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <saved_ptf>
     164:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <saved_ptf+0x1>
     168:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     16c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
	M_OCR = saved_ocr - PROPAGATION_DELAY;
     170:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     174:	8a 50       	subi	r24, 0x0A	; 10
     176:	83 bd       	out	0x23, r24	; 35
	GIFR = (1 << INTF0);
     178:	80 e4       	ldi	r24, 0x40	; 64
     17a:	8a bf       	out	0x3a, r24	; 58
	GICR = (1 << INT0);
     17c:	8b bf       	out	0x3b, r24	; 59
	M_UCSRB = RX_ENABLED;
     17e:	80 e9       	ldi	r24, 0x90	; 144
     180:	8a b9       	out	0x0a, r24	; 10
     182:	08 95       	ret

00000184 <start_transmit>:
	}
}

static void start_transmit(void) {
	// Выключаеться контроль за шиной на время передачи
	M_TCCR = TIMER_OFF;
     184:	15 bc       	out	0x25, r1	; 37
	M_TIFR |= 1 << M_OCF;
     186:	88 b7       	in	r24, 0x38	; 56
     188:	80 68       	ori	r24, 0x80	; 128
     18a:	88 bf       	out	0x38, r24	; 56
	M_TCNT = 0;
     18c:	14 bc       	out	0x24, r1	; 36

	GICR = 0;
     18e:	1b be       	out	0x3b, r1	; 59
	GIFR = (1 << INTF0);
     190:	80 e4       	ldi	r24, 0x40	; 64
     192:	8a bf       	out	0x3a, r24	; 58

	ibbpc_ev = 0;
     194:	21 2c       	mov	r2, r1

	saved_ptf = ptf;
     196:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ptf>
     19a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <ptf+0x1>
     19e:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <saved_ptf+0x1>
     1a2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <saved_ptf>
	saved_ocr = M_OCR;
     1a6:	83 b5       	in	r24, 0x23	; 35
     1a8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>

	ptf = &propagation_delay;
     1ac:	80 eb       	ldi	r24, 0xB0	; 176
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     1b4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
	M_OCR = PROPAGATION_DELAY;
     1b8:	8a e0       	ldi	r24, 0x0A	; 10
     1ba:	83 bd       	out	0x23, r24	; 35

	tx_count = frame.h.len;
     1bc:	e3 e2       	ldi	r30, 0x23	; 35
     1be:	f1 e0       	ldi	r31, 0x01	; 1
     1c0:	83 81       	ldd	r24, Z+3	; 0x03
     1c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <tx_count>
	pCurBufPtr = (void*)&frame;
     1c6:	f0 93 73 00 	sts	0x0073, r31	; 0x800073 <pCurBufPtr+0x1>
     1ca:	e0 93 72 00 	sts	0x0072, r30	; 0x800072 <pCurBufPtr>

	status |= HIGH_PRIORITY;
     1ce:	83 2d       	mov	r24, r3
     1d0:	80 61       	ori	r24, 0x10	; 16
     1d2:	38 2e       	mov	r3, r24

	MAX485_OUT();
     1d4:	93 9a       	sbi	0x12, 3	; 18
	M_UCSRB = TX_ENABLED;
     1d6:	88 e4       	ldi	r24, 0x48	; 72
     1d8:	8a b9       	out	0x0a, r24	; 10

	M_UDR = (*pCurBufPtr);
     1da:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <pCurBufPtr>
     1de:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <pCurBufPtr+0x1>
     1e2:	80 81       	ld	r24, Z
     1e4:	8c b9       	out	0x0c, r24	; 12
     1e6:	08 95       	ret

000001e8 <send_sync_frame>:
		}
	}
}

static void send_sync_frame(void) {
	M_OCR = IBBPC_40;
     1e8:	8a ea       	ldi	r24, 0xAA	; 170
     1ea:	83 bd       	out	0x23, r24	; 35
	ptf = idle_40;
     1ec:	80 e4       	ldi	r24, 0x40	; 64
     1ee:	92 e0       	ldi	r25, 0x02	; 2
     1f0:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     1f4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
	ac = 0;
     1f8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ac>

	frame.h.sl_addr = MY_ADDRESS | 0x80;
     1fc:	e3 e2       	ldi	r30, 0x23	; 35
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	81 e8       	ldi	r24, 0x81	; 129
     202:	80 83       	st	Z, r24
	status |= SYNC | LAST_MASTER;
     204:	83 2d       	mov	r24, r3
     206:	89 60       	ori	r24, 0x09	; 9
     208:	38 2e       	mov	r3, r24
	frame.h.len = 1;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	83 83       	std	Z+3, r24	; 0x03

	start_transmit();
     20e:	ba cf       	rjmp	.-140    	; 0x184 <start_transmit>

00000210 <read_answer>:
	return IMMEDIATE_ANSWER;
#endif
}

/* Master mode */
static void read_answer(void) {
     210:	af 92       	push	r10
     212:	bf 92       	push	r11
     214:	cf 92       	push	r12
     216:	df 92       	push	r13
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	0f 93       	push	r16
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	10 91 71 00 	lds	r17, 0x0071	; 0x800071 <cur_req_num>
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;

	if (status & DATA_RECIVED) {
     228:	31 fe       	sbrs	r3, 1
     22a:	68 c0       	rjmp	.+208    	; 0x2fc <read_answer+0xec>

/* Master mode */
static void read_answer(void) {
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;
     22c:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <pbegin_data>
     230:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <pbegin_data+0x1>
     234:	c0 80       	ld	r12, Z
     236:	81 81       	ldd	r24, Z+1	; 0x01
     238:	83 70       	andi	r24, 0x03	; 3
     23a:	d8 2e       	mov	r13, r24

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
     23c:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <pend_data>
     240:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <pend_data+0x1>
			p->unreachable_cnt = 0;
			if (cur_req_num == REQ_READ_BYTES) {
     244:	80 e0       	ldi	r24, 0x00	; 0
				uint16_t addr = (uint16_t)p->val.remote_addr;
				if (pr_addr != addr) {
					ix += 1;
					pr_addr = addr;
				}
				uint8_t bit_mask = (3 << p->val.bit_size);
     246:	63 e0       	ldi	r22, 0x03	; 3
     248:	70 e0       	ldi	r23, 0x00	; 0
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
     24a:	e4 17       	cp	r30, r20
     24c:	f5 07       	cpc	r31, r21
     24e:	09 f4       	brne	.+2      	; 0x252 <read_answer+0x42>
     250:	51 c0       	rjmp	.+162    	; 0x2f4 <read_answer+0xe4>
			p->unreachable_cnt = 0;
     252:	14 82       	std	Z+4, r1	; 0x04
			if (cur_req_num == REQ_READ_BYTES) {
     254:	12 30       	cpi	r17, 0x02	; 2
     256:	f1 f4       	brne	.+60     	; 0x294 <read_answer+0x84>
     258:	98 2f       	mov	r25, r24
				for (uint8_t i = 0; i < p->val.bit_size + 1; i++, ix++) {
     25a:	29 2f       	mov	r18, r25
     25c:	28 1b       	sub	r18, r24
     25e:	c2 2f       	mov	r28, r18
     260:	d0 e0       	ldi	r29, 0x00	; 0
     262:	03 81       	ldd	r16, Z+3	; 0x03
     264:	20 2f       	mov	r18, r16
     266:	26 95       	lsr	r18
     268:	26 95       	lsr	r18
     26a:	26 95       	lsr	r18
     26c:	27 70       	andi	r18, 0x07	; 7
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	2c 17       	cp	r18, r28
     272:	3d 07       	cpc	r19, r29
     274:	e4 f1       	brlt	.+120    	; 0x2ee <read_answer+0xde>
					*((uint8_t*)(p->val.local_addr + i)) = frame.a_read_bytes.data[ix];
     276:	29 2f       	mov	r18, r25
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	2d 5d       	subi	r18, 0xDD	; 221
     27c:	3e 4f       	sbci	r19, 0xFE	; 254
     27e:	d9 01       	movw	r26, r18
     280:	15 96       	adiw	r26, 0x05	; 5
     282:	fc 90       	ld	r15, X
     284:	22 81       	ldd	r18, Z+2	; 0x02
     286:	30 2f       	mov	r19, r16
     288:	33 70       	andi	r19, 0x03	; 3
     28a:	c2 0f       	add	r28, r18
     28c:	d3 1f       	adc	r29, r19
     28e:	f8 82       	st	Y, r15

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
			p->unreachable_cnt = 0;
			if (cur_req_num == REQ_READ_BYTES) {
				for (uint8_t i = 0; i < p->val.bit_size + 1; i++, ix++) {
     290:	9f 5f       	subi	r25, 0xFF	; 255
     292:	e3 cf       	rjmp	.-58     	; 0x25a <read_answer+0x4a>
					*((uint8_t*)(p->val.local_addr + i)) = frame.a_read_bytes.data[ix];
				}
			} else if (cur_req_num == REQ_READ_BITS) {
     294:	13 30       	cpi	r17, 0x03	; 3
     296:	51 f5       	brne	.+84     	; 0x2ec <read_answer+0xdc>
				uint16_t addr = (uint16_t)p->val.remote_addr;
     298:	b0 81       	ld	r27, Z
     29a:	cb 2f       	mov	r28, r27
     29c:	91 81       	ldd	r25, Z+1	; 0x01
     29e:	d9 2f       	mov	r29, r25
     2a0:	d3 70       	andi	r29, 0x03	; 3
				if (pr_addr != addr) {
     2a2:	cc 16       	cp	r12, r28
     2a4:	dd 06       	cpc	r13, r29
     2a6:	09 f0       	breq	.+2      	; 0x2aa <read_answer+0x9a>
					ix += 1;
     2a8:	8f 5f       	subi	r24, 0xFF	; 255
					pr_addr = addr;
				}
				uint8_t bit_mask = (3 << p->val.bit_size);
     2aa:	23 81       	ldd	r18, Z+3	; 0x03
     2ac:	92 2f       	mov	r25, r18
     2ae:	96 95       	lsr	r25
     2b0:	96 95       	lsr	r25
     2b2:	96 95       	lsr	r25
     2b4:	97 70       	andi	r25, 0x07	; 7
     2b6:	7b 01       	movw	r14, r22
     2b8:	01 c0       	rjmp	.+2      	; 0x2bc <read_answer+0xac>
     2ba:	ee 0c       	add	r14, r14
     2bc:	9a 95       	dec	r25
     2be:	ea f7       	brpl	.-6      	; 0x2ba <read_answer+0xaa>
				uint8_t rem_val = frame.a_read_bits.data[ix] & bit_mask;
				uint8_t val = *((uint8_t*)((uint16_t)p->val.local_addr));
     2c0:	a2 80       	ldd	r10, Z+2	; 0x02
     2c2:	23 70       	andi	r18, 0x03	; 3
     2c4:	b2 2e       	mov	r11, r18

				val &= ~bit_mask;
     2c6:	9e 2d       	mov	r25, r14
     2c8:	90 95       	com	r25
     2ca:	d5 01       	movw	r26, r10
     2cc:	2c 91       	ld	r18, X
     2ce:	02 2f       	mov	r16, r18
     2d0:	09 23       	and	r16, r25
				if (pr_addr != addr) {
					ix += 1;
					pr_addr = addr;
				}
				uint8_t bit_mask = (3 << p->val.bit_size);
				uint8_t rem_val = frame.a_read_bits.data[ix] & bit_mask;
     2d2:	c8 2e       	mov	r12, r24
     2d4:	d1 2c       	mov	r13, r1
     2d6:	96 01       	movw	r18, r12
     2d8:	2d 5d       	subi	r18, 0xDD	; 221
     2da:	3e 4f       	sbci	r19, 0xFE	; 254
				uint8_t val = *((uint8_t*)((uint16_t)p->val.local_addr));

				val &= ~bit_mask;
				val |= rem_val;

				*((uint8_t*)((uint16_t)p->val.local_addr)) = val;
     2dc:	d9 01       	movw	r26, r18
     2de:	15 96       	adiw	r26, 0x05	; 5
     2e0:	9c 91       	ld	r25, X
     2e2:	9e 21       	and	r25, r14
     2e4:	90 2b       	or	r25, r16
     2e6:	d5 01       	movw	r26, r10
     2e8:	9c 93       	st	X, r25
			if (cur_req_num == REQ_READ_BYTES) {
				for (uint8_t i = 0; i < p->val.bit_size + 1; i++, ix++) {
					*((uint8_t*)(p->val.local_addr + i)) = frame.a_read_bytes.data[ix];
				}
			} else if (cur_req_num == REQ_READ_BITS) {
				uint16_t addr = (uint16_t)p->val.remote_addr;
     2ea:	6e 01       	movw	r12, r28
     2ec:	98 2f       	mov	r25, r24
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
     2ee:	35 96       	adiw	r30, 0x05	; 5
     2f0:	89 2f       	mov	r24, r25
     2f2:	ab cf       	rjmp	.-170    	; 0x24a <read_answer+0x3a>
				val |= rem_val;

				*((uint8_t*)((uint16_t)p->val.local_addr)) = val;
			}
		}
		status &= ~DATA_RECIVED;
     2f4:	b3 2d       	mov	r27, r3
     2f6:	bd 7f       	andi	r27, 0xFD	; 253
     2f8:	3b 2e       	mov	r3, r27
     2fa:	72 c0       	rjmp	.+228    	; 0x3e0 <read_answer+0x1d0>
	} else {
		if (cur_req_num == REQ_READ_BYTES) {
     2fc:	12 30       	cpi	r17, 0x02	; 2
     2fe:	99 f5       	brne	.+102    	; 0x366 <read_answer+0x156>
     300:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <pbegin_data>
     304:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <pbegin_data+0x1>
     308:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <pend_data>
     30c:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <pend_data+0x1>
			while ((p = pbegin_data++) != pend_data) {
     310:	e9 2f       	mov	r30, r25
     312:	f8 2f       	mov	r31, r24
     314:	af 01       	movw	r20, r30
     316:	4b 5f       	subi	r20, 0xFB	; 251
     318:	5f 4f       	sbci	r21, 0xFF	; 255
     31a:	e6 17       	cp	r30, r22
     31c:	f7 07       	cpc	r31, r23
     31e:	f1 f0       	breq	.+60     	; 0x35c <read_answer+0x14c>
				if (p->unreachable_cnt > R_DATA_MAX_TRY) {
     320:	84 81       	ldd	r24, Z+4	; 0x04
     322:	86 30       	cpi	r24, 0x06	; 6
     324:	90 f0       	brcs	.+36     	; 0x34a <read_answer+0x13a>
					*((uint8_t*)((uint16_t)p->val.local_addr + p->val.bit_size)) = 0x00;
     326:	22 81       	ldd	r18, Z+2	; 0x02
     328:	83 81       	ldd	r24, Z+3	; 0x03
     32a:	38 2f       	mov	r19, r24
     32c:	33 70       	andi	r19, 0x03	; 3
     32e:	86 95       	lsr	r24
     330:	86 95       	lsr	r24
     332:	86 95       	lsr	r24
     334:	87 70       	andi	r24, 0x07	; 7
     336:	f9 01       	movw	r30, r18
     338:	e8 0f       	add	r30, r24
     33a:	f1 1d       	adc	r31, r1
     33c:	10 82       	st	Z, r1
					info.com.rv_error_cnt++;
     33e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <info+0x3>
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <info+0x3>
     348:	07 c0       	rjmp	.+14     	; 0x358 <read_answer+0x148>
				} else {
					p->unreachable_cnt++;
     34a:	8f 5f       	subi	r24, 0xFF	; 255
     34c:	84 83       	std	Z+4, r24	; 0x04
					info.com.rv_error_all_cnt++;
     34e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <info+0x4>
     352:	8f 5f       	subi	r24, 0xFF	; 255
     354:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <info+0x4>
     358:	fa 01       	movw	r30, r20
     35a:	dc cf       	rjmp	.-72     	; 0x314 <read_answer+0x104>
     35c:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <pbegin_data+0x1>
     360:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <pbegin_data>
     364:	3d c0       	rjmp	.+122    	; 0x3e0 <read_answer+0x1d0>
				}
			}
		} else if (cur_req_num == REQ_READ_BITS) {
     366:	13 30       	cpi	r17, 0x03	; 3
     368:	d9 f5       	brne	.+118    	; 0x3e0 <read_answer+0x1d0>
     36a:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <pbegin_data>
     36e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <pbegin_data+0x1>
     372:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <pend_data>
     376:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <pend_data+0x1>
			while ((p = pbegin_data++) != pend_data) {
     37a:	e9 2f       	mov	r30, r25
     37c:	f8 2f       	mov	r31, r24
				if (p->unreachable_cnt > R_DATA_MAX_TRY) {
					*((uint8_t*)((uint16_t)p->val.local_addr)) &= ~(2 << p->val.bit_size);
     37e:	62 e0       	ldi	r22, 0x02	; 2
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	9f 01       	movw	r18, r30
     384:	2b 5f       	subi	r18, 0xFB	; 251
     386:	3f 4f       	sbci	r19, 0xFF	; 255
					p->unreachable_cnt++;
					info.com.rv_error_all_cnt++;
				}
			}
		} else if (cur_req_num == REQ_READ_BITS) {
			while ((p = pbegin_data++) != pend_data) {
     388:	e4 17       	cp	r30, r20
     38a:	f5 07       	cpc	r31, r21
     38c:	29 f1       	breq	.+74     	; 0x3d8 <read_answer+0x1c8>
				if (p->unreachable_cnt > R_DATA_MAX_TRY) {
     38e:	84 81       	ldd	r24, Z+4	; 0x04
     390:	86 30       	cpi	r24, 0x06	; 6
     392:	c8 f0       	brcs	.+50     	; 0x3c6 <read_answer+0x1b6>
					*((uint8_t*)((uint16_t)p->val.local_addr)) &= ~(2 << p->val.bit_size);
     394:	a2 81       	ldd	r26, Z+2	; 0x02
     396:	83 81       	ldd	r24, Z+3	; 0x03
     398:	b8 2f       	mov	r27, r24
     39a:	b3 70       	andi	r27, 0x03	; 3
     39c:	86 95       	lsr	r24
     39e:	86 95       	lsr	r24
     3a0:	86 95       	lsr	r24
     3a2:	87 70       	andi	r24, 0x07	; 7
     3a4:	fb 01       	movw	r30, r22
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <read_answer+0x19c>
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	8a 95       	dec	r24
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <read_answer+0x198>
     3b0:	cf 01       	movw	r24, r30
     3b2:	80 95       	com	r24
     3b4:	9c 91       	ld	r25, X
     3b6:	89 23       	and	r24, r25
     3b8:	8c 93       	st	X, r24
					info.com.rv_error_cnt++;
     3ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <info+0x3>
     3be:	8f 5f       	subi	r24, 0xFF	; 255
     3c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <info+0x3>
     3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <read_answer+0x1c4>
				} else {
					p->unreachable_cnt++;
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	84 83       	std	Z+4, r24	; 0x04
					info.com.rv_error_all_cnt++;
     3ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <info+0x4>
     3ce:	8f 5f       	subi	r24, 0xFF	; 255
     3d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <info+0x4>
     3d4:	f9 01       	movw	r30, r18
     3d6:	d5 cf       	rjmp	.-86     	; 0x382 <read_answer+0x172>
     3d8:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <pbegin_data+0x1>
     3dc:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <pbegin_data>
				}
			}
		}
	}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	df 90       	pop	r13
     3ee:	cf 90       	pop	r12
     3f0:	bf 90       	pop	r11
     3f2:	af 90       	pop	r10
     3f4:	08 95       	ret

000003f6 <timeout_for_answer>:
	}
}

static void timeout_for_answer(void) {
	// Защита от запаздалого ответа
	cli();
     3f6:	f8 94       	cli
	status &= ~MASTER_MODE;
     3f8:	83 2d       	mov	r24, r3
     3fa:	8b 7f       	andi	r24, 0xFB	; 251
     3fc:	38 2e       	mov	r3, r24
	sei();
     3fe:	78 94       	sei

	M_OCR = IBBPC_40;
     400:	8a ea       	ldi	r24, 0xAA	; 170
     402:	83 bd       	out	0x23, r24	; 35
	ptf = &idle_40;
     404:	80 e4       	ldi	r24, 0x40	; 64
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     40c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>

#ifdef PC_LINK
	if (transit_accepted) 
     410:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <transit_accepted>
     414:	88 23       	and	r24, r24
     416:	31 f0       	breq	.+12     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
	{
		transit_timeout();
     418:	71 de       	rcall	.-798    	; 0xfc <transit_timeout>
		transit_accepted = transit = 0;
     41a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <transit>
     41e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <transit_accepted>
     422:	01 c0       	rjmp	.+2      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
	} 
	else
#endif
	{
		read_answer();
     424:	f5 de       	rcall	.-534    	; 0x210 <read_answer>
	}
	M_UCSRB = RX_ENABLED;
     426:	80 e9       	ldi	r24, 0x90	; 144
     428:	8a b9       	out	0x0a, r24	; 10
     42a:	08 95       	ret

0000042c <answer_has_been_recived>:
}

static void answer_has_been_recived(void) {
	ptf = &idle_40;
     42c:	80 e4       	ldi	r24, 0x40	; 64
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     434:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
	status &= ~MASTER_MODE;
     438:	83 2d       	mov	r24, r3
     43a:	8b 7f       	andi	r24, 0xFB	; 251
     43c:	38 2e       	mov	r3, r24
#ifdef PC_LINK
	if (transit_accepted) 
     43e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <transit_accepted>
     442:	88 23       	and	r24, r24
     444:	31 f0       	breq	.+12     	; 0x452 <answer_has_been_recived+0x26>
	{
		transit_answer();
     446:	49 de       	rcall	.-878    	; 0xda <transit_answer>
		transit_accepted = transit = 0;
     448:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <transit>
     44c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <transit_accepted>
     450:	01 c0       	rjmp	.+2      	; 0x454 <answer_has_been_recived+0x28>
	} 
	else
#endif
	{
		read_answer();
     452:	de de       	rcall	.-580    	; 0x210 <read_answer>
	}
	M_UCSRB = RX_ENABLED;
     454:	80 e9       	ldi	r24, 0x90	; 144
     456:	8a b9       	out	0x0a, r24	; 10
     458:	08 95       	ret

0000045a <inc_ac>:
	ptf();
	//#endif // VIRTUAL
}

static uint8_t inc_ac(void) {
	ac = ac + 1;
     45a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <ac>
     45e:	8f 5f       	subi	r24, 0xFF	; 255
     460:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <ac>
	//	if (ac > nomm) ac = 1; // этот счетчик очиститься автоматичеси после синхрофрейма
	if (ac == MY_ADDRESS) {
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	51 f4       	brne	.+20     	; 0x47c <__stack+0x1d>
		//	M_OCR = IBBPC_3 - M_TCNT;
		ptf = &access_time;
     468:	26 e6       	ldi	r18, 0x66	; 102
     46a:	32 e0       	ldi	r19, 0x02	; 2
     46c:	30 93 6c 00 	sts	0x006C, r19	; 0x80006c <ptf+0x1>
     470:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <ptf>
		status |= HIGH_PRIORITY;
     474:	93 2d       	mov	r25, r3
     476:	90 61       	ori	r25, 0x10	; 16
     478:	39 2e       	mov	r3, r25
     47a:	08 95       	ret
		return 1;
	}
	return 0;
     47c:	80 e0       	ldi	r24, 0x00	; 0
}
     47e:	08 95       	ret

00000480 <idle_40>:

static void idle_40(void) {
	ibbpc = 4;
     480:	84 e0       	ldi	r24, 0x04	; 4
     482:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <ibbpc>
	if (status & SYNC) {
     486:	30 fc       	sbrc	r3, 0
     488:	09 c0       	rjmp	.+18     	; 0x49c <idle_40+0x1c>
		if (inc_ac()) {
			return;
		}
	}
	M_OCR = IBBPC_10;
     48a:	84 e6       	ldi	r24, 0x64	; 100
     48c:	83 bd       	out	0x23, r24	; 35
	ptf = idle_10;
     48e:	82 e5       	ldi	r24, 0x52	; 82
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     496:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
     49a:	08 95       	ret
}

static void idle_40(void) {
	ibbpc = 4;
	if (status & SYNC) {
		if (inc_ac()) {
     49c:	de df       	rcall	.-68     	; 0x45a <inc_ac>
     49e:	88 23       	and	r24, r24
     4a0:	a1 f3       	breq	.-24     	; 0x48a <idle_40+0xa>
     4a2:	08 95       	ret

000004a4 <idle_10>:
	M_OCR = IBBPC_10;
	ptf = idle_10;
}

static void idle_10(void) {
	ibbpc++;
     4a4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ibbpc>
     4a8:	8f 5f       	subi	r24, 0xFF	; 255
     4aa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <ibbpc>
	if (ibbpc >= 50) {
     4ae:	82 33       	cpi	r24, 0x32	; 50
     4b0:	50 f4       	brcc	.+20     	; 0x4c6 <idle_10+0x22>
		//		PORTC ^= (1 << PC5);
#endif
		send_sync_frame();
		return;
	}
	if (status & SYNC) {
     4b2:	30 fe       	sbrs	r3, 0
     4b4:	0a c0       	rjmp	.+20     	; 0x4ca <idle_10+0x26>
		if ((status & LAST_MASTER) && (ibbpc >= 36)) {
     4b6:	33 fe       	sbrs	r3, 3
     4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <idle_10+0x24>
     4ba:	84 32       	cpi	r24, 0x24	; 36
     4bc:	28 f0       	brcs	.+10     	; 0x4c8 <idle_10+0x24>
#ifdef MARKER_DEBUG
			LED_PORT ^= (1 << MARKER_LED);
     4be:	95 b3       	in	r25, 0x15	; 21
     4c0:	84 e0       	ldi	r24, 0x04	; 4
     4c2:	89 27       	eor	r24, r25
     4c4:	85 bb       	out	0x15, r24	; 21
#endif
			send_sync_frame();
     4c6:	90 ce       	rjmp	.-736    	; 0x1e8 <send_sync_frame>
		} else {
			inc_ac();
     4c8:	c8 cf       	rjmp	.-112    	; 0x45a <inc_ac>
     4ca:	08 95       	ret

000004cc <access_time>:
#ifdef DEBUG_CMD
	//	MAKE_DEBUG_CMD(MY_ADDRESS, 0);
#endif // DEBUG_CMD
	uint8_t result;
#ifdef PC_LINK
	if (transit)
     4cc:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <transit>
     4d0:	22 23       	and	r18, r18
     4d2:	29 f0       	breq	.+10     	; 0x4de <access_time+0x12>
	{
		transit_send();
     4d4:	fa dd       	rcall	.-1036   	; 0xca <transit_send>
		transit_accepted = 0x01;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <transit_accepted>
     4dc:	98 c0       	rjmp	.+304    	; 0x60e <access_time+0x142>
	} 
	else
#endif
	{
#ifdef PC_LINK
		transit_accepted = 0x00;
     4de:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <transit_accepted>
	uint16_t pr_addr;
	uint8_t* ptr;
	uint8_t marker;

	// If there are no remote data
	if (!rdata[0].val.device_addr || r_data_cnt) return 0;
     4e2:	20 91 be 00 	lds	r18, 0x00BE	; 0x8000be <rdata+0x1>
     4e6:	28 7f       	andi	r18, 0xF8	; 248
     4e8:	09 f4       	brne	.+2      	; 0x4ec <access_time+0x20>
     4ea:	9e c0       	rjmp	.+316    	; 0x628 <access_time+0x15c>
     4ec:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <r_data_cnt>
     4f0:	21 11       	cpse	r18, r1
     4f2:	9a c0       	rjmp	.+308    	; 0x628 <access_time+0x15c>

	if (pend_data != rdata && (pend_data - 1)->val.marker == M_ARRAY_END) {
     4f4:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <pend_data>
     4f8:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <pend_data+0x1>
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	2d 3b       	cpi	r18, 0xBD	; 189
     500:	34 07       	cpc	r19, r20
     502:	61 f0       	breq	.+24     	; 0x51c <access_time+0x50>
     504:	f9 01       	movw	r30, r18
     506:	35 97       	sbiw	r30, 0x05	; 5
     508:	23 81       	ldd	r18, Z+3	; 0x03
     50a:	20 7c       	andi	r18, 0xC0	; 192
     50c:	20 34       	cpi	r18, 0x40	; 64
     50e:	31 f4       	brne	.+12     	; 0x51c <access_time+0x50>
		pend_data = rdata;
     510:	2d eb       	ldi	r18, 0xBD	; 189
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <pend_data+0x1>
     518:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <pend_data>
	}

	pbegin_data = pend_data;
     51c:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <pend_data>
     520:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <pend_data+0x1>
     524:	f0 93 77 00 	sts	0x0077, r31	; 0x800077 <pbegin_data+0x1>
     528:	e0 93 76 00 	sts	0x0076, r30	; 0x800076 <pbegin_data>

	frame.h.sl_addr = pend_data->val.device_addr;
     52c:	21 81       	ldd	r18, Z+1	; 0x01
     52e:	26 95       	lsr	r18
     530:	26 95       	lsr	r18
     532:	26 95       	lsr	r18
     534:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <frame>
	frame.h.m_addr = MY_ADDRESS;
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <frame+0x1>
	cur_req_num = frame.h.fun_num = (pend_data->val.data_rw_type << 1) | pend_data->val.is_bit;
     53e:	23 81       	ldd	r18, Z+3	; 0x03
     540:	22 fb       	bst	r18, 2
     542:	88 27       	eor	r24, r24
     544:	80 f9       	bld	r24, 0
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	91 81       	ldd	r25, Z+1	; 0x01
     54e:	92 fb       	bst	r25, 2
     550:	99 27       	eor	r25, r25
     552:	90 f9       	bld	r25, 0
     554:	89 2b       	or	r24, r25
     556:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <frame+0x2>
     55a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <cur_req_num>

	if (cur_req_num == REQ_READ_BYTES || cur_req_num == REQ_READ_BITS) {
     55e:	9e ef       	ldi	r25, 0xFE	; 254
     560:	98 0f       	add	r25, r24
     562:	92 30       	cpi	r25, 0x02	; 2
     564:	50 f4       	brcc	.+20     	; 0x57a <access_time+0xae>
		pr_addr = 0xffff;
		frame.r_read_bytes.addr_begin = pend_data->val.remote_addr;
     566:	20 81       	ld	r18, Z
     568:	91 81       	ldd	r25, Z+1	; 0x01
     56a:	93 70       	andi	r25, 0x03	; 3
     56c:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <frame+0x5>
     570:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <frame+0x6>
		frame.r_read_bytes.nbytes = 0;
     574:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <frame+0x4>
     578:	0b c0       	rjmp	.+22     	; 0x590 <access_time+0xc4>
		ptr = (uint8_t*)&frame.r_read_bytes.crc;
	} else if (cur_req_num == REQ_WRITE_BYTES) {
     57a:	81 11       	cpse	r24, r1
     57c:	09 c0       	rjmp	.+18     	; 0x590 <access_time+0xc4>
		frame.r_write_bytes.len = 0;
     57e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <frame+0x4>
		frame.r_write_bytes.addr = pend_data->val.remote_addr;
     582:	20 81       	ld	r18, Z
     584:	91 81       	ldd	r25, Z+1	; 0x01
     586:	93 70       	andi	r25, 0x03	; 3
     588:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <frame+0x5>
     58c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <frame+0x6>
	GICR = (1 << INT0);
	M_UCSRB = RX_ENABLED;
}


static void access_time(void) {
     590:	4f ef       	ldi	r20, 0xFF	; 255
     592:	5f ef       	ldi	r21, 0xFF	; 255
		frame.r_write_bytes.addr = pend_data->val.remote_addr;
	}

	do {
		size = pend_data->val.bit_size;
		if (cur_req_num == REQ_READ_BYTES) {
     594:	82 30       	cpi	r24, 0x02	; 2
     596:	69 f4       	brne	.+26     	; 0x5b2 <access_time+0xe6>
			frame.r_read_bytes.nbytes += size + 1;
     598:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <frame+0x4>
     59c:	21 e0       	ldi	r18, 0x01	; 1
     59e:	29 0f       	add	r18, r25
		frame.r_write_bytes.len = 0;
		frame.r_write_bytes.addr = pend_data->val.remote_addr;
	}

	do {
		size = pend_data->val.bit_size;
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	96 95       	lsr	r25
     5a4:	96 95       	lsr	r25
     5a6:	96 95       	lsr	r25
     5a8:	97 70       	andi	r25, 0x07	; 7
		if (cur_req_num == REQ_READ_BYTES) {
			frame.r_read_bytes.nbytes += size + 1;
     5aa:	92 0f       	add	r25, r18
     5ac:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <frame+0x4>
     5b0:	0f c0       	rjmp	.+30     	; 0x5d0 <access_time+0x104>
		} else if (cur_req_num == REQ_READ_BITS) {
     5b2:	83 30       	cpi	r24, 0x03	; 3
     5b4:	69 f4       	brne	.+26     	; 0x5d0 <access_time+0x104>
			uint16_t addr = pend_data->val.remote_addr;
     5b6:	20 81       	ld	r18, Z
     5b8:	91 81       	ldd	r25, Z+1	; 0x01
     5ba:	39 2f       	mov	r19, r25
     5bc:	33 70       	andi	r19, 0x03	; 3
			if (pr_addr != addr) {
     5be:	24 17       	cp	r18, r20
     5c0:	35 07       	cpc	r19, r21
     5c2:	31 f0       	breq	.+12     	; 0x5d0 <access_time+0x104>
				pr_addr = addr;
				frame.r_read_bits.nbytes += 1;
     5c4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <frame+0x4>
     5c8:	9f 5f       	subi	r25, 0xFF	; 255
     5ca:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <frame+0x4>
     5ce:	a9 01       	movw	r20, r18
		//		(*ptr++) = *((uint8_t*)pend_data->val.local_addr) & (1 << pend_data->val.size) ? 0xFF : 0;
		//		(*ptr++) = *((uint8_t*)(pend_data->val.local_addr + 1)) & (1 << pend_data->val.size) ? 0xFF : 0; // status
		//		req_size = req_size + 1;
		//		break;
		//	}
	} while (!(marker = (pend_data++)->val.marker & (M_ARRAY_END | M_LAST_DATA_IN_REQUEST)));
     5d0:	93 81       	ldd	r25, Z+3	; 0x03
     5d2:	92 95       	swap	r25
     5d4:	96 95       	lsr	r25
     5d6:	96 95       	lsr	r25
     5d8:	93 70       	andi	r25, 0x03	; 3
     5da:	35 96       	adiw	r30, 0x05	; 5
     5dc:	99 23       	and	r25, r25
     5de:	d1 f2       	breq	.-76     	; 0x594 <access_time+0xc8>
     5e0:	f0 93 75 00 	sts	0x0075, r31	; 0x800075 <pend_data+0x1>
     5e4:	e0 93 74 00 	sts	0x0074, r30	; 0x800074 <pend_data>

	if (marker == M_ARRAY_END) r_data_cnt = R_DATA_PERIOD;
     5e8:	91 30       	cpi	r25, 0x01	; 1
     5ea:	19 f4       	brne	.+6      	; 0x5f2 <access_time+0x126>
     5ec:	8a e0       	ldi	r24, 0x0A	; 10
     5ee:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <r_data_cnt>

	frame.h.len = (void*)ptr - (void*)&frame + 2;
     5f2:	83 e2       	ldi	r24, 0x23	; 35
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	6a e2       	ldi	r22, 0x2A	; 42
     5f8:	71 e0       	ldi	r23, 0x01	; 1
     5fa:	6e 5f       	subi	r22, 0xFE	; 254
     5fc:	68 1b       	sub	r22, r24
     5fe:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <frame+0x3>
	*((uint16_t*)ptr) = get_crc((void*)&frame, frame.h.len - 2);
     602:	62 50       	subi	r22, 0x02	; 2
     604:	3b dd       	rcall	.-1418   	; 0x7c <get_crc>
     606:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <frame+0x8>
     60a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <frame+0x7>
		transit_accepted = 0x00;
#endif
		result = send_request();
	}
	if (result) {
		M_OCR = IBBPC_30;
     60e:	8c e8       	ldi	r24, 0x8C	; 140
     610:	83 bd       	out	0x23, r24	; 35
		ptf = &timeout_for_answer;
     612:	8b ef       	ldi	r24, 0xFB	; 251
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     61a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
		status |= MASTER_MODE | LAST_MASTER;
		status &= ~DATA_RECIVED;
     61e:	83 2d       	mov	r24, r3
     620:	8d 7f       	andi	r24, 0xFD	; 253
     622:	8c 60       	ori	r24, 0x0C	; 12
     624:	38 2e       	mov	r3, r24
		start_transmit();
     626:	ae cd       	rjmp	.-1188   	; 0x184 <start_transmit>
	} else {
		M_OCR = IBBPC_10;
     628:	84 e6       	ldi	r24, 0x64	; 100
     62a:	83 bd       	out	0x23, r24	; 35
		//	M_TCNT = IBBPC_3;
		ptf = &idle_10;
     62c:	82 e5       	ldi	r24, 0x52	; 82
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     634:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
     638:	08 95       	ret

0000063a <net_init>:
	* (uint8_t*)(0x60) = 0x1A;
#endif // PC_LINK_VIRTUAL


	// LEDs config
	LED_DDR |= (1 << WORK_LED) | (1 << MARKER_LED);
     63a:	84 b3       	in	r24, 0x14	; 20
     63c:	86 60       	ori	r24, 0x06	; 6
     63e:	84 bb       	out	0x14, r24	; 20

	pbegin_data = pend_data = rdata;
     640:	8d eb       	ldi	r24, 0xBD	; 189
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <pend_data+0x1>
     648:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <pend_data>
     64c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <pbegin_data+0x1>
     650:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <pbegin_data>

	status = IDLE;
     654:	31 2c       	mov	r3, r1
	ibbpc_ev = 0;
     656:	21 2c       	mov	r2, r1

	ptf = &idle_40;
     658:	80 e4       	ldi	r24, 0x40	; 64
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     660:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
	M_OCR = IBBPC_40; // 17.3611111 us - one bit time
     664:	8a ea       	ldi	r24, 0xAA	; 170
     666:	83 bd       	out	0x23, r24	; 35
	M_TCNT = 0;
     668:	14 bc       	out	0x24, r1	; 36

	// Init UART
	// PD0 - RX, PD1 - TX, PD2 - SL, PD3 - DIR
	pCurBufPtr = (void*)&frame;
     66a:	83 e2       	ldi	r24, 0x23	; 35
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <pCurBufPtr+0x1>
     672:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <pCurBufPtr>
	TX_RX_CTRL_DDR |= (1 << TX_RX_CTRL_PIN);
     676:	8b 9a       	sbi	0x11, 3	; 17
	TX_RX_CTRL_DDR |= (1 << PD1);
     678:	89 9a       	sbi	0x11, 1	; 17
	TX_RX_CTRL_DDR &= ~(1 << PD2);
     67a:	8a 98       	cbi	0x11, 2	; 17
	M_UBRRL = lo8(UBRR_VALUE);
     67c:	8c e0       	ldi	r24, 0x0C	; 12
     67e:	89 b9       	out	0x09, r24	; 9
	M_UBRRH = hi8(UBRR_VALUE);
     680:	10 bc       	out	0x20, r1	; 32
	M_UCSRA = 0;
     682:	1b b8       	out	0x0b, r1	; 11
	// 1 - stop bit, parity - even, frame length 8 - bit.
	M_UCSRC = UCSRC_VALUE;
     684:	96 ea       	ldi	r25, 0xA6	; 166
     686:	90 bd       	out	0x20, r25	; 32
	M_UCSRB = RX_ENABLED;
     688:	90 e9       	ldi	r25, 0x90	; 144
     68a:	9a b9       	out	0x0a, r25	; 10
	// External interrupt

	// Нужно захватывать именно начало байта т.к. прерывание по приему байта будет с опозданием.
	MCUCR = (1 << ISC00); //Any logical change on INT0 generates an interrupt request
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	95 bf       	out	0x35, r25	; 53
//	MCUCR = (1 << ISC00) | (1 << ISC01); //The rising edge of INT0 generates an interrupt request
	GIFR = (1 << INTF0);
     690:	90 e4       	ldi	r25, 0x40	; 64
     692:	9a bf       	out	0x3a, r25	; 58
	GICR = (1 << INT0);
     694:	9b bf       	out	0x3b, r25	; 59
	// Timer 2
	M_TCCR = TIMER_ON;
     696:	85 bd       	out	0x25, r24	; 37
	M_TIMSK |= ALLOW_TIMER_INT;
     698:	89 b7       	in	r24, 0x39	; 57
     69a:	80 68       	ori	r24, 0x80	; 128
     69c:	89 bf       	out	0x39, r24	; 57
     69e:	08 95       	ret

000006a0 <net_poll>:
				start_transmit();
			}
			v_busy = 0x00;
		} */
		//#else
	if (status & DATA_RECIVED) {
     6a0:	93 2d       	mov	r25, r3
     6a2:	31 fe       	sbrs	r3, 1
     6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <net_poll+0x16>
		if (ibbpc_ev >= 1) {
     6a6:	22 20       	and	r2, r2
     6a8:	01 f1       	breq	.+64     	; 0x6ea <net_poll+0x4a>
			info.com.e_slave_timeout++;
     6aa:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <info+0x2>
     6ae:	8f 5f       	subi	r24, 0xFF	; 255
     6b0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <info+0x2>
     6b4:	1a c0       	rjmp	.+52     	; 0x6ea <net_poll+0x4a>
		}
		goto call_fun;
	}

	if (!ibbpc_ev) return;
     6b6:	82 2d       	mov	r24, r2
     6b8:	22 20       	and	r2, r2
     6ba:	f1 f0       	breq	.+60     	; 0x6f8 <net_poll+0x58>

	if (ibbpc_ev > 1) {
     6bc:	82 30       	cpi	r24, 0x02	; 2
     6be:	a0 f0       	brcs	.+40     	; 0x6e8 <net_poll+0x48>
		// Выход из синхронизированного состояния
		info.com.synclost++;
     6c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <info+0x1>
     6c4:	8f 5f       	subi	r24, 0xFF	; 255
     6c6:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <info+0x1>
		M_OCR = IBBPC_40;
     6ca:	8a ea       	ldi	r24, 0xAA	; 170
     6cc:	83 bd       	out	0x23, r24	; 35
		ptf = idle_40;
     6ce:	80 e4       	ldi	r24, 0x40	; 64
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     6d6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
		M_UCSRB = RX_ENABLED;
     6da:	80 e9       	ldi	r24, 0x90	; 144
     6dc:	8a b9       	out	0x0a, r24	; 10
		status &= ~SYNC;
		ibbpc_ev = 0;
     6de:	21 2c       	mov	r2, r1
#ifdef PC_LINK
		//	transit = 0x00;
#endif
		status &= ~HIGH_PRIORITY;
     6e0:	83 2d       	mov	r24, r3
     6e2:	8e 7e       	andi	r24, 0xEE	; 238
     6e4:	38 2e       	mov	r3, r24
		return;
     6e6:	08 95       	ret
	}
	ibbpc_ev = 0;
     6e8:	21 2c       	mov	r2, r1
call_fun:
	status &= ~HIGH_PRIORITY;
     6ea:	9f 7e       	andi	r25, 0xEF	; 239
     6ec:	39 2e       	mov	r3, r25
	ptf();
     6ee:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <ptf>
     6f2:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <ptf+0x1>
     6f6:	09 94       	ijmp
     6f8:	08 95       	ret

000006fa <__vector_11>:

	M_UDR = (*pCurBufPtr);
}

/* USART, Rx Complete */
ISR(RX_ISR) {
     6fa:	1f 92       	push	r1
     6fc:	0f 92       	push	r0
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	0f 92       	push	r0
     702:	11 24       	eor	r1, r1
     704:	2f 93       	push	r18
     706:	3f 93       	push	r19
     708:	8f 93       	push	r24
     70a:	9f 93       	push	r25
     70c:	ef 93       	push	r30
     70e:	ff 93       	push	r31
	uint8_t tmp;
	tmp = M_UDR;
     710:	9c b1       	in	r25, 0x0c	; 12
	//	if (M_UCSRA & (1 << PE))
	//		return;	
	if (rx_len >= MAX_FRAME_LEN) return;
     712:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <rx_len>
     716:	88 38       	cpi	r24, 0x88	; 136
     718:	78 f4       	brcc	.+30     	; 0x738 <__vector_11+0x3e>
	rx_len = rx_len + 1;
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <rx_len>
	(*pCurBufPtr++) = tmp;
     720:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <pCurBufPtr>
     724:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <pCurBufPtr+0x1>
     728:	9f 01       	movw	r18, r30
     72a:	2f 5f       	subi	r18, 0xFF	; 255
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <pCurBufPtr+0x1>
     732:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <pCurBufPtr>
     736:	90 83       	st	Z, r25
}
     738:	ff 91       	pop	r31
     73a:	ef 91       	pop	r30
     73c:	9f 91       	pop	r25
     73e:	8f 91       	pop	r24
     740:	3f 91       	pop	r19
     742:	2f 91       	pop	r18
     744:	0f 90       	pop	r0
     746:	0f be       	out	0x3f, r0	; 63
     748:	0f 90       	pop	r0
     74a:	1f 90       	pop	r1
     74c:	18 95       	reti

0000074e <__vector_13>:

/* USART, Tx Completed */
ISR(TX_ISR) {
     74e:	1f 92       	push	r1
     750:	0f 92       	push	r0
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	0f 92       	push	r0
     756:	11 24       	eor	r1, r1
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	ef 93       	push	r30
     75e:	ff 93       	push	r31
	tx_count = tx_count - 1;
     760:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <tx_count>
     764:	81 50       	subi	r24, 0x01	; 1
     766:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <tx_count>
	if (tx_count) {
     76a:	88 23       	and	r24, r24
     76c:	69 f0       	breq	.+26     	; 0x788 <__vector_13+0x3a>
		M_UDR = *(++pCurBufPtr);
     76e:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <pCurBufPtr>
     772:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <pCurBufPtr+0x1>
     776:	cf 01       	movw	r24, r30
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <pCurBufPtr+0x1>
     77e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <pCurBufPtr>
     782:	81 81       	ldd	r24, Z+1	; 0x01
     784:	8c b9       	out	0x0c, r24	; 12
     786:	0b c0       	rjmp	.+22     	; 0x79e <__vector_13+0x50>
#ifdef DEBUG_CMD
		if (frame.h.len > 1) {
			//			MAKE_DEBUG_CMD(MY_ADDRESS, 2);
		}
#endif // DEBUG_CMD
		MAX485_IN();
     788:	93 98       	cbi	0x12, 3	; 18
		M_TCCR = TIMER_ON;
     78a:	8c e0       	ldi	r24, 0x0C	; 12
     78c:	85 bd       	out	0x25, r24	; 37
		rx_len = 0;
     78e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <rx_len>
		pCurBufPtr = (void*)&frame;
     792:	83 e2       	ldi	r24, 0x23	; 35
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <pCurBufPtr+0x1>
     79a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <pCurBufPtr>
	}
}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	9f 91       	pop	r25
     7a4:	8f 91       	pop	r24
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	0f 90       	pop	r0
     7ac:	1f 90       	pop	r1
     7ae:	18 95       	reti

000007b0 <__vector_1>:

/* External Interrupt Request 0 */
/* Falling edge - bus has been captured */
/* Rising edge - signal loss */
ISR(INT0_vect) {
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
     7ba:	2f 93       	push	r18
     7bc:	3f 93       	push	r19
     7be:	4f 93       	push	r20
     7c0:	5f 93       	push	r21
     7c2:	6f 93       	push	r22
     7c4:	7f 93       	push	r23
     7c6:	8f 93       	push	r24
     7c8:	9f 93       	push	r25
     7ca:	af 93       	push	r26
     7cc:	bf 93       	push	r27
     7ce:	ef 93       	push	r30
     7d0:	ff 93       	push	r31
	// bus has been captured
	if (!(PIND & (1 << PD2))) {
     7d2:	82 99       	sbic	0x10, 2	; 16
     7d4:	0a c0       	rjmp	.+20     	; 0x7ea <__vector_1+0x3a>
		ibbpc_ev = 0;
     7d6:	21 2c       	mov	r2, r1
		M_TCCR = TIMER_OFF;
     7d8:	15 bc       	out	0x25, r1	; 37
		M_TCNT = 0;
     7da:	14 bc       	out	0x24, r1	; 36
		M_TIFR |= 1 << M_OCF;
     7dc:	88 b7       	in	r24, 0x38	; 56
     7de:	80 68       	ori	r24, 0x80	; 128
     7e0:	88 bf       	out	0x38, r24	; 56
		status &= ~DATA_RECIVED;
     7e2:	83 2d       	mov	r24, r3
     7e4:	8d 7f       	andi	r24, 0xFD	; 253
     7e6:	38 2e       	mov	r3, r24
		return;
     7e8:	6a c0       	rjmp	.+212    	; 0x8be <__vector_1+0x10e>
	}

	// signal loss
	M_UCSRB = 0;
     7ea:	1a b8       	out	0x0a, r1	; 10
	M_OCR = IBBPC_40;
     7ec:	8a ea       	ldi	r24, 0xAA	; 170
     7ee:	83 bd       	out	0x23, r24	; 35
	M_TCCR = TIMER_ON;
     7f0:	8c e0       	ldi	r24, 0x0C	; 12
     7f2:	85 bd       	out	0x25, r24	; 37
	ptf = &idle_40;
     7f4:	80 e4       	ldi	r24, 0x40	; 64
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     7fc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>

	// Возможно, одно из устройств передало синхронизирующий фрейм
	if (rx_len == 1 && *((uint8_t*)&frame) & 0x80) {
     800:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <rx_len>
     804:	61 30       	cpi	r22, 0x01	; 1
     806:	79 f4       	brne	.+30     	; 0x826 <__vector_1+0x76>
     808:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <frame>
     80c:	87 ff       	sbrs	r24, 7
     80e:	4d c0       	rjmp	.+154    	; 0x8aa <__vector_1+0xfa>
		// Синхронизируемся...
		ac = 0;
     810:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ac>
		status &= ~(LAST_MASTER | MASTER_MODE);
		status |= SYNC;
     814:	83 2d       	mov	r24, r3
     816:	83 7f       	andi	r24, 0xF3	; 243
     818:	81 60       	ori	r24, 0x01	; 1
     81a:	38 2e       	mov	r3, r24
#ifdef MARKER_DEBUG
		LED_PORT ^= (1 << MARKER_LED);
     81c:	95 b3       	in	r25, 0x15	; 21
     81e:	84 e0       	ldi	r24, 0x04	; 4
     820:	89 27       	eor	r24, r25
     822:	85 bb       	out	0x15, r24	; 21
     824:	42 c0       	rjmp	.+132    	; 0x8aa <__vector_1+0xfa>
#endif
	}
#ifdef DEBUG_CMD
	//		MAKE_DEBUG_CMD(MY_ADDRESS, 1);
#endif // DEBUG_CMD
	else if (rx_len < 4) {
     826:	64 30       	cpi	r22, 0x04	; 4
     828:	08 f4       	brcc	.+2      	; 0x82c <__vector_1+0x7c>
     82a:	3f c0       	rjmp	.+126    	; 0x8aa <__vector_1+0xfa>
	}
#ifdef PC_LINK
	else if (transit_accepted && (status & MASTER_MODE))
     82c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <transit_accepted>
     830:	88 23       	and	r24, r24
     832:	21 f0       	breq	.+8      	; 0x83c <__vector_1+0x8c>
     834:	32 fe       	sbrs	r3, 2
     836:	02 c0       	rjmp	.+4      	; 0x83c <__vector_1+0x8c>
	{
		ibbpc_ev++;
     838:	23 94       	inc	r2
     83a:	1a c0       	rjmp	.+52     	; 0x870 <__vector_1+0xc0>
		ptf = &answer_has_been_recived;
		goto Rx_set;
	}
#endif
	else if (get_crc((void*)&frame, rx_len - 2) == *((uint16_t*)(pCurBufPtr - 2))) {
     83c:	62 50       	subi	r22, 0x02	; 2
     83e:	83 e2       	ldi	r24, 0x23	; 35
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	1c dc       	rcall	.-1992   	; 0x7c <get_crc>
     844:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <pCurBufPtr>
     848:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <pCurBufPtr+0x1>
     84c:	32 97       	sbiw	r30, 0x02	; 2
     84e:	20 81       	ld	r18, Z
     850:	31 81       	ldd	r19, Z+1	; 0x01
     852:	82 17       	cp	r24, r18
     854:	93 07       	cpc	r25, r19
     856:	49 f5       	brne	.+82     	; 0x8aa <__vector_1+0xfa>
		// Синхронизируемся каждый раз
		status |= SYNC;
     858:	83 2d       	mov	r24, r3
     85a:	93 2d       	mov	r25, r3
     85c:	91 60       	ori	r25, 0x01	; 1
     85e:	39 2e       	mov	r3, r25
     860:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <frame+0x1>
		// Если устройство - мастер ставим флаг "данные получены", выходим
		if (status & MASTER_MODE && frame.h.m_addr == MY_ADDRESS) {
     864:	82 ff       	sbrs	r24, 2
     866:	0b c0       	rjmp	.+22     	; 0x87e <__vector_1+0xce>
     868:	91 30       	cpi	r25, 0x01	; 1
     86a:	49 f4       	brne	.+18     	; 0x87e <__vector_1+0xce>
			status |= DATA_RECIVED;
     86c:	83 60       	ori	r24, 0x03	; 3
     86e:	38 2e       	mov	r3, r24
			ptf = &answer_has_been_recived;
     870:	86 e1       	ldi	r24, 0x16	; 22
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     878:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
			goto Rx_set;
     87c:	18 c0       	rjmp	.+48     	; 0x8ae <__vector_1+0xfe>
		} else {
			ac = frame.h.m_addr;
     87e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <ac>
     882:	87 7f       	andi	r24, 0xF7	; 247
			// устанавливаем счетчик
			// если устройство не участвует в обмене он установаиться 2 раза
			// если адресуемое устройство ответит
		}
		// Если устройство не мастер сброс флага предыдущего мастера
		status &= ~LAST_MASTER;
     884:	98 2f       	mov	r25, r24
     886:	91 60       	ori	r25, 0x01	; 1
     888:	39 2e       	mov	r3, r25
		if (frame.h.sl_addr == MY_ADDRESS) {
     88a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <frame>
     88e:	91 30       	cpi	r25, 0x01	; 1
     890:	61 f4       	brne	.+24     	; 0x8aa <__vector_1+0xfa>
			//	{
			//		ibbpc_ev = 1;
			//	} else {
			//		M_OCR = IBBPC_8 - M_TCNT;
			//	}
			status |= HIGH_PRIORITY;
     892:	81 61       	ori	r24, 0x11	; 17
     894:	38 2e       	mov	r3, r24
#ifdef DEBUG_CMD
			//				MAKE_DEBUG_CMD_0060(MY_ADDRESS, M_TCNT);
#endif // DEBUG_CMD
			ptf = &send_answer;
     896:	85 e0       	ldi	r24, 0x05	; 5
     898:	95 e0       	ldi	r25, 0x05	; 5
     89a:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     89e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
			M_TCNT = 0; // new
     8a2:	14 bc       	out	0x24, r1	; 36
			M_OCR = IBBPC_8;
     8a4:	83 e2       	ldi	r24, 0x23	; 35
     8a6:	83 bd       	out	0x23, r24	; 35
			goto Rx_set;
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__vector_1+0xfe>
		}
	} else {
		// bad crc received. do nothing
	}
	M_UCSRB = RX_ENABLED;
     8aa:	80 e9       	ldi	r24, 0x90	; 144
     8ac:	8a b9       	out	0x0a, r24	; 10
Rx_set:
	rx_len = 0;
     8ae:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <rx_len>
	pCurBufPtr = (void*)&frame;
     8b2:	83 e2       	ldi	r24, 0x23	; 35
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <pCurBufPtr+0x1>
     8ba:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <pCurBufPtr>
}
     8be:	ff 91       	pop	r31
     8c0:	ef 91       	pop	r30
     8c2:	bf 91       	pop	r27
     8c4:	af 91       	pop	r26
     8c6:	9f 91       	pop	r25
     8c8:	8f 91       	pop	r24
     8ca:	7f 91       	pop	r23
     8cc:	6f 91       	pop	r22
     8ce:	5f 91       	pop	r21
     8d0:	4f 91       	pop	r20
     8d2:	3f 91       	pop	r19
     8d4:	2f 91       	pop	r18
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	18 95       	reti

000008e0 <prepare_answer>:

	return 1;
}

/* Slave mode */
uint8_t prepare_answer(void) {
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	Frame* udp_frame = (void*)udp->data;
#	endif
#endif
	switch (frame.h.fun_num) {
     8e4:	c0 91 25 01 	lds	r28, 0x0125	; 0x800125 <frame+0x2>
     8e8:	c4 30       	cpi	r28, 0x04	; 4
     8ea:	58 f4       	brcc	.+22     	; 0x902 <prepare_answer+0x22>
     8ec:	c2 30       	cpi	r28, 0x02	; 2
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <prepare_answer+0x12>
     8f0:	57 c0       	rjmp	.+174    	; 0x9a0 <prepare_answer+0xc0>
     8f2:	cc 23       	and	r28, r28
     8f4:	29 f1       	breq	.+74     	; 0x940 <prepare_answer+0x60>
     8f6:	c1 30       	cpi	r28, 0x01	; 1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <prepare_answer+0x1c>
     8fa:	82 c0       	rjmp	.+260    	; 0xa00 <prepare_answer+0x120>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
	case REQ_WRITE_BITS: {
		// | bit_addr | bit_mask | bit_value | bit_status |
		for (uint8_t i = 0; i < frame.r_write_bits.nbits; ++i) {
			uint8_t val = *((uint8_t*)frame.r_write_bits.data->bit_addr);

			val &= frame.r_write_bits.data[i].bit_mask;
     8fe:	35 e0       	ldi	r19, 0x05	; 5
     900:	2a c0       	rjmp	.+84     	; 0x956 <prepare_answer+0x76>
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	Frame* udp_frame = (void*)udp->data;
#	endif
#endif
	switch (frame.h.fun_num) {
     902:	c9 30       	cpi	r28, 0x09	; 9
     904:	09 f4       	brne	.+2      	; 0x908 <prepare_answer+0x28>
     906:	67 c0       	rjmp	.+206    	; 0x9d6 <prepare_answer+0xf6>
     908:	c2 38       	cpi	r28, 0x82	; 130
     90a:	09 f0       	breq	.+2      	; 0x90e <prepare_answer+0x2e>
     90c:	79 c0       	rjmp	.+242    	; 0xa00 <prepare_answer+0x120>
	}
#endif
#ifdef PC_LINK
	case F_NOT_TRANSIT | 0x02: {
		void* begin_addr = (void*)udp_frame->r_read_bytes.addr_begin;
		memcpy(udp_frame->a_read_bytes.data, begin_addr, udp_frame->r_read_bytes.nbytes);
     90e:	d0 91 da 01 	lds	r29, 0x01DA	; 0x8001da <net_buf+0x2e>
     912:	4d 2f       	mov	r20, r29
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	60 91 db 01 	lds	r22, 0x01DB	; 0x8001db <net_buf+0x2f>
     91a:	70 91 dc 01 	lds	r23, 0x01DC	; 0x8001dc <net_buf+0x30>
     91e:	8b ed       	ldi	r24, 0xDB	; 219
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	79 d6       	rcall	.+3314   	; 0x1616 <memcpy>
		udp_frame->h.len = sizeof(frame_h) + sizeof(ans_read_bytes) + udp_frame->r_read_bytes.nbytes + 2;
     924:	c7 e0       	ldi	r28, 0x07	; 7
     926:	cd 0f       	add	r28, r29
     928:	c0 93 d9 01 	sts	0x01D9, r28	; 0x8001d9 <net_buf+0x2d>
		get_crc((void*)&frame, frame.h.len - 2);
	return IMMEDIATE_ANSWER;
#ifdef PC_LINK
_crc_for_udp :
	*((uint16_t*)((uint8_t*)udp_frame + udp_frame->h.len - 2)) =
		get_crc((void*)udp_frame, udp_frame->h.len - 2);
     92c:	65 e0       	ldi	r22, 0x05	; 5
     92e:	6d 0f       	add	r22, r29
     930:	86 ed       	ldi	r24, 0xD6	; 214
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	a3 db       	rcall	.-2234   	; 0x7c <get_crc>
	*((uint16_t*)((uint8_t*)&frame + frame.h.len - 2)) =
		get_crc((void*)&frame, frame.h.len - 2);
	return IMMEDIATE_ANSWER;
#ifdef PC_LINK
_crc_for_udp :
	*((uint16_t*)((uint8_t*)udp_frame + udp_frame->h.len - 2)) =
     936:	ec 2f       	mov	r30, r28
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	ec 52       	subi	r30, 0x2C	; 44
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	48 c0       	rjmp	.+144    	; 0x9d0 <prepare_answer+0xf0>
#endif
	switch (frame.h.fun_num) {
		// Write Bytes
	case REQ_WRITE_BYTES: {
		void* begin_addr = (void*)frame.r_write_bytes.addr;
		memcpy(begin_addr, frame.r_write_bytes.data, frame.r_write_bytes.len);
     940:	40 91 27 01 	lds	r20, 0x0127	; 0x800127 <frame+0x4>
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	6a e2       	ldi	r22, 0x2A	; 42
     948:	71 e0       	ldi	r23, 0x01	; 1
     94a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <frame+0x5>
     94e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <frame+0x6>
     952:	61 d6       	rcall	.+3266   	; 0x1616 <memcpy>
		return IMMEDIATE_ANSWER;
     954:	56 c0       	rjmp	.+172    	; 0xa02 <prepare_answer+0x122>
	}
	// Write Bits
	case REQ_WRITE_BITS: {
		// | bit_addr | bit_mask | bit_value | bit_status |
		for (uint8_t i = 0; i < frame.r_write_bits.nbits; ++i) {
     956:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <frame+0x4>
     95a:	28 17       	cp	r18, r24
     95c:	08 f0       	brcs	.+2      	; 0x960 <prepare_answer+0x80>
     95e:	4e c0       	rjmp	.+156    	; 0x9fc <prepare_answer+0x11c>
			uint8_t val = *((uint8_t*)frame.r_write_bits.data->bit_addr);
     960:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <frame+0x5>
     964:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <frame+0x6>
     968:	9c 91       	ld	r25, X

			val &= frame.r_write_bits.data[i].bit_mask;
     96a:	42 2f       	mov	r20, r18
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	34 9f       	mul	r19, r20
     970:	f0 01       	movw	r30, r0
     972:	35 9f       	mul	r19, r21
     974:	f0 0d       	add	r31, r0
     976:	11 24       	eor	r1, r1
     978:	ed 5d       	subi	r30, 0xDD	; 221
     97a:	fe 4f       	sbci	r31, 0xFE	; 254
     97c:	87 81       	ldd	r24, Z+7	; 0x07
     97e:	98 23       	and	r25, r24
			val |= frame.r_write_bits.data[i].bit_val | frame.r_write_bits.data[i].bit_status;
     980:	4f 5f       	subi	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	34 9f       	mul	r19, r20
     986:	e0 01       	movw	r28, r0
     988:	35 9f       	mul	r19, r21
     98a:	d0 0d       	add	r29, r0
     98c:	11 24       	eor	r1, r1
     98e:	cd 5d       	subi	r28, 0xDD	; 221
     990:	de 4f       	sbci	r29, 0xFE	; 254

			*((uint8_t*)frame.r_write_bits.data->bit_addr) = val;
     992:	40 85       	ldd	r20, Z+8	; 0x08
     994:	8c 81       	ldd	r24, Y+4	; 0x04
     996:	84 2b       	or	r24, r20
     998:	89 2b       	or	r24, r25
     99a:	8c 93       	st	X, r24
		return IMMEDIATE_ANSWER;
	}
	// Write Bits
	case REQ_WRITE_BITS: {
		// | bit_addr | bit_mask | bit_value | bit_status |
		for (uint8_t i = 0; i < frame.r_write_bits.nbits; ++i) {
     99c:	2f 5f       	subi	r18, 0xFF	; 255
     99e:	db cf       	rjmp	.-74     	; 0x956 <prepare_answer+0x76>
	// Send Bytes
	case REQ_READ_BYTES:
	case REQ_READ_BITS: {
		// RD сгрупированы и отсортированы по адресу в слейве
		void* begin_addr = (void*)frame.r_read_bytes.addr_begin;
		memcpy(frame.a_read_bytes.data, begin_addr, frame.r_read_bytes.nbytes);
     9a0:	d0 91 27 01 	lds	r29, 0x0127	; 0x800127 <frame+0x4>
     9a4:	4d 2f       	mov	r20, r29
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <frame+0x5>
     9ac:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <frame+0x6>
     9b0:	88 e2       	ldi	r24, 0x28	; 40
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	30 d6       	rcall	.+3168   	; 0x1616 <memcpy>
		frame.h.len = sizeof(frame_h) + sizeof(ans_read_bytes) + frame.r_read_bytes.nbytes + 2;
     9b6:	c7 e0       	ldi	r28, 0x07	; 7
     9b8:	cd 0f       	add	r28, r29
     9ba:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <frame+0x3>
	default:
		return NO_ANSWER;
	}
_crc_for_frame:
	*((uint16_t*)((uint8_t*)&frame + frame.h.len - 2)) =
		get_crc((void*)&frame, frame.h.len - 2);
     9be:	65 e0       	ldi	r22, 0x05	; 5
     9c0:	6d 0f       	add	r22, r29
     9c2:	83 e2       	ldi	r24, 0x23	; 35
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	5a db       	rcall	.-2380   	; 0x7c <get_crc>
	}
	default:
		return NO_ANSWER;
	}
_crc_for_frame:
	*((uint16_t*)((uint8_t*)&frame + frame.h.len - 2)) =
     9c8:	ec 2f       	mov	r30, r28
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	ef 5d       	subi	r30, 0xDF	; 223
     9ce:	fe 4f       	sbci	r31, 0xFE	; 254
		get_crc((void*)&frame, frame.h.len - 2);
	return IMMEDIATE_ANSWER;
#ifdef PC_LINK
_crc_for_udp :
	*((uint16_t*)((uint8_t*)udp_frame + udp_frame->h.len - 2)) =
     9d0:	91 83       	std	Z+1, r25	; 0x01
     9d2:	80 83       	st	Z, r24
     9d4:	13 c0       	rjmp	.+38     	; 0x9fc <prepare_answer+0x11c>
		goto _crc_for_udp;
	}
#endif
	// Write Bit
	case REQ_WRITE_BIT: {
		*((uint8_t*)frame.r_write_bit.bit_addr) &= ~frame.r_write_bit.bit_n;
     9d6:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <frame+0x4>
     9da:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <frame+0x5>
     9de:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <frame+0x6>
     9e2:	80 95       	com	r24
     9e4:	90 81       	ld	r25, Z
     9e6:	89 23       	and	r24, r25
     9e8:	80 83       	st	Z, r24
		*((uint8_t*)frame.r_write_bit.bit_addr) |= frame.r_write_bit.bit_val;
     9ea:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <frame+0x4>
     9ee:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <frame+0x5>
     9f2:	90 81       	ld	r25, Z
     9f4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <frame+0x7>
     9f8:	89 2b       	or	r24, r25
     9fa:	80 83       	st	Z, r24
		return IMMEDIATE_ANSWER;
     9fc:	c0 e0       	ldi	r28, 0x00	; 0
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <prepare_answer+0x122>
	}
	default:
		return NO_ANSWER;
     a00:	c2 e0       	ldi	r28, 0x02	; 2
_crc_for_udp :
	*((uint16_t*)((uint8_t*)udp_frame + udp_frame->h.len - 2)) =
		get_crc((void*)udp_frame, udp_frame->h.len - 2);
	return IMMEDIATE_ANSWER;
#endif
}
     a02:	8c 2f       	mov	r24, r28
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <send_answer>:
	}
	M_UCSRB = RX_ENABLED;
}

static void send_answer(void) {
	ptf = &idle_40;
     a0a:	80 e4       	ldi	r24, 0x40	; 64
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <ptf+0x1>
     a12:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ptf>
	M_OCR = IBBPC_40;
     a16:	8a ea       	ldi	r24, 0xAA	; 170
     a18:	83 bd       	out	0x23, r24	; 35
	if (prepare_answer() == IMMEDIATE_ANSWER) {
     a1a:	62 df       	rcall	.-316    	; 0x8e0 <prepare_answer>
     a1c:	81 11       	cpse	r24, r1
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <send_answer+0x18>
		start_transmit();
     a20:	b1 cb       	rjmp	.-2206   	; 0x184 <start_transmit>
	} else {
		M_UCSRB = RX_ENABLED;
     a22:	80 e9       	ldi	r24, 0x90	; 144
     a24:	8a b9       	out	0x0a, r24	; 10
     a26:	08 95       	ret

00000a28 <enc28j60_rxtx>:

#define enc28j60_select() ENC28J60_SPI_PORT &= ~ENC28J60_SPI_CS
#define enc28j60_release() ENC28J60_SPI_PORT |= ENC28J60_SPI_CS

uint8_t enc28j60_rxtx(uint8_t data) {
	SPDR = data;
     a28:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
     a2a:	77 9b       	sbis	0x0e, 7	; 14
     a2c:	fe cf       	rjmp	.-4      	; 0xa2a <enc28j60_rxtx+0x2>
	return SPDR;
     a2e:	8f b1       	in	r24, 0x0f	; 15
}
     a30:	08 95       	ret

00000a32 <enc28j60_read_op>:

#define enc28j60_rx() enc28j60_rxtx(0xff)
#define enc28j60_tx(data) enc28j60_rxtx(data)

// Generic SPI read command
uint8_t enc28j60_read_op(uint8_t cmd, uint8_t adr) {
     a32:	cf 93       	push	r28
     a34:	c6 2f       	mov	r28, r22
	uint8_t data;

	enc28j60_select();
     a36:	c2 98       	cbi	0x18, 2	; 24
	enc28j60_tx(cmd | (adr & ENC28J60_ADDR_MASK));
     a38:	96 2f       	mov	r25, r22
     a3a:	9f 71       	andi	r25, 0x1F	; 31
     a3c:	89 2b       	or	r24, r25
     a3e:	f4 df       	rcall	.-24     	; 0xa28 <enc28j60_rxtx>
	
	// throw out dummy byte
	// when reading MII/MAC register
	if (adr & 0x80) enc28j60_rx(); 
     a40:	c7 ff       	sbrs	r28, 7
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <enc28j60_read_op+0x16>
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	f0 df       	rcall	.-32     	; 0xa28 <enc28j60_rxtx>
	
	data = enc28j60_rx();
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	ee df       	rcall	.-36     	; 0xa28 <enc28j60_rxtx>
	enc28j60_release();
     a4c:	c2 9a       	sbi	0x18, 2	; 24
	return data;
}
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <enc28j60_write_op>:

// Generic SPI write command
void enc28j60_write_op(uint8_t cmd, uint8_t adr, uint8_t data) {
     a52:	cf 93       	push	r28
     a54:	c4 2f       	mov	r28, r20
	enc28j60_select();
     a56:	c2 98       	cbi	0x18, 2	; 24
	enc28j60_tx(cmd | (adr & ENC28J60_ADDR_MASK));
     a58:	6f 71       	andi	r22, 0x1F	; 31
     a5a:	86 2b       	or	r24, r22
     a5c:	e5 df       	rcall	.-54     	; 0xa28 <enc28j60_rxtx>
	enc28j60_tx(data);
     a5e:	8c 2f       	mov	r24, r28
     a60:	e3 df       	rcall	.-58     	; 0xa28 <enc28j60_rxtx>
	enc28j60_release();
     a62:	c2 9a       	sbi	0x18, 2	; 24
}
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <enc28j60_soft_reset>:

// Initiate software reset
void enc28j60_soft_reset(void) {
	enc28j60_select();
     a68:	c2 98       	cbi	0x18, 2	; 24
	enc28j60_tx(ENC28J60_SPI_SC);
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	dd df       	rcall	.-70     	; 0xa28 <enc28j60_rxtx>
	enc28j60_release();
     a6e:	c2 9a       	sbi	0x18, 2	; 24

	enc28j60_current_bank = 0;
     a70:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <enc28j60_current_bank>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a74:	8f e9       	ldi	r24, 0x9F	; 159
     a76:	9f e0       	ldi	r25, 0x0F	; 15
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <enc28j60_soft_reset+0x10>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <enc28j60_soft_reset+0x16>
     a7e:	00 00       	nop
     a80:	08 95       	ret

00000a82 <enc28j60_set_bank>:
/*
 * Memory access
 */

 // Set register bank
void enc28j60_set_bank(uint8_t adr) {
     a82:	cf 93       	push	r28
	uint8_t bank;

	if ((adr & ENC28J60_ADDR_MASK) < ENC28J60_COMMON_CR) {
     a84:	98 2f       	mov	r25, r24
     a86:	9f 71       	andi	r25, 0x1F	; 31
     a88:	9b 31       	cpi	r25, 0x1B	; 27
     a8a:	98 f4       	brcc	.+38     	; 0xab2 <enc28j60_set_bank+0x30>
		bank = (adr >> 5) & 0x03; //BSEL1|BSEL0=0x03
     a8c:	82 95       	swap	r24
     a8e:	86 95       	lsr	r24
     a90:	87 70       	andi	r24, 0x07	; 7
     a92:	c8 2f       	mov	r28, r24
     a94:	c3 70       	andi	r28, 0x03	; 3
		if (bank != enc28j60_current_bank)
     a96:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <enc28j60_current_bank>
     a9a:	c8 17       	cp	r28, r24
     a9c:	51 f0       	breq	.+20     	; 0xab2 <enc28j60_set_bank+0x30>
		{
			enc28j60_write_op(ENC28J60_SPI_BFC, ECON1, 0x03);
     a9e:	43 e0       	ldi	r20, 0x03	; 3
     aa0:	6f e1       	ldi	r22, 0x1F	; 31
     aa2:	80 ea       	ldi	r24, 0xA0	; 160
     aa4:	d6 df       	rcall	.-84     	; 0xa52 <enc28j60_write_op>
			enc28j60_write_op(ENC28J60_SPI_BFS, ECON1, bank);
     aa6:	4c 2f       	mov	r20, r28
     aa8:	6f e1       	ldi	r22, 0x1F	; 31
     aaa:	80 e8       	ldi	r24, 0x80	; 128
     aac:	d2 df       	rcall	.-92     	; 0xa52 <enc28j60_write_op>
			enc28j60_current_bank = bank;
     aae:	c0 93 7d 00 	sts	0x007D, r28	; 0x80007d <enc28j60_current_bank>
		}
	}
}
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <enc28j60_rcr>:

// Read register
uint8_t enc28j60_rcr(uint8_t adr) {
     ab6:	cf 93       	push	r28
     ab8:	c8 2f       	mov	r28, r24
	enc28j60_set_bank(adr);
     aba:	e3 df       	rcall	.-58     	; 0xa82 <enc28j60_set_bank>
	return enc28j60_read_op(ENC28J60_SPI_RCR, adr);
     abc:	6c 2f       	mov	r22, r28
     abe:	80 e0       	ldi	r24, 0x00	; 0
}
     ac0:	cf 91       	pop	r28
}

// Read register
uint8_t enc28j60_rcr(uint8_t adr) {
	enc28j60_set_bank(adr);
	return enc28j60_read_op(ENC28J60_SPI_RCR, adr);
     ac2:	b7 cf       	rjmp	.-146    	; 0xa32 <enc28j60_read_op>

00000ac4 <enc28j60_rcr16>:
}

// Read register pair
uint16_t enc28j60_rcr16(uint8_t adr) {
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	c8 2f       	mov	r28, r24
	enc28j60_set_bank(adr);
     aca:	db df       	rcall	.-74     	; 0xa82 <enc28j60_set_bank>
	return enc28j60_read_op(ENC28J60_SPI_RCR, adr) |
     acc:	6c 2f       	mov	r22, r28
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	b0 df       	rcall	.-160    	; 0xa32 <enc28j60_read_op>
     ad2:	d8 2f       	mov	r29, r24
		(enc28j60_read_op(ENC28J60_SPI_RCR, adr + 1) << 8);
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	6c 0f       	add	r22, r28
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	ab df       	rcall	.-170    	; 0xa32 <enc28j60_read_op>
}

// Read register pair
uint16_t enc28j60_rcr16(uint8_t adr) {
	enc28j60_set_bank(adr);
	return enc28j60_read_op(ENC28J60_SPI_RCR, adr) |
     adc:	2d 2f       	mov	r18, r29
     ade:	30 e0       	ldi	r19, 0x00	; 0
		(enc28j60_read_op(ENC28J60_SPI_RCR, adr + 1) << 8);
}
     ae0:	a9 01       	movw	r20, r18
     ae2:	58 2b       	or	r21, r24
     ae4:	ca 01       	movw	r24, r20
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <enc28j60_wcr>:

// Write register
void enc28j60_wcr(uint8_t adr, uint8_t arg) {
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	c8 2f       	mov	r28, r24
     af2:	d6 2f       	mov	r29, r22
	enc28j60_set_bank(adr);
     af4:	c6 df       	rcall	.-116    	; 0xa82 <enc28j60_set_bank>
	enc28j60_write_op(ENC28J60_SPI_WCR, adr, arg);
     af6:	4d 2f       	mov	r20, r29
     af8:	6c 2f       	mov	r22, r28
     afa:	80 e4       	ldi	r24, 0x40	; 64
}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
}

// Write register
void enc28j60_wcr(uint8_t adr, uint8_t arg) {
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_WCR, adr, arg);
     b00:	a8 cf       	rjmp	.-176    	; 0xa52 <enc28j60_write_op>

00000b02 <enc28j60_wcr16>:
}

// Write register pair
void enc28j60_wcr16(uint8_t adr, uint16_t arg) {
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	c8 2f       	mov	r28, r24
     b0a:	16 2f       	mov	r17, r22
     b0c:	d7 2f       	mov	r29, r23
	enc28j60_set_bank(adr);
     b0e:	b9 df       	rcall	.-142    	; 0xa82 <enc28j60_set_bank>
	enc28j60_write_op(ENC28J60_SPI_WCR, adr, arg);
     b10:	41 2f       	mov	r20, r17
     b12:	6c 2f       	mov	r22, r28
     b14:	80 e4       	ldi	r24, 0x40	; 64
     b16:	9d df       	rcall	.-198    	; 0xa52 <enc28j60_write_op>
	enc28j60_write_op(ENC28J60_SPI_WCR, adr + 1, arg >> 8);
     b18:	61 e0       	ldi	r22, 0x01	; 1
     b1a:	6c 0f       	add	r22, r28
     b1c:	4d 2f       	mov	r20, r29
     b1e:	80 e4       	ldi	r24, 0x40	; 64
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17

// Write register pair
void enc28j60_wcr16(uint8_t adr, uint16_t arg) {
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_WCR, adr, arg);
	enc28j60_write_op(ENC28J60_SPI_WCR, adr + 1, arg >> 8);
     b26:	95 cf       	rjmp	.-214    	; 0xa52 <enc28j60_write_op>

00000b28 <enc28j60_bfc>:
}

// Clear bits in register (reg &= ~mask)
void enc28j60_bfc(uint8_t adr, uint8_t mask) {
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	c8 2f       	mov	r28, r24
     b2e:	d6 2f       	mov	r29, r22
	enc28j60_set_bank(adr);
     b30:	a8 df       	rcall	.-176    	; 0xa82 <enc28j60_set_bank>
	enc28j60_write_op(ENC28J60_SPI_BFC, adr, mask);
     b32:	4d 2f       	mov	r20, r29
     b34:	6c 2f       	mov	r22, r28
     b36:	80 ea       	ldi	r24, 0xA0	; 160
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
}

// Clear bits in register (reg &= ~mask)
void enc28j60_bfc(uint8_t adr, uint8_t mask) {
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_BFC, adr, mask);
     b3c:	8a cf       	rjmp	.-236    	; 0xa52 <enc28j60_write_op>

00000b3e <enc28j60_bfs>:
}

// Set bits in register (reg |= mask)
void enc28j60_bfs(uint8_t adr, uint8_t mask) {
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	c8 2f       	mov	r28, r24
     b44:	d6 2f       	mov	r29, r22
	enc28j60_set_bank(adr);
     b46:	9d df       	rcall	.-198    	; 0xa82 <enc28j60_set_bank>
	enc28j60_write_op(ENC28J60_SPI_BFS, adr, mask);
     b48:	4d 2f       	mov	r20, r29
     b4a:	6c 2f       	mov	r22, r28
     b4c:	80 e8       	ldi	r24, 0x80	; 128
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
}

// Set bits in register (reg |= mask)
void enc28j60_bfs(uint8_t adr, uint8_t mask) {
	enc28j60_set_bank(adr);
	enc28j60_write_op(ENC28J60_SPI_BFS, adr, mask);
     b52:	7f cf       	rjmp	.-258    	; 0xa52 <enc28j60_write_op>

00000b54 <enc28j60_read_buffer>:
}

// Read Rx/Tx buffer (at ERDPT)
void enc28j60_read_buffer(uint8_t* buf, uint16_t len) {
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	7c 01       	movw	r14, r24
     b62:	8b 01       	movw	r16, r22
	enc28j60_select();
     b64:	c2 98       	cbi	0x18, 2	; 24
	enc28j60_tx(ENC28J60_SPI_RBM);
     b66:	8a e3       	ldi	r24, 0x3A	; 58
     b68:	5f df       	rcall	.-322    	; 0xa28 <enc28j60_rxtx>
     b6a:	e7 01       	movw	r28, r14
     b6c:	0e 0d       	add	r16, r14
     b6e:	1f 1d       	adc	r17, r15
	while (len--) *(buf++) = enc28j60_rx();
     b70:	c0 17       	cp	r28, r16
     b72:	d1 07       	cpc	r29, r17
     b74:	21 f0       	breq	.+8      	; 0xb7e <enc28j60_read_buffer+0x2a>
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	57 df       	rcall	.-338    	; 0xa28 <enc28j60_rxtx>
     b7a:	89 93       	st	Y+, r24
     b7c:	f9 cf       	rjmp	.-14     	; 0xb70 <enc28j60_read_buffer+0x1c>
	enc28j60_release();
     b7e:	c2 9a       	sbi	0x18, 2	; 24
}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <enc28j60_write_buffer>:

// Write Rx/Tx buffer (at EWRPT)
void enc28j60_write_buffer(uint8_t* buf, uint16_t len) {
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	7c 01       	movw	r14, r24
     b9c:	8b 01       	movw	r16, r22
	enc28j60_select();
     b9e:	c2 98       	cbi	0x18, 2	; 24
	enc28j60_tx(ENC28J60_SPI_WBM);
     ba0:	8a e7       	ldi	r24, 0x7A	; 122
     ba2:	42 df       	rcall	.-380    	; 0xa28 <enc28j60_rxtx>
     ba4:	e7 01       	movw	r28, r14
     ba6:	0e 0d       	add	r16, r14
     ba8:	1f 1d       	adc	r17, r15
	while (len--) enc28j60_tx(*(buf++));
     baa:	c0 17       	cp	r28, r16
     bac:	d1 07       	cpc	r29, r17
     bae:	19 f0       	breq	.+6      	; 0xbb6 <enc28j60_write_buffer+0x28>
     bb0:	89 91       	ld	r24, Y+
     bb2:	3a df       	rcall	.-396    	; 0xa28 <enc28j60_rxtx>
     bb4:	fa cf       	rjmp	.-12     	; 0xbaa <enc28j60_write_buffer+0x1c>
	enc28j60_release();
     bb6:	c2 9a       	sbi	0x18, 2	; 24
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	08 95       	ret

00000bc6 <enc28j60_read_phy>:

// Read PHY register
uint16_t enc28j60_read_phy(uint8_t adr) {
	enc28j60_wcr(MIREGADR, adr);
     bc6:	68 2f       	mov	r22, r24
     bc8:	84 ed       	ldi	r24, 0xD4	; 212
     bca:	90 df       	rcall	.-224    	; 0xaec <enc28j60_wcr>
	enc28j60_bfs(MICMD, MICMD_MIIRD);
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	82 ed       	ldi	r24, 0xD2	; 210
     bd0:	b6 df       	rcall	.-148    	; 0xb3e <enc28j60_bfs>
	while (enc28j60_rcr(MISTAT) & MISTAT_BUSY);
     bd2:	8a ee       	ldi	r24, 0xEA	; 234
     bd4:	70 df       	rcall	.-288    	; 0xab6 <enc28j60_rcr>
     bd6:	80 fd       	sbrc	r24, 0
     bd8:	fc cf       	rjmp	.-8      	; 0xbd2 <enc28j60_read_phy+0xc>
	enc28j60_bfc(MICMD, MICMD_MIIRD);
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	82 ed       	ldi	r24, 0xD2	; 210
     bde:	a4 df       	rcall	.-184    	; 0xb28 <enc28j60_bfc>
	return enc28j60_rcr16(MIRD);
     be0:	88 ed       	ldi	r24, 0xD8	; 216
     be2:	70 cf       	rjmp	.-288    	; 0xac4 <enc28j60_rcr16>

00000be4 <enc28j60_write_phy>:
}

// Write PHY register
void enc28j60_write_phy(uint8_t adr, uint16_t data) {
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	eb 01       	movw	r28, r22
	enc28j60_wcr(MIREGADR, adr);
     bea:	68 2f       	mov	r22, r24
     bec:	84 ed       	ldi	r24, 0xD4	; 212
     bee:	7e df       	rcall	.-260    	; 0xaec <enc28j60_wcr>
	enc28j60_wcr16(MIWR, data);
     bf0:	be 01       	movw	r22, r28
     bf2:	86 ed       	ldi	r24, 0xD6	; 214
     bf4:	86 df       	rcall	.-244    	; 0xb02 <enc28j60_wcr16>
	while (enc28j60_rcr(MISTAT) & MISTAT_BUSY);
     bf6:	8a ee       	ldi	r24, 0xEA	; 234
     bf8:	5e df       	rcall	.-324    	; 0xab6 <enc28j60_rcr>
     bfa:	80 fd       	sbrc	r24, 0
     bfc:	fc cf       	rjmp	.-8      	; 0xbf6 <enc28j60_write_phy+0x12>
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <enc28j60_init>:

/*
 * Init & packet Rx/Tx
 */

void enc28j60_init(uint8_t* _macadr) {
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
	static uint8_t* macadr;
	
	if (_macadr) macadr = _macadr;
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	21 f0       	breq	.+8      	; 0xc14 <enc28j60_init+0x10>
     c0c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <macadr.1841+0x1>
     c10:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <macadr.1841>

	// Initialize SPI
	ENC28J60_SPI_DDR |= ENC28J60_SPI_CS | ENC28J60_SPI_MOSI | ENC28J60_SPI_SCK;
     c14:	87 b3       	in	r24, 0x17	; 23
     c16:	8c 62       	ori	r24, 0x2C	; 44
     c18:	87 bb       	out	0x17, r24	; 23
	ENC28J60_SPI_DDR &= ~ENC28J60_SPI_MISO;
     c1a:	bc 98       	cbi	0x17, 4	; 23
	enc28j60_release();
     c1c:	c2 9a       	sbi	0x18, 2	; 24

	SPCR = (1 << SPE) | (1 << MSTR);
     c1e:	80 e5       	ldi	r24, 0x50	; 80
     c20:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1 << SPI2X); // Maximum speed
     c22:	70 9a       	sbi	0x0e, 0	; 14

	// Reset ENC28J60
	enc28j60_soft_reset();
     c24:	21 df       	rcall	.-446    	; 0xa68 <enc28j60_soft_reset>

	// Setup Rx/Tx buffer
	enc28j60_wcr16(ERXST, ENC28J60_RXSTART);
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	6a df       	rcall	.-300    	; 0xb02 <enc28j60_wcr16>
	enc28j60_wcr16(ERXRDPT, ENC28J60_RXSTART);
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	8c e0       	ldi	r24, 0x0C	; 12
     c34:	66 df       	rcall	.-308    	; 0xb02 <enc28j60_wcr16>
	enc28j60_wcr16(ERXND, ENC28J60_RXEND);
     c36:	6f ef       	ldi	r22, 0xFF	; 255
     c38:	79 e1       	ldi	r23, 0x19	; 25
     c3a:	8a e0       	ldi	r24, 0x0A	; 10
     c3c:	62 df       	rcall	.-316    	; 0xb02 <enc28j60_wcr16>
	enc28j60_rxrdpt = ENC28J60_RXSTART;
     c3e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <enc28j60_rxrdpt+0x1>
     c42:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <enc28j60_rxrdpt>

	// Setup MAC
	enc28j60_wcr(MACON1, MACON1_TXPAUS | // Enable flow control
     c46:	6d e0       	ldi	r22, 0x0D	; 13
     c48:	80 ec       	ldi	r24, 0xC0	; 192
     c4a:	50 df       	rcall	.-352    	; 0xaec <enc28j60_wcr>
		MACON1_RXPAUS | MACON1_MARXEN); // Enable MAC Rx
	enc28j60_wcr(MACON2, 0); // Clear reset
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	81 ec       	ldi	r24, 0xC1	; 193
     c50:	4d df       	rcall	.-358    	; 0xaec <enc28j60_wcr>
	enc28j60_wcr(MACON3, MACON3_PADCFG0 | // Enable padding,
     c52:	63 e3       	ldi	r22, 0x33	; 51
     c54:	82 ec       	ldi	r24, 0xC2	; 194
     c56:	4a df       	rcall	.-364    	; 0xaec <enc28j60_wcr>
		MACON3_TXCRCEN | MACON3_FRMLNEN | MACON3_FULDPX); // Enable crc & frame len chk
	enc28j60_wcr16(MAMXFL, ENC28J60_MAXFRAME);
     c58:	68 ec       	ldi	r22, 0xC8	; 200
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	8a ec       	ldi	r24, 0xCA	; 202
     c5e:	51 df       	rcall	.-350    	; 0xb02 <enc28j60_wcr16>
	enc28j60_wcr(MABBIPG, 0x15); // Set inter-frame gap
     c60:	65 e1       	ldi	r22, 0x15	; 21
     c62:	84 ec       	ldi	r24, 0xC4	; 196
     c64:	43 df       	rcall	.-378    	; 0xaec <enc28j60_wcr>
	enc28j60_wcr(MAIPGL, 0x12);
     c66:	62 e1       	ldi	r22, 0x12	; 18
     c68:	86 ec       	ldi	r24, 0xC6	; 198
     c6a:	40 df       	rcall	.-384    	; 0xaec <enc28j60_wcr>
	enc28j60_wcr(MAIPGH, 0x0c);
     c6c:	6c e0       	ldi	r22, 0x0C	; 12
     c6e:	87 ec       	ldi	r24, 0xC7	; 199
     c70:	3d df       	rcall	.-390    	; 0xaec <enc28j60_wcr>
	enc28j60_wcr(MAADR5, macadr[0]); // Set MAC address
     c72:	c0 91 79 00 	lds	r28, 0x0079	; 0x800079 <macadr.1841>
     c76:	d0 91 7a 00 	lds	r29, 0x007A	; 0x80007a <macadr.1841+0x1>
     c7a:	68 81       	ld	r22, Y
     c7c:	84 ee       	ldi	r24, 0xE4	; 228
     c7e:	36 df       	rcall	.-404    	; 0xaec <enc28j60_wcr>
	enc28j60_wcr(MAADR4, macadr[1]);
     c80:	69 81       	ldd	r22, Y+1	; 0x01
     c82:	85 ee       	ldi	r24, 0xE5	; 229
     c84:	33 df       	rcall	.-410    	; 0xaec <enc28j60_wcr>
	enc28j60_wcr(MAADR3, macadr[2]);
     c86:	6a 81       	ldd	r22, Y+2	; 0x02
     c88:	82 ee       	ldi	r24, 0xE2	; 226
     c8a:	30 df       	rcall	.-416    	; 0xaec <enc28j60_wcr>
	enc28j60_wcr(MAADR2, macadr[3]);
     c8c:	6b 81       	ldd	r22, Y+3	; 0x03
     c8e:	83 ee       	ldi	r24, 0xE3	; 227
     c90:	2d df       	rcall	.-422    	; 0xaec <enc28j60_wcr>
	enc28j60_wcr(MAADR1, macadr[4]);
     c92:	6c 81       	ldd	r22, Y+4	; 0x04
     c94:	80 ee       	ldi	r24, 0xE0	; 224
     c96:	2a df       	rcall	.-428    	; 0xaec <enc28j60_wcr>
	enc28j60_wcr(MAADR0, macadr[5]);
     c98:	6d 81       	ldd	r22, Y+5	; 0x05
     c9a:	81 ee       	ldi	r24, 0xE1	; 225
     c9c:	27 df       	rcall	.-434    	; 0xaec <enc28j60_wcr>

	// Setup PHY
	enc28j60_write_phy(PHCON1, PHCON1_PDPXMD); // Force full-duplex mode
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	71 e0       	ldi	r23, 0x01	; 1
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	9f df       	rcall	.-194    	; 0xbe4 <enc28j60_write_phy>
	enc28j60_write_phy(PHCON2, PHCON2_HDLDIS); // Disable loopback
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	71 e0       	ldi	r23, 0x01	; 1
     caa:	80 e1       	ldi	r24, 0x10	; 16
     cac:	9b df       	rcall	.-202    	; 0xbe4 <enc28j60_write_phy>
	enc28j60_write_phy(PHLCON, PHLCON_LACFG2 | // Configure LED ctrl
     cae:	66 e7       	ldi	r22, 0x76	; 118
     cb0:	74 e0       	ldi	r23, 0x04	; 4
     cb2:	84 e1       	ldi	r24, 0x14	; 20
     cb4:	97 df       	rcall	.-210    	; 0xbe4 <enc28j60_write_phy>
		PHLCON_LBCFG2 | PHLCON_LBCFG1 | PHLCON_LBCFG0 |
		PHLCON_LFRQ0 | PHLCON_STRCH);

	// Enable Rx packets
	enc28j60_bfs(ECON1, ECON1_RXEN);
     cb6:	64 e0       	ldi	r22, 0x04	; 4
     cb8:	8f e1       	ldi	r24, 0x1F	; 31
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
	enc28j60_write_phy(PHLCON, PHLCON_LACFG2 | // Configure LED ctrl
		PHLCON_LBCFG2 | PHLCON_LBCFG1 | PHLCON_LBCFG0 |
		PHLCON_LFRQ0 | PHLCON_STRCH);

	// Enable Rx packets
	enc28j60_bfs(ECON1, ECON1_RXEN);
     cbe:	3f cf       	rjmp	.-386    	; 0xb3e <enc28j60_bfs>

00000cc0 <enc28j60_send_packet>:
}

void enc28j60_send_packet(uint8_t* data, uint16_t len) {
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	8c 01       	movw	r16, r24
     cca:	eb 01       	movw	r28, r22
	while (enc28j60_rcr(ECON1) & ECON1_TXRTS) {
     ccc:	8f e1       	ldi	r24, 0x1F	; 31
     cce:	f3 de       	rcall	.-538    	; 0xab6 <enc28j60_rcr>
     cd0:	83 ff       	sbrs	r24, 3
     cd2:	0b c0       	rjmp	.+22     	; 0xcea <enc28j60_send_packet+0x2a>
		// TXRTS may not clear - ENC28J60 bug. We must reset
		// transmit logic in cause of Tx error
		if (enc28j60_rcr(EIR) & EIR_TXERIF) {
     cd4:	8c e1       	ldi	r24, 0x1C	; 28
     cd6:	ef de       	rcall	.-546    	; 0xab6 <enc28j60_rcr>
     cd8:	81 ff       	sbrs	r24, 1
     cda:	f8 cf       	rjmp	.-16     	; 0xccc <enc28j60_send_packet+0xc>
			enc28j60_bfs(ECON1, ECON1_TXRST);
     cdc:	60 e8       	ldi	r22, 0x80	; 128
     cde:	8f e1       	ldi	r24, 0x1F	; 31
     ce0:	2e df       	rcall	.-420    	; 0xb3e <enc28j60_bfs>
			enc28j60_bfc(ECON1, ECON1_TXRST);
     ce2:	60 e8       	ldi	r22, 0x80	; 128
     ce4:	8f e1       	ldi	r24, 0x1F	; 31
     ce6:	20 df       	rcall	.-448    	; 0xb28 <enc28j60_bfc>
     ce8:	f1 cf       	rjmp	.-30     	; 0xccc <enc28j60_send_packet+0xc>
		}
	}

	enc28j60_wcr16(EWRPT, ENC28J60_TXSTART);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	7a e1       	ldi	r23, 0x1A	; 26
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	08 df       	rcall	.-496    	; 0xb02 <enc28j60_wcr16>

	static uint8_t padding[1];

	enc28j60_write_buffer(padding, 1);
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	88 e7       	ldi	r24, 0x78	; 120
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	49 df       	rcall	.-366    	; 0xb8e <enc28j60_write_buffer>
	enc28j60_write_buffer(data, len);
     cfc:	be 01       	movw	r22, r28
     cfe:	c8 01       	movw	r24, r16
     d00:	46 df       	rcall	.-372    	; 0xb8e <enc28j60_write_buffer>

	enc28j60_wcr16(ETXST, ENC28J60_TXSTART);
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	7a e1       	ldi	r23, 0x1A	; 26
     d06:	84 e0       	ldi	r24, 0x04	; 4
     d08:	fc de       	rcall	.-520    	; 0xb02 <enc28j60_wcr16>
	enc28j60_wcr16(ETXND, ENC28J60_TXSTART + len);
     d0a:	be 01       	movw	r22, r28
     d0c:	76 5e       	subi	r23, 0xE6	; 230
     d0e:	86 e0       	ldi	r24, 0x06	; 6
     d10:	f8 de       	rcall	.-528    	; 0xb02 <enc28j60_wcr16>

	enc28j60_bfs(ECON1, ECON1_TXRTS); // Request packet send
     d12:	68 e0       	ldi	r22, 0x08	; 8
     d14:	8f e1       	ldi	r24, 0x1F	; 31
}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
	enc28j60_write_buffer(data, len);

	enc28j60_wcr16(ETXST, ENC28J60_TXSTART);
	enc28j60_wcr16(ETXND, ENC28J60_TXSTART + len);

	enc28j60_bfs(ECON1, ECON1_TXRTS); // Request packet send
     d1e:	0f cf       	rjmp	.-482    	; 0xb3e <enc28j60_bfs>

00000d20 <enc28j60_recv_packet>:
}

uint16_t enc28j60_recv_packet(uint8_t* buf, uint16_t buflen) {
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	00 d0       	rcall	.+0      	; 0xd32 <enc28j60_recv_packet+0x12>
     d32:	00 d0       	rcall	.+0      	; 0xd34 <enc28j60_recv_packet+0x14>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	6c 01       	movw	r12, r24
     d3a:	7b 01       	movw	r14, r22
	uint16_t len = 0, rxlen, status, temp;

	if (enc28j60_rcr(EPKTCNT)) {
     d3c:	89 e3       	ldi	r24, 0x39	; 57
     d3e:	bb de       	rcall	.-650    	; 0xab6 <enc28j60_rcr>
     d40:	88 23       	and	r24, r24
     d42:	99 f1       	breq	.+102    	; 0xdaa <enc28j60_recv_packet+0x8a>
		enc28j60_wcr16(ERDPT, enc28j60_rxrdpt);
     d44:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <enc28j60_rxrdpt>
     d48:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <enc28j60_rxrdpt+0x1>
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	d9 de       	rcall	.-590    	; 0xb02 <enc28j60_wcr16>

		enc28j60_read_buffer((void*)&enc28j60_rxrdpt, sizeof(enc28j60_rxrdpt));
     d50:	62 e0       	ldi	r22, 0x02	; 2
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	8b e7       	ldi	r24, 0x7B	; 123
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	fd de       	rcall	.-518    	; 0xb54 <enc28j60_read_buffer>
		enc28j60_read_buffer((void*)&rxlen, sizeof(rxlen));
     d5a:	62 e0       	ldi	r22, 0x02	; 2
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	ce 01       	movw	r24, r28
     d60:	03 96       	adiw	r24, 0x03	; 3
     d62:	f8 de       	rcall	.-528    	; 0xb54 <enc28j60_read_buffer>
		enc28j60_read_buffer((void*)&status, sizeof(status));
     d64:	62 e0       	ldi	r22, 0x02	; 2
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	ce 01       	movw	r24, r28
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	f3 de       	rcall	.-538    	; 0xb54 <enc28j60_read_buffer>

		if (status & 0x80) { //success
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	87 ff       	sbrs	r24, 7
     d72:	0c c0       	rjmp	.+24     	; 0xd8c <enc28j60_recv_packet+0x6c>
			len = rxlen - 4; //throw out crc
     d74:	0b 81       	ldd	r16, Y+3	; 0x03
     d76:	1c 81       	ldd	r17, Y+4	; 0x04
     d78:	04 50       	subi	r16, 0x04	; 4
     d7a:	11 09       	sbc	r17, r1
     d7c:	e0 16       	cp	r14, r16
     d7e:	f1 06       	cpc	r15, r17
     d80:	08 f4       	brcc	.+2      	; 0xd84 <enc28j60_recv_packet+0x64>
     d82:	87 01       	movw	r16, r14
			if (len > buflen) len = buflen;
			enc28j60_read_buffer(buf, len);
     d84:	b8 01       	movw	r22, r16
     d86:	c6 01       	movw	r24, r12
     d88:	e5 de       	rcall	.-566    	; 0xb54 <enc28j60_read_buffer>
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <enc28j60_recv_packet+0x70>

	enc28j60_bfs(ECON1, ECON1_TXRTS); // Request packet send
}

uint16_t enc28j60_recv_packet(uint8_t* buf, uint16_t buflen) {
	uint16_t len = 0, rxlen, status, temp;
     d8c:	00 e0       	ldi	r16, 0x00	; 0
     d8e:	10 e0       	ldi	r17, 0x00	; 0
			enc28j60_read_buffer(buf, len);
		}

		// Set Rx read pointer to next packet
		temp = (enc28j60_rxrdpt - 1) & ENC28J60_BUFEND;
		enc28j60_wcr16(ERXRDPT, temp);
     d90:	60 91 7b 00 	lds	r22, 0x007B	; 0x80007b <enc28j60_rxrdpt>
     d94:	70 91 7c 00 	lds	r23, 0x007C	; 0x80007c <enc28j60_rxrdpt+0x1>
     d98:	61 50       	subi	r22, 0x01	; 1
     d9a:	71 09       	sbc	r23, r1
     d9c:	7f 71       	andi	r23, 0x1F	; 31
     d9e:	8c e0       	ldi	r24, 0x0C	; 12
     da0:	b0 de       	rcall	.-672    	; 0xb02 <enc28j60_wcr16>

		// Decrement packet counter
		enc28j60_bfs(ECON2, ECON2_PKTDEC);
     da2:	60 e4       	ldi	r22, 0x40	; 64
     da4:	8e e1       	ldi	r24, 0x1E	; 30
     da6:	cb de       	rcall	.-618    	; 0xb3e <enc28j60_bfs>
     da8:	02 c0       	rjmp	.+4      	; 0xdae <enc28j60_recv_packet+0x8e>

	enc28j60_bfs(ECON1, ECON1_TXRTS); // Request packet send
}

uint16_t enc28j60_recv_packet(uint8_t* buf, uint16_t buflen) {
	uint16_t len = 0, rxlen, status, temp;
     daa:	00 e0       	ldi	r16, 0x00	; 0
     dac:	10 e0       	ldi	r17, 0x00	; 0
		// Decrement packet counter
		enc28j60_bfs(ECON2, ECON2_PKTDEC);
	}

	return len;
}
     dae:	c8 01       	movw	r24, r16
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	df 90       	pop	r13
     dc6:	cf 90       	pop	r12
     dc8:	08 95       	ret

00000dca <enc28cj60_reinit_if_failed>:

void enc28cj60_reinit_if_failed(void) {
	 if (!(enc28j60_rcr(ECON1) & ECON1_RXEN)) enc28j60_init(0);
     dca:	8f e1       	ldi	r24, 0x1F	; 31
     dcc:	74 de       	rcall	.-792    	; 0xab6 <enc28j60_rcr>
     dce:	82 fd       	sbrc	r24, 2
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <enc28cj60_reinit_if_failed+0xe>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	16 cf       	rjmp	.-468    	; 0xc04 <enc28j60_init>
     dd8:	08 95       	ret

00000dda <udp_filter>:
void udp_filter(eth_frame_t *frame, uint16_t len)
{
	ip_packet_t *ip = (void*)(frame->data);
	udp_packet_t *udp = (void*)(ip->data);

	if(len >= sizeof(udp_packet_t))
     dda:	68 30       	cpi	r22, 0x08	; 8
     ddc:	71 05       	cpc	r23, r1
     dde:	48 f0       	brcs	.+18     	; 0xdf2 <udp_filter+0x18>
		case DHCP_CLIENT_PORT:
			dhcp_filter(frame, len);
			break;
#endif
		default:
			udp_packet(frame, len);
     de0:	fc 01       	movw	r30, r24
     de2:	66 a1       	ldd	r22, Z+38	; 0x26
     de4:	77 a1       	ldd	r23, Z+39	; 0x27
     de6:	76 27       	eor	r23, r22
     de8:	67 27       	eor	r22, r23
     dea:	76 27       	eor	r23, r22
     dec:	68 50       	subi	r22, 0x08	; 8
     dee:	71 09       	sbc	r23, r1
     df0:	53 c9       	rjmp	.-3418   	; 0x98 <udp_packet>
     df2:	08 95       	ret

00000df4 <ip_cksum>:
 * IP
 */

// calculate IP checksum
uint16_t ip_cksum(uint32_t sum, uint8_t *buf, size_t len)
{
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
	while(len >= 2)
     dfc:	f9 01       	movw	r30, r18
     dfe:	ea 01       	movw	r28, r20
     e00:	e2 30       	cpi	r30, 0x02	; 2
     e02:	f1 05       	cpc	r31, r1
     e04:	58 f0       	brcs	.+22     	; 0xe1c <ip_cksum+0x28>
	{
		sum += ((uint16_t)*buf << 8) | *(buf+1);
     e06:	a9 91       	ld	r26, Y+
     e08:	b9 91       	ld	r27, Y+
     e0a:	ba 27       	eor	r27, r26
     e0c:	ab 27       	eor	r26, r27
     e0e:	ba 27       	eor	r27, r26
     e10:	6a 0f       	add	r22, r26
     e12:	7b 1f       	adc	r23, r27
     e14:	81 1d       	adc	r24, r1
     e16:	91 1d       	adc	r25, r1
		buf += 2;
		len -= 2;
     e18:	32 97       	sbiw	r30, 0x02	; 2
     e1a:	f2 cf       	rjmp	.-28     	; 0xe00 <ip_cksum+0xc>
     e1c:	f9 01       	movw	r30, r18
     e1e:	ee 7f       	andi	r30, 0xFE	; 254
     e20:	da 01       	movw	r26, r20
     e22:	ae 0f       	add	r26, r30
     e24:	bf 1f       	adc	r27, r31
	}

	if(len)
     e26:	2e 17       	cp	r18, r30
     e28:	3f 07       	cpc	r19, r31
     e2a:	41 f0       	breq	.+16     	; 0xe3c <ip_cksum+0x48>
		sum += (uint16_t)*buf << 8;
     e2c:	2c 91       	ld	r18, X
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	32 2f       	mov	r19, r18
     e32:	22 27       	eor	r18, r18
     e34:	62 0f       	add	r22, r18
     e36:	73 1f       	adc	r23, r19
     e38:	81 1d       	adc	r24, r1
     e3a:	91 1d       	adc	r25, r1

	while(sum >> 16)
     e3c:	8c 01       	movw	r16, r24
     e3e:	22 27       	eor	r18, r18
     e40:	33 27       	eor	r19, r19
     e42:	01 15       	cp	r16, r1
     e44:	11 05       	cpc	r17, r1
     e46:	21 05       	cpc	r18, r1
     e48:	31 05       	cpc	r19, r1
     e4a:	59 f0       	breq	.+22     	; 0xe62 <ip_cksum+0x6e>
		sum = (sum & 0xffff) + (sum >> 16);
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	aa 27       	eor	r26, r26
     e52:	bb 27       	eor	r27, r27
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	60 0f       	add	r22, r16
     e5a:	71 1f       	adc	r23, r17
     e5c:	82 1f       	adc	r24, r18
     e5e:	93 1f       	adc	r25, r19
     e60:	ed cf       	rjmp	.-38     	; 0xe3c <ip_cksum+0x48>

	return ~htons((uint16_t)sum);
     e62:	96 2f       	mov	r25, r22
     e64:	87 2f       	mov	r24, r23
}
     e66:	80 95       	com	r24
     e68:	90 95       	com	r25
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	08 95       	ret

00000e74 <arp_search_cache>:
 * ARP
 */

// search ARP cache
uint8_t *arp_search_cache(uint32_t node_ip_addr)
{
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	ee e7       	ldi	r30, 0x7E	; 126
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	for(i = 0; i < ARP_CACHE_SIZE; ++i)
	{
		if(arp_cache[i].ip_addr == node_ip_addr)
     e84:	c0 80       	ld	r12, Z
     e86:	d1 80       	ldd	r13, Z+1	; 0x01
     e88:	e2 80       	ldd	r14, Z+2	; 0x02
     e8a:	f3 80       	ldd	r15, Z+3	; 0x03
     e8c:	c6 16       	cp	r12, r22
     e8e:	d7 06       	cpc	r13, r23
     e90:	e8 06       	cpc	r14, r24
     e92:	f9 06       	cpc	r15, r25
     e94:	49 f4       	brne	.+18     	; 0xea8 <arp_search_cache+0x34>
			return arp_cache[i].mac_addr;
     e96:	4a e0       	ldi	r20, 0x0A	; 10
     e98:	42 9f       	mul	r20, r18
     e9a:	c0 01       	movw	r24, r0
     e9c:	43 9f       	mul	r20, r19
     e9e:	90 0d       	add	r25, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	8e 57       	subi	r24, 0x7E	; 126
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	08 c0       	rjmp	.+16     	; 0xeb8 <arp_search_cache+0x44>
     ea8:	2f 5f       	subi	r18, 0xFF	; 255
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	3a 96       	adiw	r30, 0x0a	; 10

// search ARP cache
uint8_t *arp_search_cache(uint32_t node_ip_addr)
{
	uint8_t i;
	for(i = 0; i < ARP_CACHE_SIZE; ++i)
     eae:	23 30       	cpi	r18, 0x03	; 3
     eb0:	31 05       	cpc	r19, r1
     eb2:	41 f7       	brne	.-48     	; 0xe84 <arp_search_cache+0x10>
	{
		if(arp_cache[i].ip_addr == node_ip_addr)
			return arp_cache[i].mac_addr;
	}
	return 0;
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
}
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	08 95       	ret

00000ec2 <eth_resend>:

// send new Ethernet frame to same host
//	(can be called directly after eth_send)
void eth_resend(eth_frame_t *frame, uint16_t len)
{
	enc28j60_send_packet((void*)frame, len +
     ec2:	62 5f       	subi	r22, 0xF2	; 242
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	fc ce       	rjmp	.-520    	; 0xcc0 <enc28j60_send_packet>

00000ec8 <ip_resend>:
}

// can be called directly after
//	ip_send/ip_reply with new data
void ip_resend(eth_frame_t *frame, uint16_t len)
{
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	ec 01       	movw	r28, r24
	ip_packet_t *ip = (void*)(frame->data);

	len += sizeof(ip_packet_t);
     ed2:	8b 01       	movw	r16, r22
     ed4:	0c 5e       	subi	r16, 0xEC	; 236
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
	ip->total_len = htons(len);
     ed8:	90 2f       	mov	r25, r16
     eda:	81 2f       	mov	r24, r17
     edc:	99 8b       	std	Y+17, r25	; 0x11
     ede:	88 8b       	std	Y+16, r24	; 0x10
	ip->cksum = 0;
     ee0:	19 8e       	std	Y+25, r1	; 0x19
     ee2:	18 8e       	std	Y+24, r1	; 0x18

// can be called directly after
//	ip_send/ip_reply with new data
void ip_resend(eth_frame_t *frame, uint16_t len)
{
	ip_packet_t *ip = (void*)(frame->data);
     ee4:	ae 01       	movw	r20, r28
     ee6:	42 5f       	subi	r20, 0xF2	; 242
     ee8:	5f 4f       	sbci	r21, 0xFF	; 255

	len += sizeof(ip_packet_t);
	ip->total_len = htons(len);
	ip->cksum = 0;
	ip->cksum = ip_cksum(0, (void*)ip, sizeof(ip_packet_t));
     eea:	24 e1       	ldi	r18, 0x14	; 20
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	cb 01       	movw	r24, r22
     ef4:	7f df       	rcall	.-258    	; 0xdf4 <ip_cksum>
     ef6:	99 8f       	std	Y+25, r25	; 0x19
     ef8:	88 8f       	std	Y+24, r24	; 0x18

	eth_resend(frame, len);
     efa:	b8 01       	movw	r22, r16
     efc:	ce 01       	movw	r24, r28
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
	len += sizeof(ip_packet_t);
	ip->total_len = htons(len);
	ip->cksum = 0;
	ip->cksum = ip_cksum(0, (void*)ip, sizeof(ip_packet_t));

	eth_resend(frame, len);
     f06:	dd cf       	rjmp	.-70     	; 0xec2 <eth_resend>

00000f08 <eth_send>:
// fields must be set:
//	- frame.dst
//	- frame.type
void eth_send(eth_frame_t *frame, uint16_t len)
{
	memcpy(frame->from_addr, mac_addr, 6);
     f08:	26 e0       	ldi	r18, 0x06	; 6
     f0a:	e2 e6       	ldi	r30, 0x62	; 98
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	dc 01       	movw	r26, r24
     f10:	16 96       	adiw	r26, 0x06	; 6
     f12:	01 90       	ld	r0, Z+
     f14:	0d 92       	st	X+, r0
     f16:	2a 95       	dec	r18
     f18:	e1 f7       	brne	.-8      	; 0xf12 <eth_send+0xa>
	enc28j60_send_packet((void*)frame, len +
     f1a:	62 5f       	subi	r22, 0xF2	; 242
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	d0 ce       	rjmp	.-608    	; 0xcc0 <enc28j60_send_packet>

00000f20 <arp_resolve>:

// resolve MAC address
// returns 0 if still resolving
// (invalidates net_buffer if not resolved)
uint8_t *arp_resolve(uint32_t node_ip_addr)
{
     f20:	cf 92       	push	r12
     f22:	df 92       	push	r13
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	6b 01       	movw	r12, r22
     f2e:	7c 01       	movw	r14, r24
	eth_frame_t *frame = (void*)net_buf;
	arp_message_t *msg = (void*)(frame->data);
	uint8_t *mac;

	// search arp cache
	if((mac = arp_search_cache(node_ip_addr)))
     f30:	a1 df       	rcall	.-190    	; 0xe74 <arp_search_cache>
     f32:	ec 01       	movw	r28, r24
     f34:	89 2b       	or	r24, r25
     f36:	09 f0       	breq	.+2      	; 0xf3a <arp_resolve+0x1a>
     f38:	4f c0       	rjmp	.+158    	; 0xfd8 <arp_resolve+0xb8>
		return mac;

	// send request
	memset(frame->to_addr, 0xff, 6);
     f3a:	46 e0       	ldi	r20, 0x06	; 6
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	6f ef       	ldi	r22, 0xFF	; 255
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	8c ea       	ldi	r24, 0xAC	; 172
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	70 d3       	rcall	.+1760   	; 0x1628 <memset>
	frame->type = ETH_TYPE_ARP;
     f48:	88 e0       	ldi	r24, 0x08	; 8
     f4a:	96 e0       	ldi	r25, 0x06	; 6
     f4c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <net_buf+0xd>
     f50:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <net_buf+0xc>

	msg->hw_type = ARP_HW_TYPE_ETH;
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	31 e0       	ldi	r19, 0x01	; 1
     f58:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <net_buf+0xf>
     f5c:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <net_buf+0xe>
	msg->proto_type = ARP_PROTO_TYPE_IP;
     f60:	88 e0       	ldi	r24, 0x08	; 8
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <net_buf+0x11>
     f68:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <net_buf+0x10>
	msg->hw_addr_len = 6;
     f6c:	86 e0       	ldi	r24, 0x06	; 6
     f6e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <net_buf+0x12>
	msg->proto_addr_len = 4;
     f72:	94 e0       	ldi	r25, 0x04	; 4
     f74:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <net_buf+0x13>
	msg->type = ARP_TYPE_REQUEST;
     f78:	30 93 c1 01 	sts	0x01C1, r19	; 0x8001c1 <net_buf+0x15>
     f7c:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <net_buf+0x14>
	memcpy(msg->mac_addr_from, mac_addr, 6);
     f80:	e2 e6       	ldi	r30, 0x62	; 98
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	a2 ec       	ldi	r26, 0xC2	; 194
     f86:	b1 e0       	ldi	r27, 0x01	; 1
     f88:	98 2f       	mov	r25, r24
     f8a:	01 90       	ld	r0, Z+
     f8c:	0d 92       	st	X+, r0
     f8e:	9a 95       	dec	r25
     f90:	e1 f7       	brne	.-8      	; 0xf8a <arp_resolve+0x6a>
	msg->ip_addr_from = ip_addr;
     f92:	40 91 a5 00 	lds	r20, 0x00A5	; 0x8000a5 <ip_addr>
     f96:	50 91 a6 00 	lds	r21, 0x00A6	; 0x8000a6 <ip_addr+0x1>
     f9a:	60 91 a7 00 	lds	r22, 0x00A7	; 0x8000a7 <ip_addr+0x2>
     f9e:	70 91 a8 00 	lds	r23, 0x00A8	; 0x8000a8 <ip_addr+0x3>
     fa2:	40 93 c8 01 	sts	0x01C8, r20	; 0x8001c8 <net_buf+0x1c>
     fa6:	50 93 c9 01 	sts	0x01C9, r21	; 0x8001c9 <net_buf+0x1d>
     faa:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <net_buf+0x1e>
     fae:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <net_buf+0x1f>
	memset(msg->mac_addr_to, 0x00, 6);
     fb2:	ec ec       	ldi	r30, 0xCC	; 204
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	df 01       	movw	r26, r30
     fb8:	1d 92       	st	X+, r1
     fba:	8a 95       	dec	r24
     fbc:	e9 f7       	brne	.-6      	; 0xfb8 <arp_resolve+0x98>
	msg->ip_addr_to = node_ip_addr;
     fbe:	c0 92 d2 01 	sts	0x01D2, r12	; 0x8001d2 <net_buf+0x26>
     fc2:	d0 92 d3 01 	sts	0x01D3, r13	; 0x8001d3 <net_buf+0x27>
     fc6:	e0 92 d4 01 	sts	0x01D4, r14	; 0x8001d4 <net_buf+0x28>
     fca:	f0 92 d5 01 	sts	0x01D5, r15	; 0x8001d5 <net_buf+0x29>

	eth_send(frame, sizeof(arp_message_t));
     fce:	6c e1       	ldi	r22, 0x1C	; 28
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	8c ea       	ldi	r24, 0xAC	; 172
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	98 df       	rcall	.-208    	; 0xf08 <eth_send>
	return 0;
}
     fd8:	ce 01       	movw	r24, r28
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	08 95       	ret

00000fe8 <ip_send>:
// fields must be set:
//	- ip.dst
//	- ip.proto
// len is IP packet payload length
uint8_t ip_send(eth_frame_t *frame, uint16_t len)
{
     fe8:	4f 92       	push	r4
     fea:	5f 92       	push	r5
     fec:	6f 92       	push	r6
     fee:	7f 92       	push	r7
     ff0:	8f 92       	push	r8
     ff2:	9f 92       	push	r9
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
    1006:	8b 01       	movw	r16, r22
	ip_packet_t *ip = (void*)(frame->data);
    1008:	7c 01       	movw	r14, r24
    100a:	8e e0       	ldi	r24, 0x0E	; 14
    100c:	e8 0e       	add	r14, r24
    100e:	f1 1c       	adc	r15, r1
	uint32_t route_ip;
	uint8_t *mac_addr_to;

	// set frame.dst
	if(ip->to_addr == ip_broadcast)
    1010:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1012:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1014:	88 a1       	ldd	r24, Y+32	; 0x20
    1016:	99 a1       	ldd	r25, Y+33	; 0x21
    1018:	80 90 a1 00 	lds	r8, 0x00A1	; 0x8000a1 <ip_mask>
    101c:	90 90 a2 00 	lds	r9, 0x00A2	; 0x8000a2 <ip_mask+0x1>
    1020:	a0 90 a3 00 	lds	r10, 0x00A3	; 0x8000a3 <ip_mask+0x2>
    1024:	b0 90 a4 00 	lds	r11, 0x00A4	; 0x8000a4 <ip_mask+0x3>
    1028:	40 90 a5 00 	lds	r4, 0x00A5	; 0x8000a5 <ip_addr>
    102c:	50 90 a6 00 	lds	r5, 0x00A6	; 0x8000a6 <ip_addr+0x1>
    1030:	60 90 a7 00 	lds	r6, 0x00A7	; 0x8000a7 <ip_addr+0x2>
    1034:	70 90 a8 00 	lds	r7, 0x00A8	; 0x8000a8 <ip_addr+0x3>
    1038:	a5 01       	movw	r20, r10
    103a:	94 01       	movw	r18, r8
    103c:	20 95       	com	r18
    103e:	30 95       	com	r19
    1040:	40 95       	com	r20
    1042:	50 95       	com	r21
    1044:	24 29       	or	r18, r4
    1046:	35 29       	or	r19, r5
    1048:	46 29       	or	r20, r6
    104a:	57 29       	or	r21, r7
    104c:	62 17       	cp	r22, r18
    104e:	73 07       	cpc	r23, r19
    1050:	84 07       	cpc	r24, r20
    1052:	95 07       	cpc	r25, r21
    1054:	39 f4       	brne	.+14     	; 0x1064 <ip_send+0x7c>
	{
		// use broadcast MAC
		memset(frame->to_addr, 0xff, 6);
    1056:	46 e0       	ldi	r20, 0x06	; 6
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	6f ef       	ldi	r22, 0xFF	; 255
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	ce 01       	movw	r24, r28
    1060:	e3 d2       	rcall	.+1478   	; 0x1628 <memset>
    1062:	1e c0       	rjmp	.+60     	; 0x10a0 <ip_send+0xb8>
	}
	else
	{
		// apply route
		if( ((ip->to_addr ^ ip_addr) & ip_mask) == 0 )
    1064:	46 26       	eor	r4, r22
    1066:	57 26       	eor	r5, r23
    1068:	68 26       	eor	r6, r24
    106a:	79 26       	eor	r7, r25
    106c:	84 20       	and	r8, r4
    106e:	95 20       	and	r9, r5
    1070:	a6 20       	and	r10, r6
    1072:	b7 20       	and	r11, r7
    1074:	89 28       	or	r8, r9
    1076:	8a 28       	or	r8, r10
    1078:	8b 28       	or	r8, r11
    107a:	41 f0       	breq	.+16     	; 0x108c <ip_send+0xa4>
			route_ip = ip->to_addr;
		else
			route_ip = ip_gateway;
    107c:	60 91 9d 00 	lds	r22, 0x009D	; 0x80009d <ip_gateway>
    1080:	70 91 9e 00 	lds	r23, 0x009E	; 0x80009e <ip_gateway+0x1>
    1084:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <ip_gateway+0x2>
    1088:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <ip_gateway+0x3>

		// resolve mac address
		if(!(mac_addr_to = arp_resolve(route_ip)))
    108c:	49 df       	rcall	.-366    	; 0xf20 <arp_resolve>
    108e:	fc 01       	movw	r30, r24
    1090:	89 2b       	or	r24, r25
    1092:	a9 f1       	breq	.+106    	; 0x10fe <ip_send+0x116>
			return 0;
		memcpy(frame->to_addr, mac_addr_to, 6);
    1094:	96 e0       	ldi	r25, 0x06	; 6
    1096:	de 01       	movw	r26, r28
    1098:	01 90       	ld	r0, Z+
    109a:	0d 92       	st	X+, r0
    109c:	9a 95       	dec	r25
    109e:	e1 f7       	brne	.-8      	; 0x1098 <ip_send+0xb0>
	}

	// set frame.type
	frame->type = ETH_TYPE_IP;
    10a0:	88 e0       	ldi	r24, 0x08	; 8
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9d 87       	std	Y+13, r25	; 0x0d
    10a6:	8c 87       	std	Y+12, r24	; 0x0c

	// fill IP header
	len += sizeof(ip_packet_t);
    10a8:	0c 5e       	subi	r16, 0xEC	; 236
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255

	ip->ver_head_len = 0x45;
    10ac:	85 e4       	ldi	r24, 0x45	; 69
    10ae:	8e 87       	std	Y+14, r24	; 0x0e
	ip->tos = 0;
    10b0:	1f 86       	std	Y+15, r1	; 0x0f
	ip->total_len = htons(len);
    10b2:	90 2f       	mov	r25, r16
    10b4:	81 2f       	mov	r24, r17
    10b6:	99 8b       	std	Y+17, r25	; 0x11
    10b8:	88 8b       	std	Y+16, r24	; 0x10
	ip->fragment_id = 0;
    10ba:	1b 8a       	std	Y+19, r1	; 0x13
    10bc:	1a 8a       	std	Y+18, r1	; 0x12
	ip->flags_framgent_offset = 0;
    10be:	1d 8a       	std	Y+21, r1	; 0x15
    10c0:	1c 8a       	std	Y+20, r1	; 0x14
	ip->ttl = IP_PACKET_TTL;
    10c2:	80 e4       	ldi	r24, 0x40	; 64
    10c4:	8e 8b       	std	Y+22, r24	; 0x16
	ip->cksum = 0;
    10c6:	19 8e       	std	Y+25, r1	; 0x19
    10c8:	18 8e       	std	Y+24, r1	; 0x18
	ip->from_addr = ip_addr;
    10ca:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <ip_addr>
    10ce:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <ip_addr+0x1>
    10d2:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <ip_addr+0x2>
    10d6:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <ip_addr+0x3>
    10da:	8a 8f       	std	Y+26, r24	; 0x1a
    10dc:	9b 8f       	std	Y+27, r25	; 0x1b
    10de:	ac 8f       	std	Y+28, r26	; 0x1c
    10e0:	bd 8f       	std	Y+29, r27	; 0x1d
	ip->cksum = ip_cksum(0, (void*)ip, sizeof(ip_packet_t));
    10e2:	24 e1       	ldi	r18, 0x14	; 20
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	a7 01       	movw	r20, r14
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	cb 01       	movw	r24, r22
    10ee:	82 de       	rcall	.-764    	; 0xdf4 <ip_cksum>
    10f0:	99 8f       	std	Y+25, r25	; 0x19
    10f2:	88 8f       	std	Y+24, r24	; 0x18

	// send frame
	eth_send(frame, len);
    10f4:	b8 01       	movw	r22, r16
    10f6:	ce 01       	movw	r24, r28
    10f8:	07 df       	rcall	.-498    	; 0xf08 <eth_send>
	return 1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <ip_send+0x118>
		else
			route_ip = ip_gateway;

		// resolve mac address
		if(!(mac_addr_to = arp_resolve(route_ip)))
			return 0;
    10fe:	80 e0       	ldi	r24, 0x00	; 0
	ip->cksum = ip_cksum(0, (void*)ip, sizeof(ip_packet_t));

	// send frame
	eth_send(frame, len);
	return 1;
}
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	bf 90       	pop	r11
    110e:	af 90       	pop	r10
    1110:	9f 90       	pop	r9
    1112:	8f 90       	pop	r8
    1114:	7f 90       	pop	r7
    1116:	6f 90       	pop	r6
    1118:	5f 90       	pop	r5
    111a:	4f 90       	pop	r4
    111c:	08 95       	ret

0000111e <udp_send>:
//	- ip.dst
//	- udp.src_port
//	- udp.dst_port
// uint16_t len is UDP data payload length
uint8_t udp_send(eth_frame_t *frame, uint16_t len)
{
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	ec 01       	movw	r28, r24
	ip_packet_t *ip = (void*)(frame->data);
	udp_packet_t *udp = (void*)(ip->data);

	len += sizeof(udp_packet_t);
    1128:	8b 01       	movw	r16, r22
    112a:	08 5f       	subi	r16, 0xF8	; 248
    112c:	1f 4f       	sbci	r17, 0xFF	; 255

	ip->protocol = IP_PROTOCOL_UDP;
    112e:	81 e1       	ldi	r24, 0x11	; 17
    1130:	8f 8b       	std	Y+23, r24	; 0x17
	ip->from_addr = ip_addr;
    1132:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <ip_addr>
    1136:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <ip_addr+0x1>
    113a:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <ip_addr+0x2>
    113e:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <ip_addr+0x3>
    1142:	8a 8f       	std	Y+26, r24	; 0x1a
    1144:	9b 8f       	std	Y+27, r25	; 0x1b
    1146:	ac 8f       	std	Y+28, r26	; 0x1c
    1148:	bd 8f       	std	Y+29, r27	; 0x1d

	udp->len = htons(len);
    114a:	90 2f       	mov	r25, r16
    114c:	81 2f       	mov	r24, r17
    114e:	9f a3       	std	Y+39, r25	; 0x27
    1150:	8e a3       	std	Y+38, r24	; 0x26
	udp->cksum = 0;
    1152:	19 a6       	std	Y+41, r1	; 0x29
    1154:	18 a6       	std	Y+40, r1	; 0x28
	udp->cksum = ip_cksum(len + IP_PROTOCOL_UDP,
    1156:	9b 01       	movw	r18, r22
    1158:	20 5f       	subi	r18, 0xF0	; 240
    115a:	3f 4f       	sbci	r19, 0xFF	; 255
    115c:	ae 01       	movw	r20, r28
    115e:	46 5e       	subi	r20, 0xE6	; 230
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	67 5e       	subi	r22, 0xE7	; 231
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	44 de       	rcall	.-888    	; 0xdf4 <ip_cksum>
    116c:	99 a7       	std	Y+41, r25	; 0x29
    116e:	88 a7       	std	Y+40, r24	; 0x28
		(uint8_t*)udp-8, len+8);

	return ip_send(frame, len);
    1170:	b8 01       	movw	r22, r16
    1172:	ce 01       	movw	r24, r28
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
	udp->len = htons(len);
	udp->cksum = 0;
	udp->cksum = ip_cksum(len + IP_PROTOCOL_UDP,
		(uint8_t*)udp-8, len+8);

	return ip_send(frame, len);
    117c:	35 cf       	rjmp	.-406    	; 0xfe8 <ip_send>

0000117e <eth_reply>:
}

// send Ethernet frame back
void eth_reply(eth_frame_t *frame, uint16_t len)
{
	memcpy(frame->to_addr, frame->from_addr, 6);
    117e:	ac 01       	movw	r20, r24
    1180:	4a 5f       	subi	r20, 0xFA	; 250
    1182:	5f 4f       	sbci	r21, 0xFF	; 255
    1184:	26 e0       	ldi	r18, 0x06	; 6
    1186:	fa 01       	movw	r30, r20
    1188:	dc 01       	movw	r26, r24
    118a:	01 90       	ld	r0, Z+
    118c:	0d 92       	st	X+, r0
    118e:	2a 95       	dec	r18
    1190:	e1 f7       	brne	.-8      	; 0x118a <eth_reply+0xc>
	memcpy(frame->from_addr, mac_addr, 6);
    1192:	26 e0       	ldi	r18, 0x06	; 6
    1194:	e2 e6       	ldi	r30, 0x62	; 98
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	da 01       	movw	r26, r20
    119a:	01 90       	ld	r0, Z+
    119c:	0d 92       	st	X+, r0
    119e:	2a 95       	dec	r18
    11a0:	e1 f7       	brne	.-8      	; 0x119a <eth_reply+0x1c>
	enc28j60_send_packet((void*)frame, len +
    11a2:	62 5f       	subi	r22, 0xF2	; 242
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	8c cd       	rjmp	.-1256   	; 0xcc0 <enc28j60_send_packet>

000011a8 <ip_reply>:
}

// send IP packet back
// len is IP packet payload length
void ip_reply(eth_frame_t *frame, uint16_t len)
{
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	ec 01       	movw	r28, r24
	ip_packet_t *packet = (void*)(frame->data);

	len += sizeof(ip_packet_t);
    11b2:	8b 01       	movw	r16, r22
    11b4:	0c 5e       	subi	r16, 0xEC	; 236
    11b6:	1f 4f       	sbci	r17, 0xFF	; 255

	packet->total_len = htons(len);
    11b8:	90 2f       	mov	r25, r16
    11ba:	81 2f       	mov	r24, r17
    11bc:	99 8b       	std	Y+17, r25	; 0x11
    11be:	88 8b       	std	Y+16, r24	; 0x10
	packet->fragment_id = 0;
    11c0:	1b 8a       	std	Y+19, r1	; 0x13
    11c2:	1a 8a       	std	Y+18, r1	; 0x12
	packet->flags_framgent_offset = 0;
    11c4:	1d 8a       	std	Y+21, r1	; 0x15
    11c6:	1c 8a       	std	Y+20, r1	; 0x14
	packet->ttl = IP_PACKET_TTL;
    11c8:	80 e4       	ldi	r24, 0x40	; 64
    11ca:	8e 8b       	std	Y+22, r24	; 0x16
	packet->cksum = 0;
    11cc:	19 8e       	std	Y+25, r1	; 0x19
    11ce:	18 8e       	std	Y+24, r1	; 0x18
	packet->to_addr = packet->from_addr;
    11d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11d4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    11d6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    11d8:	8e 8f       	std	Y+30, r24	; 0x1e
    11da:	9f 8f       	std	Y+31, r25	; 0x1f
    11dc:	a8 a3       	std	Y+32, r26	; 0x20
    11de:	b9 a3       	std	Y+33, r27	; 0x21
	packet->from_addr = ip_addr;
    11e0:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <ip_addr>
    11e4:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <ip_addr+0x1>
    11e8:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <ip_addr+0x2>
    11ec:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <ip_addr+0x3>
    11f0:	8a 8f       	std	Y+26, r24	; 0x1a
    11f2:	9b 8f       	std	Y+27, r25	; 0x1b
    11f4:	ac 8f       	std	Y+28, r26	; 0x1c
    11f6:	bd 8f       	std	Y+29, r27	; 0x1d

// send IP packet back
// len is IP packet payload length
void ip_reply(eth_frame_t *frame, uint16_t len)
{
	ip_packet_t *packet = (void*)(frame->data);
    11f8:	ae 01       	movw	r20, r28
    11fa:	42 5f       	subi	r20, 0xF2	; 242
    11fc:	5f 4f       	sbci	r21, 0xFF	; 255
	packet->flags_framgent_offset = 0;
	packet->ttl = IP_PACKET_TTL;
	packet->cksum = 0;
	packet->to_addr = packet->from_addr;
	packet->from_addr = ip_addr;
	packet->cksum = ip_cksum(0, (void*)packet, sizeof(ip_packet_t));
    11fe:	24 e1       	ldi	r18, 0x14	; 20
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	cb 01       	movw	r24, r22
    1208:	f5 dd       	rcall	.-1046   	; 0xdf4 <ip_cksum>
    120a:	99 8f       	std	Y+25, r25	; 0x19
    120c:	88 8f       	std	Y+24, r24	; 0x18

	eth_reply((void*)frame, len);
    120e:	b8 01       	movw	r22, r16
    1210:	ce 01       	movw	r24, r28
}
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
	packet->cksum = 0;
	packet->to_addr = packet->from_addr;
	packet->from_addr = ip_addr;
	packet->cksum = ip_cksum(0, (void*)packet, sizeof(ip_packet_t));

	eth_reply((void*)frame, len);
    121a:	b1 cf       	rjmp	.-158    	; 0x117e <eth_reply>

0000121c <udp_reply>:
}

// reply to UDP packet
// len is UDP data payload length
void udp_reply(eth_frame_t *frame, uint16_t len)
{
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	ec 01       	movw	r28, r24
	ip_packet_t *ip = (void*)(frame->data);
	udp_packet_t *udp = (void*)(ip->data);
	uint16_t temp;

	len += sizeof(udp_packet_t);
    1226:	8b 01       	movw	r16, r22
    1228:	08 5f       	subi	r16, 0xF8	; 248
    122a:	1f 4f       	sbci	r17, 0xFF	; 255

	ip->to_addr = ip_addr;
    122c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <ip_addr>
    1230:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <ip_addr+0x1>
    1234:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <ip_addr+0x2>
    1238:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <ip_addr+0x3>
    123c:	8e 8f       	std	Y+30, r24	; 0x1e
    123e:	9f 8f       	std	Y+31, r25	; 0x1f
    1240:	a8 a3       	std	Y+32, r26	; 0x20
    1242:	b9 a3       	std	Y+33, r27	; 0x21

	temp = udp->from_port;
    1244:	8a a1       	ldd	r24, Y+34	; 0x22
    1246:	9b a1       	ldd	r25, Y+35	; 0x23
	udp->from_port = udp->to_port;
    1248:	2c a1       	ldd	r18, Y+36	; 0x24
    124a:	3d a1       	ldd	r19, Y+37	; 0x25
    124c:	3b a3       	std	Y+35, r19	; 0x23
    124e:	2a a3       	std	Y+34, r18	; 0x22
	udp->to_port = temp;
    1250:	9d a3       	std	Y+37, r25	; 0x25
    1252:	8c a3       	std	Y+36, r24	; 0x24

	udp->len = htons(len);
    1254:	90 2f       	mov	r25, r16
    1256:	81 2f       	mov	r24, r17
    1258:	9f a3       	std	Y+39, r25	; 0x27
    125a:	8e a3       	std	Y+38, r24	; 0x26

	udp->cksum = 0;
    125c:	19 a6       	std	Y+41, r1	; 0x29
    125e:	18 a6       	std	Y+40, r1	; 0x28
	udp->cksum = ip_cksum(len + IP_PROTOCOL_UDP,
    1260:	9b 01       	movw	r18, r22
    1262:	20 5f       	subi	r18, 0xF0	; 240
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	ae 01       	movw	r20, r28
    1268:	46 5e       	subi	r20, 0xE6	; 230
    126a:	5f 4f       	sbci	r21, 0xFF	; 255
    126c:	67 5e       	subi	r22, 0xE7	; 231
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	bf dd       	rcall	.-1154   	; 0xdf4 <ip_cksum>
    1276:	99 a7       	std	Y+41, r25	; 0x29
    1278:	88 a7       	std	Y+40, r24	; 0x28
		(uint8_t*)udp-8, len+8);

	ip_reply(frame, len);
    127a:	b8 01       	movw	r22, r16
    127c:	ce 01       	movw	r24, r28
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16

	udp->cksum = 0;
	udp->cksum = ip_cksum(len + IP_PROTOCOL_UDP,
		(uint8_t*)udp-8, len+8);

	ip_reply(frame, len);
    1286:	90 cf       	rjmp	.-224    	; 0x11a8 <ip_reply>

00001288 <icmp_filter>:
void icmp_filter(eth_frame_t *frame, uint16_t len)
{
	ip_packet_t *packet = (void*)frame->data;
	icmp_echo_packet_t *icmp = (void*)packet->data;

	if(len >= sizeof(icmp_echo_packet_t) )
    1288:	68 30       	cpi	r22, 0x08	; 8
    128a:	71 05       	cpc	r23, r1
    128c:	60 f0       	brcs	.+24     	; 0x12a6 <icmp_filter+0x1e>
	{
		if(icmp->type == ICMP_TYPE_ECHO_RQ)
    128e:	fc 01       	movw	r30, r24
    1290:	22 a1       	ldd	r18, Z+34	; 0x22
    1292:	28 30       	cpi	r18, 0x08	; 8
    1294:	41 f4       	brne	.+16     	; 0x12a6 <icmp_filter+0x1e>
		{
			icmp->type = ICMP_TYPE_ECHO_RPLY;
    1296:	12 a2       	std	Z+34, r1	; 0x22
			icmp->cksum += 8; // update cksum
    1298:	24 a1       	ldd	r18, Z+36	; 0x24
    129a:	35 a1       	ldd	r19, Z+37	; 0x25
    129c:	28 5f       	subi	r18, 0xF8	; 248
    129e:	3f 4f       	sbci	r19, 0xFF	; 255
    12a0:	35 a3       	std	Z+37, r19	; 0x25
    12a2:	24 a3       	std	Z+36, r18	; 0x24
			ip_reply(frame, len);
    12a4:	81 cf       	rjmp	.-254    	; 0x11a8 <ip_reply>
    12a6:	08 95       	ret

000012a8 <ip_filter>:
	eth_resend(frame, len);
}

// process IP packet
void ip_filter(eth_frame_t *frame, uint16_t len)
{
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	ec 01       	movw	r28, r24
	uint16_t hcs;
	ip_packet_t *packet = (void*)(frame->data);

	//if(len >= sizeof(ip_packet_t))
	//{
		hcs = packet->cksum;
    12b2:	08 8d       	ldd	r16, Y+24	; 0x18
    12b4:	19 8d       	ldd	r17, Y+25	; 0x19
		packet->cksum = 0;
    12b6:	19 8e       	std	Y+25, r1	; 0x19
    12b8:	18 8e       	std	Y+24, r1	; 0x18

		if( (packet->ver_head_len == 0x45) &&
    12ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    12bc:	85 34       	cpi	r24, 0x45	; 69
    12be:	09 f0       	breq	.+2      	; 0x12c2 <ip_filter+0x1a>
    12c0:	4a c0       	rjmp	.+148    	; 0x1356 <ip_filter+0xae>

// process IP packet
void ip_filter(eth_frame_t *frame, uint16_t len)
{
	uint16_t hcs;
	ip_packet_t *packet = (void*)(frame->data);
    12c2:	ae 01       	movw	r20, r28
    12c4:	42 5f       	subi	r20, 0xF2	; 242
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
	//{
		hcs = packet->cksum;
		packet->cksum = 0;

		if( (packet->ver_head_len == 0x45) &&
			(ip_cksum(0, (void*)packet, sizeof(ip_packet_t)) == hcs) &&
    12c8:	24 e1       	ldi	r18, 0x14	; 20
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	cb 01       	movw	r24, r22
    12d2:	90 dd       	rcall	.-1248   	; 0xdf4 <ip_cksum>
	//if(len >= sizeof(ip_packet_t))
	//{
		hcs = packet->cksum;
		packet->cksum = 0;

		if( (packet->ver_head_len == 0x45) &&
    12d4:	08 17       	cp	r16, r24
    12d6:	19 07       	cpc	r17, r25
    12d8:	f1 f5       	brne	.+124    	; 0x1356 <ip_filter+0xae>
			(ip_cksum(0, (void*)packet, sizeof(ip_packet_t)) == hcs) &&
			((packet->to_addr == ip_addr) || (packet->to_addr == ip_broadcast)) )
    12da:	0e 8d       	ldd	r16, Y+30	; 0x1e
    12dc:	1f 8d       	ldd	r17, Y+31	; 0x1f
    12de:	28 a1       	ldd	r18, Y+32	; 0x20
    12e0:	39 a1       	ldd	r19, Y+33	; 0x21
    12e2:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <ip_addr>
    12e6:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <ip_addr+0x1>
    12ea:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <ip_addr+0x2>
    12ee:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <ip_addr+0x3>
	//{
		hcs = packet->cksum;
		packet->cksum = 0;

		if( (packet->ver_head_len == 0x45) &&
			(ip_cksum(0, (void*)packet, sizeof(ip_packet_t)) == hcs) &&
    12f2:	08 17       	cp	r16, r24
    12f4:	19 07       	cpc	r17, r25
    12f6:	2a 07       	cpc	r18, r26
    12f8:	3b 07       	cpc	r19, r27
    12fa:	a9 f0       	breq	.+42     	; 0x1326 <ip_filter+0x7e>
			((packet->to_addr == ip_addr) || (packet->to_addr == ip_broadcast)) )
    12fc:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <ip_mask>
    1300:	50 91 a2 00 	lds	r21, 0x00A2	; 0x8000a2 <ip_mask+0x1>
    1304:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <ip_mask+0x2>
    1308:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <ip_mask+0x3>
    130c:	40 95       	com	r20
    130e:	50 95       	com	r21
    1310:	60 95       	com	r22
    1312:	70 95       	com	r23
    1314:	84 2b       	or	r24, r20
    1316:	95 2b       	or	r25, r21
    1318:	a6 2b       	or	r26, r22
    131a:	b7 2b       	or	r27, r23
    131c:	08 17       	cp	r16, r24
    131e:	19 07       	cpc	r17, r25
    1320:	2a 07       	cpc	r18, r26
    1322:	3b 07       	cpc	r19, r27
    1324:	c1 f4       	brne	.+48     	; 0x1356 <ip_filter+0xae>
		{
			len = ntohs(packet->total_len) -
    1326:	68 89       	ldd	r22, Y+16	; 0x10
    1328:	79 89       	ldd	r23, Y+17	; 0x11
    132a:	76 27       	eor	r23, r22
    132c:	67 27       	eor	r22, r23
    132e:	76 27       	eor	r23, r22
    1330:	64 51       	subi	r22, 0x14	; 20
    1332:	71 09       	sbc	r23, r1
				sizeof(ip_packet_t);

			switch(packet->protocol)
    1334:	8f 89       	ldd	r24, Y+23	; 0x17
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	41 f0       	breq	.+16     	; 0x134a <ip_filter+0xa2>
    133a:	81 31       	cpi	r24, 0x11	; 17
    133c:	61 f4       	brne	.+24     	; 0x1356 <ip_filter+0xae>
				break;
#endif

#ifdef WITH_UDP
			case IP_PROTOCOL_UDP:
				udp_filter(frame, len);
    133e:	ce 01       	movw	r24, r28
#endif
			}

		}
	//}
}
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
				break;
#endif

#ifdef WITH_UDP
			case IP_PROTOCOL_UDP:
				udp_filter(frame, len);
    1348:	48 cd       	rjmp	.-1392   	; 0xdda <udp_filter>

			switch(packet->protocol)
			{
#ifdef WITH_ICMP
			case IP_PROTOCOL_ICMP:
				icmp_filter(frame, len);
    134a:	ce 01       	movw	r24, r28
#endif
			}

		}
	//}
}
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16

			switch(packet->protocol)
			{
#ifdef WITH_ICMP
			case IP_PROTOCOL_ICMP:
				icmp_filter(frame, len);
    1354:	99 cf       	rjmp	.-206    	; 0x1288 <icmp_filter>
#endif
			}

		}
	//}
}
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <arp_filter>:
	return 0;
}

// process arp packet
void arp_filter(eth_frame_t *frame, uint16_t len)
{
    1360:	cf 92       	push	r12
    1362:	df 92       	push	r13
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	ec 01       	movw	r28, r24
	arp_message_t *msg = (void*)(frame->data);

	if(len >= sizeof(arp_message_t))
    136e:	6c 31       	cpi	r22, 0x1C	; 28
    1370:	71 05       	cpc	r23, r1
    1372:	08 f4       	brcc	.+2      	; 0x1376 <arp_filter+0x16>
    1374:	7b c0       	rjmp	.+246    	; 0x146c <arp_filter+0x10c>
	{
		if( (msg->hw_type == ARP_HW_TYPE_ETH) &&
    1376:	8e 85       	ldd	r24, Y+14	; 0x0e
    1378:	9f 85       	ldd	r25, Y+15	; 0x0f
    137a:	81 15       	cp	r24, r1
    137c:	91 40       	sbci	r25, 0x01	; 1
    137e:	09 f0       	breq	.+2      	; 0x1382 <arp_filter+0x22>
    1380:	75 c0       	rjmp	.+234    	; 0x146c <arp_filter+0x10c>
    1382:	88 89       	ldd	r24, Y+16	; 0x10
    1384:	99 89       	ldd	r25, Y+17	; 0x11
    1386:	08 97       	sbiw	r24, 0x08	; 8
    1388:	09 f0       	breq	.+2      	; 0x138c <arp_filter+0x2c>
    138a:	70 c0       	rjmp	.+224    	; 0x146c <arp_filter+0x10c>
			(msg->proto_type == ARP_PROTO_TYPE_IP) &&
			(msg->ip_addr_to == ip_addr) )
    138c:	4e a1       	ldd	r20, Y+38	; 0x26
    138e:	5f a1       	ldd	r21, Y+39	; 0x27
    1390:	68 a5       	ldd	r22, Y+40	; 0x28
    1392:	79 a5       	ldd	r23, Y+41	; 0x29
	arp_message_t *msg = (void*)(frame->data);

	if(len >= sizeof(arp_message_t))
	{
		if( (msg->hw_type == ARP_HW_TYPE_ETH) &&
			(msg->proto_type == ARP_PROTO_TYPE_IP) &&
    1394:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <ip_addr>
    1398:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <ip_addr+0x1>
    139c:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <ip_addr+0x2>
    13a0:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <ip_addr+0x3>
    13a4:	48 17       	cp	r20, r24
    13a6:	59 07       	cpc	r21, r25
    13a8:	6a 07       	cpc	r22, r26
    13aa:	7b 07       	cpc	r23, r27
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <arp_filter+0x50>
    13ae:	5e c0       	rjmp	.+188    	; 0x146c <arp_filter+0x10c>
			(msg->ip_addr_to == ip_addr) )
		{
			switch(msg->type)
    13b0:	8c 89       	ldd	r24, Y+20	; 0x14
    13b2:	9d 89       	ldd	r25, Y+21	; 0x15
    13b4:	81 15       	cp	r24, r1
    13b6:	21 e0       	ldi	r18, 0x01	; 1
    13b8:	92 07       	cpc	r25, r18
    13ba:	21 f0       	breq	.+8      	; 0x13c4 <arp_filter+0x64>
    13bc:	81 15       	cp	r24, r1
    13be:	92 40       	sbci	r25, 0x02	; 2
    13c0:	71 f1       	breq	.+92     	; 0x141e <arp_filter+0xbe>
    13c2:	54 c0       	rjmp	.+168    	; 0x146c <arp_filter+0x10c>
			{
			case ARP_TYPE_REQUEST:
				msg->type = ARP_TYPE_RESPONSE;
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	92 e0       	ldi	r25, 0x02	; 2
    13c8:	9d 8b       	std	Y+21, r25	; 0x15
    13ca:	8c 8b       	std	Y+20, r24	; 0x14
				memcpy(msg->mac_addr_to, msg->mac_addr_from, 6);
    13cc:	de 01       	movw	r26, r28
    13ce:	90 96       	adiw	r26, 0x20	; 32
    13d0:	9e 01       	movw	r18, r28
    13d2:	2a 5e       	subi	r18, 0xEA	; 234
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	86 e0       	ldi	r24, 0x06	; 6
    13d8:	f9 01       	movw	r30, r18
    13da:	01 90       	ld	r0, Z+
    13dc:	0d 92       	st	X+, r0
    13de:	8a 95       	dec	r24
    13e0:	e1 f7       	brne	.-8      	; 0x13da <arp_filter+0x7a>
				memcpy(msg->mac_addr_from, mac_addr, 6);
    13e2:	86 e0       	ldi	r24, 0x06	; 6
    13e4:	e2 e6       	ldi	r30, 0x62	; 98
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	d9 01       	movw	r26, r18
    13ea:	01 90       	ld	r0, Z+
    13ec:	0d 92       	st	X+, r0
    13ee:	8a 95       	dec	r24
    13f0:	e1 f7       	brne	.-8      	; 0x13ea <arp_filter+0x8a>
				msg->ip_addr_to = msg->ip_addr_from;
    13f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    13f6:	ae 8d       	ldd	r26, Y+30	; 0x1e
    13f8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    13fa:	8e a3       	std	Y+38, r24	; 0x26
    13fc:	9f a3       	std	Y+39, r25	; 0x27
    13fe:	a8 a7       	std	Y+40, r26	; 0x28
    1400:	b9 a7       	std	Y+41, r27	; 0x29
				msg->ip_addr_from = ip_addr;
    1402:	4c 8f       	std	Y+28, r20	; 0x1c
    1404:	5d 8f       	std	Y+29, r21	; 0x1d
    1406:	6e 8f       	std	Y+30, r22	; 0x1e
    1408:	7f 8f       	std	Y+31, r23	; 0x1f
				eth_reply(frame, sizeof(arp_message_t));
    140a:	6c e1       	ldi	r22, 0x1C	; 28
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	ce 01       	movw	r24, r28
				}
				break;
			}
		}
	}
}
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	ff 90       	pop	r15
    1416:	ef 90       	pop	r14
    1418:	df 90       	pop	r13
    141a:	cf 90       	pop	r12
				msg->type = ARP_TYPE_RESPONSE;
				memcpy(msg->mac_addr_to, msg->mac_addr_from, 6);
				memcpy(msg->mac_addr_from, mac_addr, 6);
				msg->ip_addr_to = msg->ip_addr_from;
				msg->ip_addr_from = ip_addr;
				eth_reply(frame, sizeof(arp_message_t));
    141c:	b0 ce       	rjmp	.-672    	; 0x117e <eth_reply>
				break;
			case ARP_TYPE_RESPONSE:
				if(!arp_search_cache(msg->ip_addr_from))
    141e:	cc 8c       	ldd	r12, Y+28	; 0x1c
    1420:	dd 8c       	ldd	r13, Y+29	; 0x1d
    1422:	ee 8c       	ldd	r14, Y+30	; 0x1e
    1424:	ff 8c       	ldd	r15, Y+31	; 0x1f
    1426:	c7 01       	movw	r24, r14
    1428:	b6 01       	movw	r22, r12
    142a:	24 dd       	rcall	.-1464   	; 0xe74 <arp_search_cache>
    142c:	89 2b       	or	r24, r25
    142e:	f1 f4       	brne	.+60     	; 0x146c <arp_filter+0x10c>
				{
					arp_cache[arp_cache_wr].ip_addr = msg->ip_addr_from;
    1430:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <arp_cache_wr>
    1434:	8a e0       	ldi	r24, 0x0A	; 10
    1436:	98 9f       	mul	r25, r24
    1438:	d0 01       	movw	r26, r0
    143a:	11 24       	eor	r1, r1
    143c:	fd 01       	movw	r30, r26
    143e:	e2 58       	subi	r30, 0x82	; 130
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	c0 82       	st	Z, r12
    1444:	d1 82       	std	Z+1, r13	; 0x01
    1446:	e2 82       	std	Z+2, r14	; 0x02
    1448:	f3 82       	std	Z+3, r15	; 0x03
					memcpy(arp_cache[arp_cache_wr].mac_addr, msg->mac_addr_from, 6);
    144a:	ae 57       	subi	r26, 0x7E	; 126
    144c:	bf 4f       	sbci	r27, 0xFF	; 255
    144e:	fe 01       	movw	r30, r28
    1450:	76 96       	adiw	r30, 0x16	; 22
    1452:	86 e0       	ldi	r24, 0x06	; 6
    1454:	01 90       	ld	r0, Z+
    1456:	0d 92       	st	X+, r0
    1458:	8a 95       	dec	r24
    145a:	e1 f7       	brne	.-8      	; 0x1454 <arp_filter+0xf4>
					arp_cache_wr++;
    145c:	9f 5f       	subi	r25, 0xFF	; 255
					if(arp_cache_wr == ARP_CACHE_SIZE)
    145e:	93 30       	cpi	r25, 0x03	; 3
    1460:	19 f0       	breq	.+6      	; 0x1468 <arp_filter+0x108>
			case ARP_TYPE_RESPONSE:
				if(!arp_search_cache(msg->ip_addr_from))
				{
					arp_cache[arp_cache_wr].ip_addr = msg->ip_addr_from;
					memcpy(arp_cache[arp_cache_wr].mac_addr, msg->mac_addr_from, 6);
					arp_cache_wr++;
    1462:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <arp_cache_wr>
    1466:	02 c0       	rjmp	.+4      	; 0x146c <arp_filter+0x10c>
					if(arp_cache_wr == ARP_CACHE_SIZE)
						arp_cache_wr = 0;
    1468:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <arp_cache_wr>
				}
				break;
			}
		}
	}
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	cf 90       	pop	r12
    1478:	08 95       	ret

0000147a <eth_filter>:
}

// process Ethernet frame
void eth_filter(eth_frame_t *frame, uint16_t len)
{
	if(len >= sizeof(eth_frame_t))
    147a:	6e 30       	cpi	r22, 0x0E	; 14
    147c:	71 05       	cpc	r23, r1
    147e:	78 f0       	brcs	.+30     	; 0x149e <eth_filter+0x24>
	{
		switch(frame->type)
    1480:	fc 01       	movw	r30, r24
    1482:	24 85       	ldd	r18, Z+12	; 0x0c
    1484:	35 85       	ldd	r19, Z+13	; 0x0d
    1486:	28 30       	cpi	r18, 0x08	; 8
    1488:	31 05       	cpc	r19, r1
    148a:	31 f0       	breq	.+12     	; 0x1498 <eth_filter+0x1e>
    148c:	28 30       	cpi	r18, 0x08	; 8
    148e:	36 40       	sbci	r19, 0x06	; 6
    1490:	31 f4       	brne	.+12     	; 0x149e <eth_filter+0x24>
		{
		case ETH_TYPE_ARP:
			arp_filter(frame, len - sizeof(eth_frame_t));
    1492:	6e 50       	subi	r22, 0x0E	; 14
    1494:	71 09       	sbc	r23, r1
    1496:	64 cf       	rjmp	.-312    	; 0x1360 <arp_filter>
			break;
		case ETH_TYPE_IP:
			ip_filter(frame, len - sizeof(eth_frame_t));
    1498:	6e 50       	subi	r22, 0x0E	; 14
    149a:	71 09       	sbc	r23, r1
    149c:	05 cf       	rjmp	.-502    	; 0x12a8 <ip_filter>
    149e:	08 95       	ret

000014a0 <lan_init>:
/*
 * LAN
 */

void lan_init() {
	ip_addr = IP_ADDR;
    14a0:	80 ec       	ldi	r24, 0xC0	; 192
    14a2:	98 ea       	ldi	r25, 0xA8	; 168
    14a4:	a1 e0       	ldi	r26, 0x01	; 1
    14a6:	b6 e4       	ldi	r27, 0x46	; 70
    14a8:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <ip_addr>
    14ac:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <ip_addr+0x1>
    14b0:	a0 93 a7 00 	sts	0x00A7, r26	; 0x8000a7 <ip_addr+0x2>
    14b4:	b0 93 a8 00 	sts	0x00A8, r27	; 0x8000a8 <ip_addr+0x3>
	ip_mask = IP_SUBNET_MASK;
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	9f ef       	ldi	r25, 0xFF	; 255
    14bc:	af ef       	ldi	r26, 0xFF	; 255
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <ip_mask>
    14c4:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <ip_mask+0x1>
    14c8:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <ip_mask+0x2>
    14cc:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <ip_mask+0x3>
	ip_gateway = IP_DEFAULT_GATEWAY;
    14d0:	80 ec       	ldi	r24, 0xC0	; 192
    14d2:	98 ea       	ldi	r25, 0xA8	; 168
    14d4:	a1 e0       	ldi	r26, 0x01	; 1
    14d6:	b1 e0       	ldi	r27, 0x01	; 1
    14d8:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <ip_gateway>
    14dc:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <ip_gateway+0x1>
    14e0:	a0 93 9f 00 	sts	0x009F, r26	; 0x80009f <ip_gateway+0x2>
    14e4:	b0 93 a0 00 	sts	0x00A0, r27	; 0x8000a0 <ip_gateway+0x3>
	
	enc28j60_init(mac_addr);
    14e8:	82 e6       	ldi	r24, 0x62	; 98
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	8b cb       	rjmp	.-2282   	; 0xc04 <enc28j60_init>

000014ee <lan_poll>:
#include "../cfg/config.h"

extern uint8_t transit;

void lan_poll() {
	if (transit) {
    14ee:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <transit>
    14f2:	88 23       	and	r24, r24
    14f4:	11 f0       	breq	.+4      	; 0x14fa <lan_poll+0xc>
		LED_PORT |= (1 << ERROR_LED);
    14f6:	ab 9a       	sbi	0x15, 3	; 21
		return;
    14f8:	08 95       	ret
	} else {
		LED_PORT &= ~(1 << ERROR_LED);
    14fa:	ab 98       	cbi	0x15, 3	; 21
	}

	uint16_t len;
	eth_frame_t *frame = (void*)net_buf;

	while((len = enc28j60_recv_packet(net_buf, sizeof(net_buf)))) {
    14fc:	68 ec       	ldi	r22, 0xC8	; 200
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	8c ea       	ldi	r24, 0xAC	; 172
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0d dc       	rcall	.-2022   	; 0xd20 <enc28j60_recv_packet>
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	41 f0       	breq	.+16     	; 0x151a <lan_poll+0x2c>
		eth_filter(frame, len);
    150a:	bc 01       	movw	r22, r24
    150c:	8c ea       	ldi	r24, 0xAC	; 172
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	b4 df       	rcall	.-152    	; 0x147a <eth_filter>
		if (transit) return;
    1512:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <transit>
    1516:	88 23       	and	r24, r24
    1518:	89 f3       	breq	.-30     	; 0x14fc <lan_poll+0xe>
    151a:	08 95       	ret

0000151c <lan_up>:
	}
}

uint8_t lan_up() {
	return ip_addr != 0;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	40 91 a5 00 	lds	r20, 0x00A5	; 0x8000a5 <ip_addr>
    1522:	50 91 a6 00 	lds	r21, 0x00A6	; 0x8000a6 <ip_addr+0x1>
    1526:	60 91 a7 00 	lds	r22, 0x00A7	; 0x8000a7 <ip_addr+0x2>
    152a:	70 91 a8 00 	lds	r23, 0x00A8	; 0x8000a8 <ip_addr+0x3>
    152e:	45 2b       	or	r20, r21
    1530:	46 2b       	or	r20, r22
    1532:	47 2b       	or	r20, r23
    1534:	09 f4       	brne	.+2      	; 0x1538 <lan_up+0x1c>
    1536:	80 e0       	ldi	r24, 0x00	; 0
}
    1538:	08 95       	ret

0000153a <__vector_9>:

static uint16_t timer_cnt_unsafe;
static uint16_t timer_cnt;
static uint16_t timers[TIMERS_MAX];

ISR(TIMER0_OVF_vect) {
    153a:	1f 92       	push	r1
    153c:	0f 92       	push	r0
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	0f 92       	push	r0
    1542:	11 24       	eor	r1, r1
    1544:	8f 93       	push	r24
    1546:	9f 93       	push	r25
	timer_cnt_unsafe++;
    1548:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <timer_cnt_unsafe>
    154c:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <timer_cnt_unsafe+0x1>
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <timer_cnt_unsafe+0x1>
    1556:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <timer_cnt_unsafe>
	TCNT0 = TMR_TCNT;
    155a:	86 e0       	ldi	r24, 0x06	; 6
    155c:	82 bf       	out	0x32, r24	; 50
}
    155e:	9f 91       	pop	r25
    1560:	8f 91       	pop	r24
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	0f 90       	pop	r0
    1568:	1f 90       	pop	r1
    156a:	18 95       	reti

0000156c <timers_init>:

void timers_init(void) {
	TIMSK |= (1 << TOIE0);
    156c:	89 b7       	in	r24, 0x39	; 57
    156e:	81 60       	ori	r24, 0x01	; 1
    1570:	89 bf       	out	0x39, r24	; 57
	TCNT0 = TMR_TCNT;
    1572:	86 e0       	ldi	r24, 0x06	; 6
    1574:	82 bf       	out	0x32, r24	; 50
	TCCR0 = TMR_CLOCK;
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	83 bf       	out	0x33, r24	; 51
    157a:	08 95       	ret

0000157c <timers_update>:
}

void timers_update(void) {
	static uint8_t last;
	if (last != *(uint8_t*)&timer_cnt_unsafe)  {
    157c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <timer_cnt_unsafe>
    1580:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <last.1640>
    1584:	89 17       	cp	r24, r25
    1586:	61 f0       	breq	.+24     	; 0x15a0 <timers_update+0x24>
		last = timer_cnt_unsafe;
    1588:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <last.1640>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    158c:	f8 94       	cli
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			timer_cnt = timer_cnt_unsafe;
    158e:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <timer_cnt_unsafe>
    1592:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <timer_cnt_unsafe+0x1>
    1596:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <timer_cnt+0x1>
    159a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <timer_cnt>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    159e:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    15a0:	08 95       	ret

000015a2 <timer_reset>:
		}
	}
}

void timer_reset(uint8_t timer_id) {
	timers[timer_id] = timer_cnt;
    15a2:	e8 2f       	mov	r30, r24
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	e6 55       	subi	r30, 0x56	; 86
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <timer_cnt>
    15b2:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <timer_cnt+0x1>
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	80 83       	st	Z, r24
    15ba:	08 95       	ret

000015bc <timer_get_count>:
}

uint16_t timer_get_count(uint8_t timer_id) {	
	return timer_cnt - timers[timer_id];
    15bc:	e8 2f       	mov	r30, r24
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	e6 55       	subi	r30, 0x56	; 86
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <timer_cnt>
    15cc:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <timer_cnt+0x1>
    15d0:	20 81       	ld	r18, Z
    15d2:	31 81       	ldd	r19, Z+1	; 0x01
}
    15d4:	82 1b       	sub	r24, r18
    15d6:	93 0b       	sbc	r25, r19
    15d8:	08 95       	ret

000015da <timer_expired>:
void timer_reset(uint8_t timer_id) {
	timers[timer_id] = timer_cnt;
}

uint16_t timer_get_count(uint8_t timer_id) {	
	return timer_cnt - timers[timer_id];
    15da:	40 91 b4 00 	lds	r20, 0x00B4	; 0x8000b4 <timer_cnt>
    15de:	50 91 b5 00 	lds	r21, 0x00B5	; 0x8000b5 <timer_cnt+0x1>
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	22 0f       	add	r18, r18
    15e8:	33 1f       	adc	r19, r19
    15ea:	f9 01       	movw	r30, r18
    15ec:	e6 55       	subi	r30, 0x56	; 86
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	fa 01       	movw	r30, r20
    15f6:	e8 1b       	sub	r30, r24
    15f8:	f9 0b       	sbc	r31, r25
}

uint8_t timer_expired(uint8_t timer_id, uint16_t time) {
	uint8_t expired = (timer_get_count(timer_id) > time);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	6e 17       	cp	r22, r30
    15fe:	7f 07       	cpc	r23, r31
    1600:	08 f0       	brcs	.+2      	; 0x1604 <timer_expired+0x2a>
    1602:	80 e0       	ldi	r24, 0x00	; 0
	if (expired) timer_reset(timer_id);
    1604:	6e 17       	cp	r22, r30
    1606:	7f 07       	cpc	r23, r31
    1608:	28 f4       	brcc	.+10     	; 0x1614 <timer_expired+0x3a>
		}
	}
}

void timer_reset(uint8_t timer_id) {
	timers[timer_id] = timer_cnt;
    160a:	f9 01       	movw	r30, r18
    160c:	e6 55       	subi	r30, 0x56	; 86
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	51 83       	std	Z+1, r21	; 0x01
    1612:	40 83       	st	Z, r20

uint8_t timer_expired(uint8_t timer_id, uint16_t time) {
	uint8_t expired = (timer_get_count(timer_id) > time);
	if (expired) timer_reset(timer_id);
	return expired;
}
    1614:	08 95       	ret

00001616 <memcpy>:
    1616:	fb 01       	movw	r30, r22
    1618:	dc 01       	movw	r26, r24
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <memcpy+0xa>
    161c:	01 90       	ld	r0, Z+
    161e:	0d 92       	st	X+, r0
    1620:	41 50       	subi	r20, 0x01	; 1
    1622:	50 40       	sbci	r21, 0x00	; 0
    1624:	d8 f7       	brcc	.-10     	; 0x161c <memcpy+0x6>
    1626:	08 95       	ret

00001628 <memset>:
    1628:	dc 01       	movw	r26, r24
    162a:	01 c0       	rjmp	.+2      	; 0x162e <memset+0x6>
    162c:	6d 93       	st	X+, r22
    162e:	41 50       	subi	r20, 0x01	; 1
    1630:	50 40       	sbci	r21, 0x00	; 0
    1632:	e0 f7       	brcc	.-8      	; 0x162c <memset+0x4>
    1634:	08 95       	ret

00001636 <_exit>:
    1636:	f8 94       	cli

00001638 <__stop_program>:
    1638:	ff cf       	rjmp	.-2      	; 0x1638 <__stop_program>

Disassembly of section .nrww:

00001c00 <_nrww_start>:
    1c00:	00 c0       	rjmp	.+0      	; 0x1c02 <_nrww_start+0x2>
    1c02:	c1 01       	movw	r24, r2
    1c04:	c3 03       	fmuls	r20, r19
    1c06:	02 c2       	rjmp	.+1028   	; 0x200c <__TEXT_REGION_LENGTH__+0xc>
    1c08:	c6 06       	cpc	r12, r22
    1c0a:	07 c7       	rjmp	.+3598   	; 0x2a1a <__TEXT_REGION_LENGTH__+0xa1a>
    1c0c:	05 c5       	rjmp	.+2570   	; 0x2618 <__TEXT_REGION_LENGTH__+0x618>
    1c0e:	c4 04       	cpc	r12, r4
    1c10:	cc 0c       	add	r12, r12
    1c12:	0d cd       	rjmp	.-1510   	; 0x162e <memset+0x6>
    1c14:	0f cf       	rjmp	.-482    	; 0x1a34 <__data_load_end+0x3f4>
    1c16:	ce 0e       	add	r12, r30
    1c18:	0a ca       	rjmp	.-3052   	; 0x102e <ip_send+0x46>
    1c1a:	cb 0b       	sbc	r28, r27
    1c1c:	c9 09       	sbc	r28, r9
    1c1e:	08 c8       	rjmp	.-4080   	; 0xc30 <enc28j60_init+0x2c>
    1c20:	d8 18       	sub	r13, r8
    1c22:	19 d9       	rcall	.-3534   	; 0xe56 <ip_cksum+0x62>
    1c24:	1b db       	rcall	.-2506   	; 0x125c <udp_reply+0x40>
    1c26:	da 1a       	sub	r13, r26
    1c28:	1e de       	rcall	.-964    	; 0x1866 <__data_load_end+0x226>
    1c2a:	df 1f       	adc	r29, r31
    1c2c:	dd 1d       	adc	r29, r13
    1c2e:	1c dc       	rcall	.-1992   	; 0x1468 <arp_filter+0x108>
    1c30:	14 d4       	rcall	.+2088   	; 0x245a <__TEXT_REGION_LENGTH__+0x45a>
    1c32:	d5 15       	cp	r29, r5
    1c34:	d7 17       	cp	r29, r23
    1c36:	16 d6       	rcall	.+3116   	; 0x2864 <__TEXT_REGION_LENGTH__+0x864>
    1c38:	d2 12       	cpse	r13, r18
    1c3a:	13 d3       	rcall	.+1574   	; 0x2262 <__TEXT_REGION_LENGTH__+0x262>
    1c3c:	11 d1       	rcall	.+546    	; 0x1e60 <CRCHi+0x160>
    1c3e:	d0 10       	cpse	r13, r0
    1c40:	f0 30       	cpi	r31, 0x00	; 0
    1c42:	31 f1       	breq	.+76     	; 0x1c90 <_nrww_start+0x90>
    1c44:	33 f3       	brvs	.-52     	; 0x1c12 <_nrww_start+0x12>
    1c46:	f2 32       	cpi	r31, 0x22	; 34
    1c48:	36 f6       	brtc	.-116    	; 0x1bd6 <__data_load_end+0x596>
    1c4a:	f7 37       	cpi	r31, 0x77	; 119
    1c4c:	f5 35       	cpi	r31, 0x55	; 85
    1c4e:	34 f4       	brge	.+12     	; 0x1c5c <_nrww_start+0x5c>
    1c50:	3c fc       	.word	0xfc3c	; ????
    1c52:	fd 3d       	cpi	r31, 0xDD	; 221
    1c54:	ff 3f       	cpi	r31, 0xFF	; 255
    1c56:	3e fe       	.word	0xfe3e	; ????
    1c58:	fa 3a       	cpi	r31, 0xAA	; 170
    1c5a:	3b fb       	.word	0xfb3b	; ????
    1c5c:	39 f9       	.word	0xf939	; ????
    1c5e:	f8 38       	cpi	r31, 0x88	; 136
    1c60:	28 e8       	ldi	r18, 0x88	; 136
    1c62:	e9 29       	or	r30, r9
    1c64:	eb 2b       	or	r30, r27
    1c66:	2a ea       	ldi	r18, 0xAA	; 170
    1c68:	ee 2e       	mov	r14, r30
    1c6a:	2f ef       	ldi	r18, 0xFF	; 255
    1c6c:	2d ed       	ldi	r18, 0xDD	; 221
    1c6e:	ec 2c       	mov	r14, r12
    1c70:	e4 24       	eor	r14, r4
    1c72:	25 e5       	ldi	r18, 0x55	; 85
    1c74:	27 e7       	ldi	r18, 0x77	; 119
    1c76:	e6 26       	eor	r14, r22
    1c78:	22 e2       	ldi	r18, 0x22	; 34
    1c7a:	e3 23       	and	r30, r19
    1c7c:	e1 21       	and	r30, r1
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	a0 60       	ori	r26, 0x00	; 0
    1c82:	61 a1       	ldd	r22, Z+33	; 0x21
    1c84:	63 a3       	std	Z+35, r22	; 0x23
    1c86:	a2 62       	ori	r26, 0x22	; 34
    1c88:	66 a6       	std	Z+46, r6	; 0x2e
    1c8a:	a7 67       	ori	r26, 0x77	; 119
    1c8c:	a5 65       	ori	r26, 0x55	; 85
    1c8e:	64 a4       	ldd	r6, Z+44	; 0x2c
    1c90:	6c ac       	ldd	r6, Y+60	; 0x3c
    1c92:	ad 6d       	ori	r26, 0xDD	; 221
    1c94:	af 6f       	ori	r26, 0xFF	; 255
    1c96:	6e ae       	std	Y+62, r6	; 0x3e
    1c98:	aa 6a       	ori	r26, 0xAA	; 170
    1c9a:	6b ab       	std	Y+51, r22	; 0x33
    1c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9e:	a8 68       	ori	r26, 0x88	; 136
    1ca0:	78 b8       	out	0x08, r7	; 8
    1ca2:	b9 79       	andi	r27, 0x99	; 153
    1ca4:	bb 7b       	andi	r27, 0xBB	; 187
    1ca6:	7a ba       	out	0x1a, r7	; 26
    1ca8:	be 7e       	andi	r27, 0xEE	; 238
    1caa:	7f bf       	out	0x3f, r23	; 63
    1cac:	7d bd       	out	0x2d, r23	; 45
    1cae:	bc 7c       	andi	r27, 0xCC	; 204
    1cb0:	b4 74       	andi	r27, 0x44	; 68
    1cb2:	75 b5       	in	r23, 0x25	; 37
    1cb4:	77 b7       	in	r23, 0x37	; 55
    1cb6:	b6 76       	andi	r27, 0x66	; 102
    1cb8:	72 b2       	in	r7, 0x12	; 18
    1cba:	b3 73       	andi	r27, 0x33	; 51
    1cbc:	b1 71       	andi	r27, 0x11	; 17
    1cbe:	70 b0       	in	r7, 0x00	; 0
    1cc0:	50 90 91 51 	lds	r5, 0x5191	; 0x805191 <__bss_end+0x4f1d>
    1cc4:	93 53       	subi	r25, 0x33	; 51
    1cc6:	52 92       	st	-Z, r5
    1cc8:	96 56       	subi	r25, 0x66	; 102
    1cca:	57 97       	sbiw	r26, 0x17	; 23
    1ccc:	55 95       	asr	r21
    1cce:	94 54       	subi	r25, 0x44	; 68
    1cd0:	9c 5c       	subi	r25, 0xCC	; 204
    1cd2:	5d 9d       	mul	r21, r13
    1cd4:	5f 9f       	mul	r21, r31
    1cd6:	9e 5e       	subi	r25, 0xEE	; 238
    1cd8:	5a 9a       	sbi	0x0b, 2	; 11
    1cda:	9b 5b       	subi	r25, 0xBB	; 187
    1cdc:	99 59       	subi	r25, 0x99	; 153
    1cde:	58 98       	cbi	0x0b, 0	; 11
    1ce0:	88 48       	sbci	r24, 0x88	; 136
    1ce2:	49 89       	ldd	r20, Y+17	; 0x11
    1ce4:	4b 8b       	std	Y+19, r20	; 0x13
    1ce6:	8a 4a       	sbci	r24, 0xAA	; 170
    1ce8:	4e 8e       	std	Y+30, r4	; 0x1e
    1cea:	8f 4f       	sbci	r24, 0xFF	; 255
    1cec:	8d 4d       	sbci	r24, 0xDD	; 221
    1cee:	4c 8c       	ldd	r4, Y+28	; 0x1c
    1cf0:	44 84       	ldd	r4, Z+12	; 0x0c
    1cf2:	85 45       	sbci	r24, 0x55	; 85
    1cf4:	87 47       	sbci	r24, 0x77	; 119
    1cf6:	46 86       	std	Z+14, r4	; 0x0e
    1cf8:	82 42       	sbci	r24, 0x22	; 34
    1cfa:	43 83       	std	Z+3, r20	; 0x03
    1cfc:	41 81       	ldd	r20, Z+1	; 0x01
    1cfe:	80 40       	sbci	r24, 0x00	; 0

00001d00 <CRCHi>:
    1d00:	00 c1       	rjmp	.+512    	; 0x1f02 <CRCHi+0x202>
    1d02:	81 40       	sbci	r24, 0x01	; 1
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <CRCHi+0x8>
    1d06:	80 41       	sbci	r24, 0x10	; 16
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <CRCHi+0xc>
    1d0a:	80 41       	sbci	r24, 0x10	; 16
    1d0c:	00 c1       	rjmp	.+512    	; 0x1f0e <CRCHi+0x20e>
    1d0e:	81 40       	sbci	r24, 0x01	; 1
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <CRCHi+0x14>
    1d12:	80 41       	sbci	r24, 0x10	; 16
    1d14:	00 c1       	rjmp	.+512    	; 0x1f16 <CRCHi+0x216>
    1d16:	81 40       	sbci	r24, 0x01	; 1
    1d18:	00 c1       	rjmp	.+512    	; 0x1f1a <CRCHi+0x21a>
    1d1a:	81 40       	sbci	r24, 0x01	; 1
    1d1c:	01 c0       	rjmp	.+2      	; 0x1d20 <CRCHi+0x20>
    1d1e:	80 41       	sbci	r24, 0x10	; 16
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <CRCHi+0x24>
    1d22:	80 41       	sbci	r24, 0x10	; 16
    1d24:	00 c1       	rjmp	.+512    	; 0x1f26 <CRCHi+0x226>
    1d26:	81 40       	sbci	r24, 0x01	; 1
    1d28:	00 c1       	rjmp	.+512    	; 0x1f2a <CRCHi+0x22a>
    1d2a:	81 40       	sbci	r24, 0x01	; 1
    1d2c:	01 c0       	rjmp	.+2      	; 0x1d30 <CRCHi+0x30>
    1d2e:	80 41       	sbci	r24, 0x10	; 16
    1d30:	00 c1       	rjmp	.+512    	; 0x1f32 <CRCHi+0x232>
    1d32:	81 40       	sbci	r24, 0x01	; 1
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <CRCHi+0x38>
    1d36:	80 41       	sbci	r24, 0x10	; 16
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <CRCHi+0x3c>
    1d3a:	80 41       	sbci	r24, 0x10	; 16
    1d3c:	00 c1       	rjmp	.+512    	; 0x1f3e <CRCHi+0x23e>
    1d3e:	81 40       	sbci	r24, 0x01	; 1
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <CRCHi+0x44>
    1d42:	80 41       	sbci	r24, 0x10	; 16
    1d44:	00 c1       	rjmp	.+512    	; 0x1f46 <CRCHi+0x246>
    1d46:	81 40       	sbci	r24, 0x01	; 1
    1d48:	00 c1       	rjmp	.+512    	; 0x1f4a <CRCHi+0x24a>
    1d4a:	81 40       	sbci	r24, 0x01	; 1
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <CRCHi+0x50>
    1d4e:	80 41       	sbci	r24, 0x10	; 16
    1d50:	00 c1       	rjmp	.+512    	; 0x1f52 <CRCHi+0x252>
    1d52:	81 40       	sbci	r24, 0x01	; 1
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <CRCHi+0x58>
    1d56:	80 41       	sbci	r24, 0x10	; 16
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <CRCHi+0x5c>
    1d5a:	80 41       	sbci	r24, 0x10	; 16
    1d5c:	00 c1       	rjmp	.+512    	; 0x1f5e <CRCHi+0x25e>
    1d5e:	81 40       	sbci	r24, 0x01	; 1
    1d60:	00 c1       	rjmp	.+512    	; 0x1f62 <CRCHi+0x262>
    1d62:	81 40       	sbci	r24, 0x01	; 1
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <CRCHi+0x68>
    1d66:	80 41       	sbci	r24, 0x10	; 16
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <CRCHi+0x6c>
    1d6a:	80 41       	sbci	r24, 0x10	; 16
    1d6c:	00 c1       	rjmp	.+512    	; 0x1f6e <CRCHi+0x26e>
    1d6e:	81 40       	sbci	r24, 0x01	; 1
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <CRCHi+0x74>
    1d72:	80 41       	sbci	r24, 0x10	; 16
    1d74:	00 c1       	rjmp	.+512    	; 0x1f76 <CRCHi+0x276>
    1d76:	81 40       	sbci	r24, 0x01	; 1
    1d78:	00 c1       	rjmp	.+512    	; 0x1f7a <CRCHi+0x27a>
    1d7a:	81 40       	sbci	r24, 0x01	; 1
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <CRCHi+0x80>
    1d7e:	80 41       	sbci	r24, 0x10	; 16
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <CRCHi+0x84>
    1d82:	80 41       	sbci	r24, 0x10	; 16
    1d84:	00 c1       	rjmp	.+512    	; 0x1f86 <CRCHi+0x286>
    1d86:	81 40       	sbci	r24, 0x01	; 1
    1d88:	00 c1       	rjmp	.+512    	; 0x1f8a <CRCHi+0x28a>
    1d8a:	81 40       	sbci	r24, 0x01	; 1
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <CRCHi+0x90>
    1d8e:	80 41       	sbci	r24, 0x10	; 16
    1d90:	00 c1       	rjmp	.+512    	; 0x1f92 <CRCHi+0x292>
    1d92:	81 40       	sbci	r24, 0x01	; 1
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <CRCHi+0x98>
    1d96:	80 41       	sbci	r24, 0x10	; 16
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <CRCHi+0x9c>
    1d9a:	80 41       	sbci	r24, 0x10	; 16
    1d9c:	00 c1       	rjmp	.+512    	; 0x1f9e <CRCHi+0x29e>
    1d9e:	81 40       	sbci	r24, 0x01	; 1
    1da0:	00 c1       	rjmp	.+512    	; 0x1fa2 <CRCHi+0x2a2>
    1da2:	81 40       	sbci	r24, 0x01	; 1
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <CRCHi+0xa8>
    1da6:	80 41       	sbci	r24, 0x10	; 16
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <CRCHi+0xac>
    1daa:	80 41       	sbci	r24, 0x10	; 16
    1dac:	00 c1       	rjmp	.+512    	; 0x1fae <CRCHi+0x2ae>
    1dae:	81 40       	sbci	r24, 0x01	; 1
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <CRCHi+0xb4>
    1db2:	80 41       	sbci	r24, 0x10	; 16
    1db4:	00 c1       	rjmp	.+512    	; 0x1fb6 <CRCHi+0x2b6>
    1db6:	81 40       	sbci	r24, 0x01	; 1
    1db8:	00 c1       	rjmp	.+512    	; 0x1fba <CRCHi+0x2ba>
    1dba:	81 40       	sbci	r24, 0x01	; 1
    1dbc:	01 c0       	rjmp	.+2      	; 0x1dc0 <CRCHi+0xc0>
    1dbe:	80 41       	sbci	r24, 0x10	; 16
    1dc0:	00 c1       	rjmp	.+512    	; 0x1fc2 <CRCHi+0x2c2>
    1dc2:	81 40       	sbci	r24, 0x01	; 1
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <CRCHi+0xc8>
    1dc6:	80 41       	sbci	r24, 0x10	; 16
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <CRCHi+0xcc>
    1dca:	80 41       	sbci	r24, 0x10	; 16
    1dcc:	00 c1       	rjmp	.+512    	; 0x1fce <CRCHi+0x2ce>
    1dce:	81 40       	sbci	r24, 0x01	; 1
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <CRCHi+0xd4>
    1dd2:	80 41       	sbci	r24, 0x10	; 16
    1dd4:	00 c1       	rjmp	.+512    	; 0x1fd6 <CRCHi+0x2d6>
    1dd6:	81 40       	sbci	r24, 0x01	; 1
    1dd8:	00 c1       	rjmp	.+512    	; 0x1fda <CRCHi+0x2da>
    1dda:	81 40       	sbci	r24, 0x01	; 1
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <CRCHi+0xe0>
    1dde:	80 41       	sbci	r24, 0x10	; 16
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <CRCHi+0xe4>
    1de2:	80 41       	sbci	r24, 0x10	; 16
    1de4:	00 c1       	rjmp	.+512    	; 0x1fe6 <CRCHi+0x2e6>
    1de6:	81 40       	sbci	r24, 0x01	; 1
    1de8:	00 c1       	rjmp	.+512    	; 0x1fea <CRCHi+0x2ea>
    1dea:	81 40       	sbci	r24, 0x01	; 1
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <CRCHi+0xf0>
    1dee:	80 41       	sbci	r24, 0x10	; 16
    1df0:	00 c1       	rjmp	.+512    	; 0x1ff2 <CRCHi+0x2f2>
    1df2:	81 40       	sbci	r24, 0x01	; 1
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <CRCHi+0xf8>
    1df6:	80 41       	sbci	r24, 0x10	; 16
    1df8:	01 c0       	rjmp	.+2      	; 0x1dfc <CRCHi+0xfc>
    1dfa:	80 41       	sbci	r24, 0x10	; 16
    1dfc:	00 c1       	rjmp	.+512    	; 0x1ffe <CRCHi+0x2fe>
    1dfe:	81 40       	sbci	r24, 0x01	; 1
