
build/pc-link-virtual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009dc  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .nrww         00000200  00001c00  00001c00  00000ab0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00800062  000009dc  00000ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000001cf  00800062  00800062  00000cb0  2**0
                  ALLOC
  4 .user_text    00000024  000009dc  000009dc  00000ab0  2**0
                  ALLOC
  5 .eeprom       000000c8  00810000  00810000  00000cb0  2**0
                  ALLOC
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  7 .comment      00000011  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY
  8 .debug_abbrev 0000044e  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000048c  00000000  00000000  0000114b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000001a  00000000  00000000  000015d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000017a  00000000  00000000  000015f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .stab         00001c2c  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .stabstr      00002400  00000000  00000000  00003398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	6b c3       	rjmp	.+1750   	; 0x6da <__vector_1>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	27 c0       	rjmp	.+78     	; 0x56 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	06 c3       	rjmp	.+1548   	; 0x624 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	2e c3       	rjmp	.+1628   	; 0x678 <__vector_13>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	a0 e6       	ldi	r26, 0x60	; 96
  34:	b0 e0       	ldi	r27, 0x00	; 0

00000036 <zero_loop>:
  36:	1d 92       	st	X+, r1
  38:	b4 30       	cpi	r27, 0x04	; 4
  3a:	e9 f7       	brne	.-6      	; 0x36 <zero_loop>
  3c:	af 35       	cpi	r26, 0x5F	; 95
  3e:	d9 f7       	brne	.-10     	; 0x36 <zero_loop>

00000040 <__do_clear_bss>:
  40:	22 e0       	ldi	r18, 0x02	; 2
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 33       	cpi	r26, 0x31	; 49
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	a4 d4       	rcall	.+2376   	; 0x99a <main>
  52:	c2 c4       	rjmp	.+2436   	; 0x9d8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_3>:
  56:	0f 93       	push	r16
  58:	0f b7       	in	r16, 0x3f	; 63
  5a:	0f 93       	push	r16
  5c:	23 94       	inc	r2
  5e:	0f 91       	pop	r16
  60:	0f bf       	out	0x3f, r16	; 63
  62:	0f 91       	pop	r16
  64:	18 95       	reti

00000066 <get_crc>:
  66:	dc 01       	movw	r26, r24
  68:	8f ef       	ldi	r24, 0xFF	; 255
  6a:	9f ef       	ldi	r25, 0xFF	; 255

0000006c <calc_crc>:
  6c:	fd e1       	ldi	r31, 0x1D	; 29
  6e:	ed 91       	ld	r30, X+
  70:	e8 27       	eor	r30, r24
  72:	84 91       	lpm	r24, Z
  74:	98 27       	eor	r25, r24
  76:	89 2f       	mov	r24, r25
  78:	fa 95       	dec	r31
  7a:	94 91       	lpm	r25, Z
  7c:	6a 95       	dec	r22
  7e:	b1 f7       	brne	.-20     	; 0x6c <calc_crc>
  80:	08 95       	ret

00000082 <propagation_delay>:

	start_transmit();
}

static void propagation_delay(void) {
	ptf = saved_ptf;
  82:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <saved_ptf>
  86:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <saved_ptf+0x1>
  8a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
  8e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	M_OCR = saved_ocr - PROPAGATION_DELAY;
  92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <_edata>
  96:	8a 50       	subi	r24, 0x0A	; 10
  98:	83 bd       	out	0x23, r24	; 35
	GIFR = (1 << INTF0);
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	8a bf       	out	0x3a, r24	; 58
	GICR = (1 << INT0);
  9e:	8b bf       	out	0x3b, r24	; 59
	M_UCSRB = RX_ENABLED;
  a0:	80 e9       	ldi	r24, 0x90	; 144
  a2:	8a b9       	out	0x0a, r24	; 10
  a4:	08 95       	ret

000000a6 <start_transmit>:
	}
}

static void start_transmit(void) {
	// Выключаеться контроль за шиной на время передачи
	M_TCCR = TIMER_OFF;
  a6:	15 bc       	out	0x25, r1	; 37
	M_TIFR |= 1 << M_OCF;
  a8:	88 b7       	in	r24, 0x38	; 56
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	88 bf       	out	0x38, r24	; 56
	M_TCNT = 0;
  ae:	14 bc       	out	0x24, r1	; 36

	GICR = 0;
  b0:	1b be       	out	0x3b, r1	; 59
	GIFR = (1 << INTF0);
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	8a bf       	out	0x3a, r24	; 58

	ibbpc_ev = 0;
  b6:	21 2c       	mov	r2, r1

	saved_ptf = ptf;
  b8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ptf>
  bc:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <ptf+0x1>
  c0:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <saved_ptf+0x1>
  c4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <saved_ptf>
	saved_ocr = M_OCR;
  c8:	83 b5       	in	r24, 0x23	; 35
  ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <_edata>

	ptf = &propagation_delay;
  ce:	81 e4       	ldi	r24, 0x41	; 65
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
  d6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	M_OCR = PROPAGATION_DELAY;
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	83 bd       	out	0x23, r24	; 35

	tx_count = frame.h.len;
  de:	ed ed       	ldi	r30, 0xDD	; 221
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	83 81       	ldd	r24, Z+3	; 0x03
  e4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tx_count>
	pCurBufPtr = (void*)&frame;
  e8:	f0 93 6d 00 	sts	0x006D, r31	; 0x80006d <pCurBufPtr+0x1>
  ec:	e0 93 6c 00 	sts	0x006C, r30	; 0x80006c <pCurBufPtr>

	status |= HIGH_PRIORITY;
  f0:	83 2d       	mov	r24, r3
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	38 2e       	mov	r3, r24

	MAX485_OUT();
  f6:	93 9a       	sbi	0x12, 3	; 18
	M_UCSRB = TX_ENABLED;
  f8:	88 e4       	ldi	r24, 0x48	; 72
  fa:	8a b9       	out	0x0a, r24	; 10

	M_UDR = (*pCurBufPtr);
  fc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pCurBufPtr>
 100:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pCurBufPtr+0x1>
 104:	80 81       	ld	r24, Z
 106:	8c b9       	out	0x0c, r24	; 12
 108:	08 95       	ret

0000010a <send_sync_frame>:
		}
	}
}

static void send_sync_frame(void) {
	M_OCR = IBBPC_40;
 10a:	8a ea       	ldi	r24, 0xAA	; 170
 10c:	83 bd       	out	0x23, r24	; 35
	ptf = idle_40;
 10e:	82 ed       	ldi	r24, 0xD2	; 210
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 116:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	ac = 0;
 11a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <ac>

	frame.h.sl_addr = MY_ADDRESS | 0x80;
 11e:	ed ed       	ldi	r30, 0xDD	; 221
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	82 e8       	ldi	r24, 0x82	; 130
 124:	80 83       	st	Z, r24
	status |= SYNC | LAST_MASTER;
 126:	83 2d       	mov	r24, r3
 128:	89 60       	ori	r24, 0x09	; 9
 12a:	38 2e       	mov	r3, r24
	frame.h.len = 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	83 83       	std	Z+3, r24	; 0x03

	start_transmit();
 130:	ba cf       	rjmp	.-140    	; 0xa6 <start_transmit>

00000132 <read_answer>:
	return IMMEDIATE_ANSWER;
#endif
}

/* Master mode */
static void read_answer(void) {
 132:	af 92       	push	r10
 134:	bf 92       	push	r11
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	10 91 6b 00 	lds	r17, 0x006B	; 0x80006b <cur_req_num>
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;

	if (status & DATA_RECIVED) {
 14a:	31 fe       	sbrs	r3, 1
 14c:	68 c0       	rjmp	.+208    	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>

/* Master mode */
static void read_answer(void) {
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;
 14e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <pbegin_data>
 152:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <pbegin_data+0x1>
 156:	c0 80       	ld	r12, Z
 158:	81 81       	ldd	r24, Z+1	; 0x01
 15a:	83 70       	andi	r24, 0x03	; 3
 15c:	d8 2e       	mov	r13, r24

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
 15e:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <pend_data>
 162:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <pend_data+0x1>
			p->unreachable_cnt = 0;
			if (cur_req_num == REQ_READ_BYTES) {
 166:	80 e0       	ldi	r24, 0x00	; 0
				uint16_t addr = (uint16_t)p->val.remote_addr;
				if (pr_addr != addr) {
					ix += 1;
					pr_addr = addr;
				}
				uint8_t bit_mask = (3 << p->val.bit_size);
 168:	63 e0       	ldi	r22, 0x03	; 3
 16a:	70 e0       	ldi	r23, 0x00	; 0
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
 16c:	e4 17       	cp	r30, r20
 16e:	f5 07       	cpc	r31, r21
 170:	09 f4       	brne	.+2      	; 0x174 <read_answer+0x42>
 172:	51 c0       	rjmp	.+162    	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
			p->unreachable_cnt = 0;
 174:	14 82       	std	Z+4, r1	; 0x04
			if (cur_req_num == REQ_READ_BYTES) {
 176:	12 30       	cpi	r17, 0x02	; 2
 178:	f1 f4       	brne	.+60     	; 0x1b6 <read_answer+0x84>
 17a:	98 2f       	mov	r25, r24
				for (uint8_t i = 0; i < p->val.bit_size + 1; i++, ix++) {
 17c:	29 2f       	mov	r18, r25
 17e:	28 1b       	sub	r18, r24
 180:	c2 2f       	mov	r28, r18
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	03 81       	ldd	r16, Z+3	; 0x03
 186:	20 2f       	mov	r18, r16
 188:	26 95       	lsr	r18
 18a:	26 95       	lsr	r18
 18c:	26 95       	lsr	r18
 18e:	27 70       	andi	r18, 0x07	; 7
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	2c 17       	cp	r18, r28
 194:	3d 07       	cpc	r19, r29
 196:	e4 f1       	brlt	.+120    	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
					*((uint8_t*)(p->val.local_addr + i)) = frame.a_read_bytes.data[ix];
 198:	29 2f       	mov	r18, r25
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	23 52       	subi	r18, 0x23	; 35
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	d9 01       	movw	r26, r18
 1a2:	15 96       	adiw	r26, 0x05	; 5
 1a4:	fc 90       	ld	r15, X
 1a6:	22 81       	ldd	r18, Z+2	; 0x02
 1a8:	30 2f       	mov	r19, r16
 1aa:	33 70       	andi	r19, 0x03	; 3
 1ac:	c2 0f       	add	r28, r18
 1ae:	d3 1f       	adc	r29, r19
 1b0:	f8 82       	st	Y, r15

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
			p->unreachable_cnt = 0;
			if (cur_req_num == REQ_READ_BYTES) {
				for (uint8_t i = 0; i < p->val.bit_size + 1; i++, ix++) {
 1b2:	9f 5f       	subi	r25, 0xFF	; 255
 1b4:	e3 cf       	rjmp	.-58     	; 0x17c <read_answer+0x4a>
					*((uint8_t*)(p->val.local_addr + i)) = frame.a_read_bytes.data[ix];
				}
			} else if (cur_req_num == REQ_READ_BITS) {
 1b6:	13 30       	cpi	r17, 0x03	; 3
 1b8:	51 f5       	brne	.+84     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
				uint16_t addr = (uint16_t)p->val.remote_addr;
 1ba:	b0 81       	ld	r27, Z
 1bc:	cb 2f       	mov	r28, r27
 1be:	91 81       	ldd	r25, Z+1	; 0x01
 1c0:	d9 2f       	mov	r29, r25
 1c2:	d3 70       	andi	r29, 0x03	; 3
				if (pr_addr != addr) {
 1c4:	cc 16       	cp	r12, r28
 1c6:	dd 06       	cpc	r13, r29
 1c8:	09 f0       	breq	.+2      	; 0x1cc <read_answer+0x9a>
					ix += 1;
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
					pr_addr = addr;
				}
				uint8_t bit_mask = (3 << p->val.bit_size);
 1cc:	23 81       	ldd	r18, Z+3	; 0x03
 1ce:	92 2f       	mov	r25, r18
 1d0:	96 95       	lsr	r25
 1d2:	96 95       	lsr	r25
 1d4:	96 95       	lsr	r25
 1d6:	97 70       	andi	r25, 0x07	; 7
 1d8:	7b 01       	movw	r14, r22
 1da:	01 c0       	rjmp	.+2      	; 0x1de <read_answer+0xac>
 1dc:	ee 0c       	add	r14, r14
 1de:	9a 95       	dec	r25
 1e0:	ea f7       	brpl	.-6      	; 0x1dc <read_answer+0xaa>
				uint8_t rem_val = frame.a_read_bits.data[ix] & bit_mask;
				uint8_t val = *((uint8_t*)((uint16_t)p->val.local_addr));
 1e2:	a2 80       	ldd	r10, Z+2	; 0x02
 1e4:	23 70       	andi	r18, 0x03	; 3
 1e6:	b2 2e       	mov	r11, r18

				val &= ~bit_mask;
 1e8:	9e 2d       	mov	r25, r14
 1ea:	90 95       	com	r25
 1ec:	d5 01       	movw	r26, r10
 1ee:	2c 91       	ld	r18, X
 1f0:	02 2f       	mov	r16, r18
 1f2:	09 23       	and	r16, r25
				if (pr_addr != addr) {
					ix += 1;
					pr_addr = addr;
				}
				uint8_t bit_mask = (3 << p->val.bit_size);
				uint8_t rem_val = frame.a_read_bits.data[ix] & bit_mask;
 1f4:	c8 2e       	mov	r12, r24
 1f6:	d1 2c       	mov	r13, r1
 1f8:	96 01       	movw	r18, r12
 1fa:	23 52       	subi	r18, 0x23	; 35
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
				uint8_t val = *((uint8_t*)((uint16_t)p->val.local_addr));

				val &= ~bit_mask;
				val |= rem_val;

				*((uint8_t*)((uint16_t)p->val.local_addr)) = val;
 1fe:	d9 01       	movw	r26, r18
 200:	15 96       	adiw	r26, 0x05	; 5
 202:	9c 91       	ld	r25, X
 204:	9e 21       	and	r25, r14
 206:	90 2b       	or	r25, r16
 208:	d5 01       	movw	r26, r10
 20a:	9c 93       	st	X, r25
			if (cur_req_num == REQ_READ_BYTES) {
				for (uint8_t i = 0; i < p->val.bit_size + 1; i++, ix++) {
					*((uint8_t*)(p->val.local_addr + i)) = frame.a_read_bytes.data[ix];
				}
			} else if (cur_req_num == REQ_READ_BITS) {
				uint16_t addr = (uint16_t)p->val.remote_addr;
 20c:	6e 01       	movw	r12, r28
 20e:	98 2f       	mov	r25, r24
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
 210:	35 96       	adiw	r30, 0x05	; 5
 212:	89 2f       	mov	r24, r25
 214:	ab cf       	rjmp	.-170    	; 0x16c <read_answer+0x3a>
				val |= rem_val;

				*((uint8_t*)((uint16_t)p->val.local_addr)) = val;
			}
		}
		status &= ~DATA_RECIVED;
 216:	b3 2d       	mov	r27, r3
 218:	bd 7f       	andi	r27, 0xFD	; 253
 21a:	3b 2e       	mov	r3, r27
 21c:	72 c0       	rjmp	.+228    	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
	} else {
		if (cur_req_num == REQ_READ_BYTES) {
 21e:	12 30       	cpi	r17, 0x02	; 2
 220:	99 f5       	brne	.+102    	; 0x288 <__EEPROM_REGION_LENGTH__+0x88>
 222:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <pbegin_data>
 226:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pbegin_data+0x1>
 22a:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <pend_data>
 22e:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <pend_data+0x1>
			while ((p = pbegin_data++) != pend_data) {
 232:	e9 2f       	mov	r30, r25
 234:	f8 2f       	mov	r31, r24
 236:	af 01       	movw	r20, r30
 238:	4b 5f       	subi	r20, 0xFB	; 251
 23a:	5f 4f       	sbci	r21, 0xFF	; 255
 23c:	e6 17       	cp	r30, r22
 23e:	f7 07       	cpc	r31, r23
 240:	f1 f0       	breq	.+60     	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
				if (p->unreachable_cnt > R_DATA_MAX_TRY) {
 242:	84 81       	ldd	r24, Z+4	; 0x04
 244:	86 30       	cpi	r24, 0x06	; 6
 246:	90 f0       	brcs	.+36     	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
					*((uint8_t*)((uint16_t)p->val.local_addr + p->val.bit_size)) = 0x00;
 248:	22 81       	ldd	r18, Z+2	; 0x02
 24a:	83 81       	ldd	r24, Z+3	; 0x03
 24c:	38 2f       	mov	r19, r24
 24e:	33 70       	andi	r19, 0x03	; 3
 250:	86 95       	lsr	r24
 252:	86 95       	lsr	r24
 254:	86 95       	lsr	r24
 256:	87 70       	andi	r24, 0x07	; 7
 258:	f9 01       	movw	r30, r18
 25a:	e8 0f       	add	r30, r24
 25c:	f1 1d       	adc	r31, r1
 25e:	10 82       	st	Z, r1
					info.com.rv_error_cnt++;
 260:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <info+0x3>
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <info+0x3>
 26a:	07 c0       	rjmp	.+14     	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
				} else {
					p->unreachable_cnt++;
 26c:	8f 5f       	subi	r24, 0xFF	; 255
 26e:	84 83       	std	Z+4, r24	; 0x04
					info.com.rv_error_all_cnt++;
 270:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <info+0x4>
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <info+0x4>
 27a:	fa 01       	movw	r30, r20
 27c:	dc cf       	rjmp	.-72     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 27e:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <pbegin_data+0x1>
 282:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <pbegin_data>
 286:	3d c0       	rjmp	.+122    	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
				}
			}
		} else if (cur_req_num == REQ_READ_BITS) {
 288:	13 30       	cpi	r17, 0x03	; 3
 28a:	d9 f5       	brne	.+118    	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
 28c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <pbegin_data>
 290:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pbegin_data+0x1>
 294:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <pend_data>
 298:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <pend_data+0x1>
			while ((p = pbegin_data++) != pend_data) {
 29c:	e9 2f       	mov	r30, r25
 29e:	f8 2f       	mov	r31, r24
				if (p->unreachable_cnt > R_DATA_MAX_TRY) {
					*((uint8_t*)((uint16_t)p->val.local_addr)) &= ~(2 << p->val.bit_size);
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	9f 01       	movw	r18, r30
 2a6:	2b 5f       	subi	r18, 0xFB	; 251
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
					p->unreachable_cnt++;
					info.com.rv_error_all_cnt++;
				}
			}
		} else if (cur_req_num == REQ_READ_BITS) {
			while ((p = pbegin_data++) != pend_data) {
 2aa:	e4 17       	cp	r30, r20
 2ac:	f5 07       	cpc	r31, r21
 2ae:	29 f1       	breq	.+74     	; 0x2fa <__EEPROM_REGION_LENGTH__+0xfa>
				if (p->unreachable_cnt > R_DATA_MAX_TRY) {
 2b0:	84 81       	ldd	r24, Z+4	; 0x04
 2b2:	86 30       	cpi	r24, 0x06	; 6
 2b4:	c8 f0       	brcs	.+50     	; 0x2e8 <__EEPROM_REGION_LENGTH__+0xe8>
					*((uint8_t*)((uint16_t)p->val.local_addr)) &= ~(2 << p->val.bit_size);
 2b6:	a2 81       	ldd	r26, Z+2	; 0x02
 2b8:	83 81       	ldd	r24, Z+3	; 0x03
 2ba:	b8 2f       	mov	r27, r24
 2bc:	b3 70       	andi	r27, 0x03	; 3
 2be:	86 95       	lsr	r24
 2c0:	86 95       	lsr	r24
 2c2:	86 95       	lsr	r24
 2c4:	87 70       	andi	r24, 0x07	; 7
 2c6:	fb 01       	movw	r30, r22
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <__EEPROM_REGION_LENGTH__+0xce>
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	8a 95       	dec	r24
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
 2d2:	cf 01       	movw	r24, r30
 2d4:	80 95       	com	r24
 2d6:	9c 91       	ld	r25, X
 2d8:	89 23       	and	r24, r25
 2da:	8c 93       	st	X, r24
					info.com.rv_error_cnt++;
 2dc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <info+0x3>
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <info+0x3>
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <__EEPROM_REGION_LENGTH__+0xf6>
				} else {
					p->unreachable_cnt++;
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	84 83       	std	Z+4, r24	; 0x04
					info.com.rv_error_all_cnt++;
 2ec:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <info+0x4>
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <info+0x4>
 2f6:	f9 01       	movw	r30, r18
 2f8:	d5 cf       	rjmp	.-86     	; 0x2a4 <__EEPROM_REGION_LENGTH__+0xa4>
 2fa:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <pbegin_data+0x1>
 2fe:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <pbegin_data>
				}
			}
		}
	}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	df 90       	pop	r13
 310:	cf 90       	pop	r12
 312:	bf 90       	pop	r11
 314:	af 90       	pop	r10
 316:	08 95       	ret

00000318 <timeout_for_answer>:
	}
}

static void timeout_for_answer(void) {
	// Защита от запаздалого ответа
	cli();
 318:	f8 94       	cli
	status &= ~MASTER_MODE;
 31a:	83 2d       	mov	r24, r3
 31c:	8b 7f       	andi	r24, 0xFB	; 251
 31e:	38 2e       	mov	r3, r24
	sei();
 320:	78 94       	sei

	M_OCR = IBBPC_40;
 322:	8a ea       	ldi	r24, 0xAA	; 170
 324:	83 bd       	out	0x23, r24	; 35
	ptf = &idle_40;
 326:	82 ed       	ldi	r24, 0xD2	; 210
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 32e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>

#ifdef PC_LINK
	if (transit_accepted) 
 332:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <transit_accepted>
 336:	88 23       	and	r24, r24
 338:	31 f0       	breq	.+12     	; 0x346 <timeout_for_answer+0x2e>
	{
		transit_timeout();
 33a:	21 d3       	rcall	.+1602   	; 0x97e <transit_timeout>
		transit_accepted = transit = 0;
 33c:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <transit>
 340:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <transit_accepted>
 344:	01 c0       	rjmp	.+2      	; 0x348 <timeout_for_answer+0x30>
	} 
	else
#endif
	{
		read_answer();
 346:	f5 de       	rcall	.-534    	; 0x132 <read_answer>
	}
	M_UCSRB = RX_ENABLED;
 348:	80 e9       	ldi	r24, 0x90	; 144
 34a:	8a b9       	out	0x0a, r24	; 10
 34c:	08 95       	ret

0000034e <answer_has_been_recived>:
}

static void answer_has_been_recived(void) {
	ptf = &idle_40;
 34e:	82 ed       	ldi	r24, 0xD2	; 210
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 356:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	status &= ~MASTER_MODE;
 35a:	83 2d       	mov	r24, r3
 35c:	8b 7f       	andi	r24, 0xFB	; 251
 35e:	38 2e       	mov	r3, r24
#ifdef PC_LINK
	if (transit_accepted) 
 360:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <transit_accepted>
 364:	88 23       	and	r24, r24
 366:	31 f0       	breq	.+12     	; 0x374 <answer_has_been_recived+0x26>
	{
		transit_answer();
 368:	fc d2       	rcall	.+1528   	; 0x962 <transit_answer>
		transit_accepted = transit = 0;
 36a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <transit>
 36e:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <transit_accepted>
 372:	01 c0       	rjmp	.+2      	; 0x376 <answer_has_been_recived+0x28>
	} 
	else
#endif
	{
		read_answer();
 374:	de de       	rcall	.-580    	; 0x132 <read_answer>
	}
	M_UCSRB = RX_ENABLED;
 376:	80 e9       	ldi	r24, 0x90	; 144
 378:	8a b9       	out	0x0a, r24	; 10
 37a:	08 95       	ret

0000037c <inc_ac>:
	ptf();
	//#endif // VIRTUAL
}

static uint8_t inc_ac(void) {
	ac = ac + 1;
 37c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <ac>
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <ac>
	//	if (ac > nomm) ac = 1; // этот счетчик очиститься автоматичеси после синхрофрейма
	if (ac == MY_ADDRESS) {
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	59 f4       	brne	.+22     	; 0x3a0 <inc_ac+0x24>
		//	M_OCR = IBBPC_3 - M_TCNT;
		ptf = &access_time;
 38a:	88 ef       	ldi	r24, 0xF8	; 248
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 392:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
		status |= HIGH_PRIORITY;
 396:	83 2d       	mov	r24, r3
 398:	80 61       	ori	r24, 0x10	; 16
 39a:	38 2e       	mov	r3, r24
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	08 95       	ret
		return 1;
	}
	return 0;
 3a0:	80 e0       	ldi	r24, 0x00	; 0
}
 3a2:	08 95       	ret

000003a4 <idle_40>:

static void idle_40(void) {
	ibbpc = 4;
 3a4:	84 e0       	ldi	r24, 0x04	; 4
 3a6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ibbpc>
	if (status & SYNC) {
 3aa:	30 fc       	sbrc	r3, 0
 3ac:	09 c0       	rjmp	.+18     	; 0x3c0 <idle_40+0x1c>
		if (inc_ac()) {
			return;
		}
	}
	M_OCR = IBBPC_10;
 3ae:	84 e6       	ldi	r24, 0x64	; 100
 3b0:	83 bd       	out	0x23, r24	; 35
	ptf = idle_10;
 3b2:	84 ee       	ldi	r24, 0xE4	; 228
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 3ba:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
 3be:	08 95       	ret
}

static void idle_40(void) {
	ibbpc = 4;
	if (status & SYNC) {
		if (inc_ac()) {
 3c0:	dd df       	rcall	.-70     	; 0x37c <inc_ac>
 3c2:	88 23       	and	r24, r24
 3c4:	a1 f3       	breq	.-24     	; 0x3ae <idle_40+0xa>
 3c6:	08 95       	ret

000003c8 <idle_10>:
	M_OCR = IBBPC_10;
	ptf = idle_10;
}

static void idle_10(void) {
	ibbpc++;
 3c8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <ibbpc>
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ibbpc>
	if (ibbpc >= 50) {
 3d2:	82 33       	cpi	r24, 0x32	; 50
 3d4:	50 f4       	brcc	.+20     	; 0x3ea <idle_10+0x22>
		//		PORTC ^= (1 << PC5);
#endif
		send_sync_frame();
		return;
	}
	if (status & SYNC) {
 3d6:	30 fe       	sbrs	r3, 0
 3d8:	0a c0       	rjmp	.+20     	; 0x3ee <idle_10+0x26>
		if ((status & LAST_MASTER) && (ibbpc >= 36)) {
 3da:	33 fe       	sbrs	r3, 3
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <idle_10+0x24>
 3de:	84 32       	cpi	r24, 0x24	; 36
 3e0:	28 f0       	brcs	.+10     	; 0x3ec <idle_10+0x24>
#ifdef MARKER_DEBUG
			LED_PORT ^= (1 << MARKER_LED);
 3e2:	95 b3       	in	r25, 0x15	; 21
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	89 27       	eor	r24, r25
 3e8:	85 bb       	out	0x15, r24	; 21
#endif
			send_sync_frame();
 3ea:	8f ce       	rjmp	.-738    	; 0x10a <send_sync_frame>
		} else {
			inc_ac();
 3ec:	c7 cf       	rjmp	.-114    	; 0x37c <inc_ac>
 3ee:	08 95       	ret

000003f0 <access_time>:
#ifdef DEBUG_CMD
	//	MAKE_DEBUG_CMD(MY_ADDRESS, 0);
#endif // DEBUG_CMD
	uint8_t result;
#ifdef PC_LINK
	if (transit)
 3f0:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <transit>
 3f4:	22 23       	and	r18, r18
 3f6:	29 f0       	breq	.+10     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
	{
		transit_send();
 3f8:	ac d2       	rcall	.+1368   	; 0x952 <transit_send>
		transit_accepted = 0x01;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <transit_accepted>
 400:	98 c0       	rjmp	.+304    	; 0x532 <__stack+0xd3>
	} 
	else
#endif
	{
#ifdef PC_LINK
		transit_accepted = 0x00;
 402:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <transit_accepted>
	uint16_t pr_addr;
	uint8_t* ptr;
	uint8_t marker;

	// If there are no remote data
	if (!rdata[0].val.device_addr || r_data_cnt) return 0;
 406:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <rdata+0x1>
 40a:	28 7f       	andi	r18, 0xF8	; 248
 40c:	09 f4       	brne	.+2      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 40e:	9e c0       	rjmp	.+316    	; 0x54c <__stack+0xed>
 410:	20 91 db 00 	lds	r18, 0x00DB	; 0x8000db <r_data_cnt>
 414:	21 11       	cpse	r18, r1
 416:	9a c0       	rjmp	.+308    	; 0x54c <__stack+0xed>

	if (pend_data != rdata && (pend_data - 1)->val.marker == M_ARRAY_END) {
 418:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <pend_data>
 41c:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <pend_data+0x1>
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	27 37       	cpi	r18, 0x77	; 119
 424:	34 07       	cpc	r19, r20
 426:	61 f0       	breq	.+24     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 428:	f9 01       	movw	r30, r18
 42a:	35 97       	sbiw	r30, 0x05	; 5
 42c:	23 81       	ldd	r18, Z+3	; 0x03
 42e:	20 7c       	andi	r18, 0xC0	; 192
 430:	20 34       	cpi	r18, 0x40	; 64
 432:	31 f4       	brne	.+12     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
		pend_data = rdata;
 434:	27 e7       	ldi	r18, 0x77	; 119
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <pend_data+0x1>
 43c:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <pend_data>
	}

	pbegin_data = pend_data;
 440:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <pend_data>
 444:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <pend_data+0x1>
 448:	f0 93 71 00 	sts	0x0071, r31	; 0x800071 <pbegin_data+0x1>
 44c:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <pbegin_data>

	frame.h.sl_addr = pend_data->val.device_addr;
 450:	21 81       	ldd	r18, Z+1	; 0x01
 452:	26 95       	lsr	r18
 454:	26 95       	lsr	r18
 456:	26 95       	lsr	r18
 458:	20 93 dd 00 	sts	0x00DD, r18	; 0x8000dd <frame>
	frame.h.m_addr = MY_ADDRESS;
 45c:	22 e0       	ldi	r18, 0x02	; 2
 45e:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <frame+0x1>
	cur_req_num = frame.h.fun_num = (pend_data->val.data_rw_type << 1) | pend_data->val.is_bit;
 462:	23 81       	ldd	r18, Z+3	; 0x03
 464:	22 fb       	bst	r18, 2
 466:	88 27       	eor	r24, r24
 468:	80 f9       	bld	r24, 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	91 81       	ldd	r25, Z+1	; 0x01
 472:	92 fb       	bst	r25, 2
 474:	99 27       	eor	r25, r25
 476:	90 f9       	bld	r25, 0
 478:	89 2b       	or	r24, r25
 47a:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <frame+0x2>
 47e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <cur_req_num>

	if (cur_req_num == REQ_READ_BYTES || cur_req_num == REQ_READ_BITS) {
 482:	9e ef       	ldi	r25, 0xFE	; 254
 484:	98 0f       	add	r25, r24
 486:	92 30       	cpi	r25, 0x02	; 2
 488:	50 f4       	brcc	.+20     	; 0x49e <__stack+0x3f>
		pr_addr = 0xffff;
		frame.r_read_bytes.addr_begin = pend_data->val.remote_addr;
 48a:	20 81       	ld	r18, Z
 48c:	91 81       	ldd	r25, Z+1	; 0x01
 48e:	93 70       	andi	r25, 0x03	; 3
 490:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <frame+0x5>
 494:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <frame+0x6>
		frame.r_read_bytes.nbytes = 0;
 498:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <frame+0x4>
 49c:	0b c0       	rjmp	.+22     	; 0x4b4 <__stack+0x55>
		ptr = (uint8_t*)&frame.r_read_bytes.crc;
	} else if (cur_req_num == REQ_WRITE_BYTES) {
 49e:	81 11       	cpse	r24, r1
 4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <__stack+0x55>
		frame.r_write_bytes.len = 0;
 4a2:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <frame+0x4>
		frame.r_write_bytes.addr = pend_data->val.remote_addr;
 4a6:	20 81       	ld	r18, Z
 4a8:	91 81       	ldd	r25, Z+1	; 0x01
 4aa:	93 70       	andi	r25, 0x03	; 3
 4ac:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <frame+0x5>
 4b0:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <frame+0x6>
	GICR = (1 << INT0);
	M_UCSRB = RX_ENABLED;
}


static void access_time(void) {
 4b4:	4f ef       	ldi	r20, 0xFF	; 255
 4b6:	5f ef       	ldi	r21, 0xFF	; 255
		frame.r_write_bytes.addr = pend_data->val.remote_addr;
	}

	do {
		size = pend_data->val.bit_size;
		if (cur_req_num == REQ_READ_BYTES) {
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	69 f4       	brne	.+26     	; 0x4d6 <__stack+0x77>
			frame.r_read_bytes.nbytes += size + 1;
 4bc:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <frame+0x4>
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	29 0f       	add	r18, r25
		frame.r_write_bytes.len = 0;
		frame.r_write_bytes.addr = pend_data->val.remote_addr;
	}

	do {
		size = pend_data->val.bit_size;
 4c4:	93 81       	ldd	r25, Z+3	; 0x03
 4c6:	96 95       	lsr	r25
 4c8:	96 95       	lsr	r25
 4ca:	96 95       	lsr	r25
 4cc:	97 70       	andi	r25, 0x07	; 7
		if (cur_req_num == REQ_READ_BYTES) {
			frame.r_read_bytes.nbytes += size + 1;
 4ce:	92 0f       	add	r25, r18
 4d0:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <frame+0x4>
 4d4:	0f c0       	rjmp	.+30     	; 0x4f4 <__stack+0x95>
		} else if (cur_req_num == REQ_READ_BITS) {
 4d6:	83 30       	cpi	r24, 0x03	; 3
 4d8:	69 f4       	brne	.+26     	; 0x4f4 <__stack+0x95>
			uint16_t addr = pend_data->val.remote_addr;
 4da:	20 81       	ld	r18, Z
 4dc:	91 81       	ldd	r25, Z+1	; 0x01
 4de:	39 2f       	mov	r19, r25
 4e0:	33 70       	andi	r19, 0x03	; 3
			if (pr_addr != addr) {
 4e2:	24 17       	cp	r18, r20
 4e4:	35 07       	cpc	r19, r21
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <__stack+0x95>
				pr_addr = addr;
				frame.r_read_bits.nbytes += 1;
 4e8:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <frame+0x4>
 4ec:	9f 5f       	subi	r25, 0xFF	; 255
 4ee:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <frame+0x4>
 4f2:	a9 01       	movw	r20, r18
		//		(*ptr++) = *((uint8_t*)pend_data->val.local_addr) & (1 << pend_data->val.size) ? 0xFF : 0;
		//		(*ptr++) = *((uint8_t*)(pend_data->val.local_addr + 1)) & (1 << pend_data->val.size) ? 0xFF : 0; // status
		//		req_size = req_size + 1;
		//		break;
		//	}
	} while (!(marker = (pend_data++)->val.marker & (M_ARRAY_END | M_LAST_DATA_IN_REQUEST)));
 4f4:	93 81       	ldd	r25, Z+3	; 0x03
 4f6:	92 95       	swap	r25
 4f8:	96 95       	lsr	r25
 4fa:	96 95       	lsr	r25
 4fc:	93 70       	andi	r25, 0x03	; 3
 4fe:	35 96       	adiw	r30, 0x05	; 5
 500:	99 23       	and	r25, r25
 502:	d1 f2       	breq	.-76     	; 0x4b8 <__stack+0x59>
 504:	f0 93 6f 00 	sts	0x006F, r31	; 0x80006f <pend_data+0x1>
 508:	e0 93 6e 00 	sts	0x006E, r30	; 0x80006e <pend_data>

	if (marker == M_ARRAY_END) r_data_cnt = R_DATA_PERIOD;
 50c:	91 30       	cpi	r25, 0x01	; 1
 50e:	19 f4       	brne	.+6      	; 0x516 <__stack+0xb7>
 510:	8a e0       	ldi	r24, 0x0A	; 10
 512:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <r_data_cnt>

	frame.h.len = (void*)ptr - (void*)&frame + 2;
 516:	8d ed       	ldi	r24, 0xDD	; 221
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	64 ee       	ldi	r22, 0xE4	; 228
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	6e 5f       	subi	r22, 0xFE	; 254
 520:	68 1b       	sub	r22, r24
 522:	60 93 e0 00 	sts	0x00E0, r22	; 0x8000e0 <frame+0x3>
	*((uint16_t*)ptr) = get_crc((void*)&frame, frame.h.len - 2);
 526:	62 50       	subi	r22, 0x02	; 2
 528:	9e dd       	rcall	.-1220   	; 0x66 <get_crc>
 52a:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <frame+0x8>
 52e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <frame+0x7>
		transit_accepted = 0x00;
#endif
		result = send_request();
	}
	if (result) {
		M_OCR = IBBPC_30;
 532:	8c e8       	ldi	r24, 0x8C	; 140
 534:	83 bd       	out	0x23, r24	; 35
		ptf = &timeout_for_answer;
 536:	8c e8       	ldi	r24, 0x8C	; 140
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 53e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
		status |= MASTER_MODE | LAST_MASTER;
		status &= ~DATA_RECIVED;
 542:	83 2d       	mov	r24, r3
 544:	8d 7f       	andi	r24, 0xFD	; 253
 546:	8c 60       	ori	r24, 0x0C	; 12
 548:	38 2e       	mov	r3, r24
		start_transmit();
 54a:	ad cd       	rjmp	.-1190   	; 0xa6 <start_transmit>
	} else {
		M_OCR = IBBPC_10;
 54c:	84 e6       	ldi	r24, 0x64	; 100
 54e:	83 bd       	out	0x23, r24	; 35
		//	M_TCNT = IBBPC_3;
		ptf = &idle_10;
 550:	84 ee       	ldi	r24, 0xE4	; 228
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 558:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
 55c:	08 95       	ret

0000055e <net_init>:
#endif
*/

void net_init(void) {
#ifdef PC_LINK_VIRTUAL
	* (uint8_t*)(0x60) = 0x1A;
 55e:	8a e1       	ldi	r24, 0x1A	; 26
 560:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fe060>
#endif // PC_LINK_VIRTUAL


	// LEDs config
	LED_DDR |= (1 << WORK_LED) | (1 << MARKER_LED);
 564:	84 b3       	in	r24, 0x14	; 20
 566:	86 60       	ori	r24, 0x06	; 6
 568:	84 bb       	out	0x14, r24	; 20

	pbegin_data = pend_data = rdata;
 56a:	87 e7       	ldi	r24, 0x77	; 119
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <pend_data+0x1>
 572:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <pend_data>
 576:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <pbegin_data+0x1>
 57a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <pbegin_data>

	status = IDLE;
 57e:	31 2c       	mov	r3, r1
	ibbpc_ev = 0;
 580:	21 2c       	mov	r2, r1

	ptf = &idle_40;
 582:	82 ed       	ldi	r24, 0xD2	; 210
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 58a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	M_OCR = IBBPC_40; // 17.3611111 us - one bit time
 58e:	8a ea       	ldi	r24, 0xAA	; 170
 590:	83 bd       	out	0x23, r24	; 35
	M_TCNT = 0;
 592:	14 bc       	out	0x24, r1	; 36

	// Init UART
	// PD0 - RX, PD1 - TX, PD2 - SL, PD3 - DIR
	pCurBufPtr = (void*)&frame;
 594:	8d ed       	ldi	r24, 0xDD	; 221
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <pCurBufPtr+0x1>
 59c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <pCurBufPtr>
	TX_RX_CTRL_DDR |= (1 << TX_RX_CTRL_PIN);
 5a0:	8b 9a       	sbi	0x11, 3	; 17
	TX_RX_CTRL_DDR |= (1 << PD1);
 5a2:	89 9a       	sbi	0x11, 1	; 17
	TX_RX_CTRL_DDR &= ~(1 << PD2);
 5a4:	8a 98       	cbi	0x11, 2	; 17
	M_UBRRL = lo8(UBRR_VALUE);
 5a6:	8c e0       	ldi	r24, 0x0C	; 12
 5a8:	89 b9       	out	0x09, r24	; 9
	M_UBRRH = hi8(UBRR_VALUE);
 5aa:	10 bc       	out	0x20, r1	; 32
	M_UCSRA = 0;
 5ac:	1b b8       	out	0x0b, r1	; 11
	// 1 - stop bit, parity - even, frame length 8 - bit.
	M_UCSRC = UCSRC_VALUE;
 5ae:	96 ea       	ldi	r25, 0xA6	; 166
 5b0:	90 bd       	out	0x20, r25	; 32
	M_UCSRB = RX_ENABLED;
 5b2:	90 e9       	ldi	r25, 0x90	; 144
 5b4:	9a b9       	out	0x0a, r25	; 10
	// External interrupt

	// Нужно захватывать именно начало байта т.к. прерывание по приему байта будет с опозданием.
	MCUCR = (1 << ISC00); //Any logical change on INT0 generates an interrupt request
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	95 bf       	out	0x35, r25	; 53
//	MCUCR = (1 << ISC00) | (1 << ISC01); //The rising edge of INT0 generates an interrupt request
	GIFR = (1 << INTF0);
 5ba:	90 e4       	ldi	r25, 0x40	; 64
 5bc:	9a bf       	out	0x3a, r25	; 58
	GICR = (1 << INT0);
 5be:	9b bf       	out	0x3b, r25	; 59
	// Timer 2
	M_TCCR = TIMER_ON;
 5c0:	85 bd       	out	0x25, r24	; 37
	M_TIMSK |= ALLOW_TIMER_INT;
 5c2:	89 b7       	in	r24, 0x39	; 57
 5c4:	80 68       	ori	r24, 0x80	; 128
 5c6:	89 bf       	out	0x39, r24	; 57
 5c8:	08 95       	ret

000005ca <net_poll>:
				start_transmit();
			}
			v_busy = 0x00;
		} */
		//#else
	if (status & DATA_RECIVED) {
 5ca:	93 2d       	mov	r25, r3
 5cc:	31 fe       	sbrs	r3, 1
 5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <net_poll+0x16>
		if (ibbpc_ev >= 1) {
 5d0:	22 20       	and	r2, r2
 5d2:	01 f1       	breq	.+64     	; 0x614 <net_poll+0x4a>
			info.com.e_slave_timeout++;
 5d4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <info+0x2>
 5d8:	8f 5f       	subi	r24, 0xFF	; 255
 5da:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <info+0x2>
 5de:	1a c0       	rjmp	.+52     	; 0x614 <net_poll+0x4a>
		}
		goto call_fun;
	}

	if (!ibbpc_ev) return;
 5e0:	82 2d       	mov	r24, r2
 5e2:	22 20       	and	r2, r2
 5e4:	f1 f0       	breq	.+60     	; 0x622 <net_poll+0x58>

	if (ibbpc_ev > 1) {
 5e6:	82 30       	cpi	r24, 0x02	; 2
 5e8:	a0 f0       	brcs	.+40     	; 0x612 <net_poll+0x48>
		// Выход из синхронизированного состояния
		info.com.synclost++;
 5ea:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <info+0x1>
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <info+0x1>
		M_OCR = IBBPC_40;
 5f4:	8a ea       	ldi	r24, 0xAA	; 170
 5f6:	83 bd       	out	0x23, r24	; 35
		ptf = idle_40;
 5f8:	82 ed       	ldi	r24, 0xD2	; 210
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 600:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
		M_UCSRB = RX_ENABLED;
 604:	80 e9       	ldi	r24, 0x90	; 144
 606:	8a b9       	out	0x0a, r24	; 10
		status &= ~SYNC;
		ibbpc_ev = 0;
 608:	21 2c       	mov	r2, r1
#ifdef PC_LINK
		//	transit = 0x00;
#endif
		status &= ~HIGH_PRIORITY;
 60a:	83 2d       	mov	r24, r3
 60c:	8e 7e       	andi	r24, 0xEE	; 238
 60e:	38 2e       	mov	r3, r24
		return;
 610:	08 95       	ret
	}
	ibbpc_ev = 0;
 612:	21 2c       	mov	r2, r1
call_fun:
	status &= ~HIGH_PRIORITY;
 614:	9f 7e       	andi	r25, 0xEF	; 239
 616:	39 2e       	mov	r3, r25
	ptf();
 618:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <ptf>
 61c:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <ptf+0x1>
 620:	09 94       	ijmp
 622:	08 95       	ret

00000624 <__vector_11>:

	M_UDR = (*pCurBufPtr);
}

/* USART, Rx Complete */
ISR(RX_ISR) {
 624:	1f 92       	push	r1
 626:	0f 92       	push	r0
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	0f 92       	push	r0
 62c:	11 24       	eor	r1, r1
 62e:	2f 93       	push	r18
 630:	3f 93       	push	r19
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31
	uint8_t tmp;
	tmp = M_UDR;
 63a:	9c b1       	in	r25, 0x0c	; 12
	//	if (M_UCSRA & (1 << PE))
	//		return;	
	if (rx_len >= MAX_FRAME_LEN) return;
 63c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <rx_len>
 640:	88 38       	cpi	r24, 0x88	; 136
 642:	78 f4       	brcc	.+30     	; 0x662 <__vector_11+0x3e>
	rx_len = rx_len + 1;
 644:	8f 5f       	subi	r24, 0xFF	; 255
 646:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <rx_len>
	(*pCurBufPtr++) = tmp;
 64a:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pCurBufPtr>
 64e:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pCurBufPtr+0x1>
 652:	9f 01       	movw	r18, r30
 654:	2f 5f       	subi	r18, 0xFF	; 255
 656:	3f 4f       	sbci	r19, 0xFF	; 255
 658:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <pCurBufPtr+0x1>
 65c:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <pCurBufPtr>
 660:	90 83       	st	Z, r25
}
 662:	ff 91       	pop	r31
 664:	ef 91       	pop	r30
 666:	9f 91       	pop	r25
 668:	8f 91       	pop	r24
 66a:	3f 91       	pop	r19
 66c:	2f 91       	pop	r18
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <__vector_13>:

/* USART, Tx Completed */
ISR(TX_ISR) {
 678:	1f 92       	push	r1
 67a:	0f 92       	push	r0
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	0f 92       	push	r0
 680:	11 24       	eor	r1, r1
 682:	8f 93       	push	r24
 684:	9f 93       	push	r25
 686:	ef 93       	push	r30
 688:	ff 93       	push	r31
	tx_count = tx_count - 1;
 68a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tx_count>
 68e:	81 50       	subi	r24, 0x01	; 1
 690:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tx_count>
	if (tx_count) {
 694:	88 23       	and	r24, r24
 696:	69 f0       	breq	.+26     	; 0x6b2 <__vector_13+0x3a>
		M_UDR = *(++pCurBufPtr);
 698:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pCurBufPtr>
 69c:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pCurBufPtr+0x1>
 6a0:	cf 01       	movw	r24, r30
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <pCurBufPtr+0x1>
 6a8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <pCurBufPtr>
 6ac:	81 81       	ldd	r24, Z+1	; 0x01
 6ae:	8c b9       	out	0x0c, r24	; 12
 6b0:	0b c0       	rjmp	.+22     	; 0x6c8 <__vector_13+0x50>
#ifdef DEBUG_CMD
		if (frame.h.len > 1) {
			//			MAKE_DEBUG_CMD(MY_ADDRESS, 2);
		}
#endif // DEBUG_CMD
		MAX485_IN();
 6b2:	93 98       	cbi	0x12, 3	; 18
		M_TCCR = TIMER_ON;
 6b4:	8c e0       	ldi	r24, 0x0C	; 12
 6b6:	85 bd       	out	0x25, r24	; 37
		rx_len = 0;
 6b8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <rx_len>
		pCurBufPtr = (void*)&frame;
 6bc:	8d ed       	ldi	r24, 0xDD	; 221
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <pCurBufPtr+0x1>
 6c4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <pCurBufPtr>
	}
}
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <__vector_1>:

/* External Interrupt Request 0 */
/* Falling edge - bus has been captured */
/* Rising edge - signal loss */
ISR(INT0_vect) {
 6da:	1f 92       	push	r1
 6dc:	0f 92       	push	r0
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	0f 92       	push	r0
 6e2:	11 24       	eor	r1, r1
 6e4:	2f 93       	push	r18
 6e6:	3f 93       	push	r19
 6e8:	4f 93       	push	r20
 6ea:	5f 93       	push	r21
 6ec:	6f 93       	push	r22
 6ee:	7f 93       	push	r23
 6f0:	8f 93       	push	r24
 6f2:	9f 93       	push	r25
 6f4:	af 93       	push	r26
 6f6:	bf 93       	push	r27
 6f8:	ef 93       	push	r30
 6fa:	ff 93       	push	r31
	// bus has been captured
	if (!(PIND & (1 << PD2))) {
 6fc:	82 99       	sbic	0x10, 2	; 16
 6fe:	0a c0       	rjmp	.+20     	; 0x714 <__vector_1+0x3a>
		ibbpc_ev = 0;
 700:	21 2c       	mov	r2, r1
		M_TCCR = TIMER_OFF;
 702:	15 bc       	out	0x25, r1	; 37
		M_TCNT = 0;
 704:	14 bc       	out	0x24, r1	; 36
		M_TIFR |= 1 << M_OCF;
 706:	88 b7       	in	r24, 0x38	; 56
 708:	80 68       	ori	r24, 0x80	; 128
 70a:	88 bf       	out	0x38, r24	; 56
		status &= ~DATA_RECIVED;
 70c:	83 2d       	mov	r24, r3
 70e:	8d 7f       	andi	r24, 0xFD	; 253
 710:	38 2e       	mov	r3, r24
		return;
 712:	6a c0       	rjmp	.+212    	; 0x7e8 <__vector_1+0x10e>
	}

	// signal loss
	M_UCSRB = 0;
 714:	1a b8       	out	0x0a, r1	; 10
	M_OCR = IBBPC_40;
 716:	8a ea       	ldi	r24, 0xAA	; 170
 718:	83 bd       	out	0x23, r24	; 35
	M_TCCR = TIMER_ON;
 71a:	8c e0       	ldi	r24, 0x0C	; 12
 71c:	85 bd       	out	0x25, r24	; 37
	ptf = &idle_40;
 71e:	82 ed       	ldi	r24, 0xD2	; 210
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 726:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>

	// Возможно, одно из устройств передало синхронизирующий фрейм
	if (rx_len == 1 && *((uint8_t*)&frame) & 0x80) {
 72a:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <rx_len>
 72e:	61 30       	cpi	r22, 0x01	; 1
 730:	79 f4       	brne	.+30     	; 0x750 <__vector_1+0x76>
 732:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <frame>
 736:	87 ff       	sbrs	r24, 7
 738:	4d c0       	rjmp	.+154    	; 0x7d4 <__vector_1+0xfa>
		// Синхронизируемся...
		ac = 0;
 73a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <ac>
		status &= ~(LAST_MASTER | MASTER_MODE);
		status |= SYNC;
 73e:	83 2d       	mov	r24, r3
 740:	83 7f       	andi	r24, 0xF3	; 243
 742:	81 60       	ori	r24, 0x01	; 1
 744:	38 2e       	mov	r3, r24
#ifdef MARKER_DEBUG
		LED_PORT ^= (1 << MARKER_LED);
 746:	95 b3       	in	r25, 0x15	; 21
 748:	84 e0       	ldi	r24, 0x04	; 4
 74a:	89 27       	eor	r24, r25
 74c:	85 bb       	out	0x15, r24	; 21
 74e:	42 c0       	rjmp	.+132    	; 0x7d4 <__vector_1+0xfa>
#endif
	}
#ifdef DEBUG_CMD
	//		MAKE_DEBUG_CMD(MY_ADDRESS, 1);
#endif // DEBUG_CMD
	else if (rx_len < 4) {
 750:	64 30       	cpi	r22, 0x04	; 4
 752:	08 f4       	brcc	.+2      	; 0x756 <__vector_1+0x7c>
 754:	3f c0       	rjmp	.+126    	; 0x7d4 <__vector_1+0xfa>
	}
#ifdef PC_LINK
	else if (transit_accepted && (status & MASTER_MODE))
 756:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <transit_accepted>
 75a:	88 23       	and	r24, r24
 75c:	21 f0       	breq	.+8      	; 0x766 <__vector_1+0x8c>
 75e:	32 fe       	sbrs	r3, 2
 760:	02 c0       	rjmp	.+4      	; 0x766 <__vector_1+0x8c>
	{
		ibbpc_ev++;
 762:	23 94       	inc	r2
 764:	1a c0       	rjmp	.+52     	; 0x79a <__vector_1+0xc0>
		ptf = &answer_has_been_recived;
		goto Rx_set;
	}
#endif
	else if (get_crc((void*)&frame, rx_len - 2) == *((uint16_t*)(pCurBufPtr - 2))) {
 766:	62 50       	subi	r22, 0x02	; 2
 768:	8d ed       	ldi	r24, 0xDD	; 221
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	7c dc       	rcall	.-1800   	; 0x66 <get_crc>
 76e:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pCurBufPtr>
 772:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pCurBufPtr+0x1>
 776:	32 97       	sbiw	r30, 0x02	; 2
 778:	20 81       	ld	r18, Z
 77a:	31 81       	ldd	r19, Z+1	; 0x01
 77c:	82 17       	cp	r24, r18
 77e:	93 07       	cpc	r25, r19
 780:	49 f5       	brne	.+82     	; 0x7d4 <__vector_1+0xfa>
		// Синхронизируемся каждый раз
		status |= SYNC;
 782:	83 2d       	mov	r24, r3
 784:	93 2d       	mov	r25, r3
 786:	91 60       	ori	r25, 0x01	; 1
 788:	39 2e       	mov	r3, r25
 78a:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <frame+0x1>
		// Если устройство - мастер ставим флаг "данные получены", выходим
		if (status & MASTER_MODE && frame.h.m_addr == MY_ADDRESS) {
 78e:	82 ff       	sbrs	r24, 2
 790:	0b c0       	rjmp	.+22     	; 0x7a8 <__vector_1+0xce>
 792:	92 30       	cpi	r25, 0x02	; 2
 794:	49 f4       	brne	.+18     	; 0x7a8 <__vector_1+0xce>
			status |= DATA_RECIVED;
 796:	83 60       	ori	r24, 0x03	; 3
 798:	38 2e       	mov	r3, r24
			ptf = &answer_has_been_recived;
 79a:	87 ea       	ldi	r24, 0xA7	; 167
 79c:	91 e0       	ldi	r25, 0x01	; 1
 79e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 7a2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
			goto Rx_set;
 7a6:	18 c0       	rjmp	.+48     	; 0x7d8 <__vector_1+0xfe>
		} else {
			ac = frame.h.m_addr;
 7a8:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <ac>
 7ac:	87 7f       	andi	r24, 0xF7	; 247
			// устанавливаем счетчик
			// если устройство не участвует в обмене он установаиться 2 раза
			// если адресуемое устройство ответит
		}
		// Если устройство не мастер сброс флага предыдущего мастера
		status &= ~LAST_MASTER;
 7ae:	98 2f       	mov	r25, r24
 7b0:	91 60       	ori	r25, 0x01	; 1
 7b2:	39 2e       	mov	r3, r25
		if (frame.h.sl_addr == MY_ADDRESS) {
 7b4:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <frame>
 7b8:	92 30       	cpi	r25, 0x02	; 2
 7ba:	61 f4       	brne	.+24     	; 0x7d4 <__vector_1+0xfa>
			//	{
			//		ibbpc_ev = 1;
			//	} else {
			//		M_OCR = IBBPC_8 - M_TCNT;
			//	}
			status |= HIGH_PRIORITY;
 7bc:	81 61       	ori	r24, 0x11	; 17
 7be:	38 2e       	mov	r3, r24
#ifdef DEBUG_CMD
			//				MAKE_DEBUG_CMD_0060(MY_ADDRESS, M_TCNT);
#endif // DEBUG_CMD
			ptf = &send_answer;
 7c0:	8a e9       	ldi	r24, 0x9A	; 154
 7c2:	94 e0       	ldi	r25, 0x04	; 4
 7c4:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 7c8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
			M_TCNT = 0; // new
 7cc:	14 bc       	out	0x24, r1	; 36
			M_OCR = IBBPC_8;
 7ce:	83 e2       	ldi	r24, 0x23	; 35
 7d0:	83 bd       	out	0x23, r24	; 35
			goto Rx_set;
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <__vector_1+0xfe>
		}
	} else {
		// bad crc received. do nothing
	}
	M_UCSRB = RX_ENABLED;
 7d4:	80 e9       	ldi	r24, 0x90	; 144
 7d6:	8a b9       	out	0x0a, r24	; 10
Rx_set:
	rx_len = 0;
 7d8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <rx_len>
	pCurBufPtr = (void*)&frame;
 7dc:	8d ed       	ldi	r24, 0xDD	; 221
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <pCurBufPtr+0x1>
 7e4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <pCurBufPtr>
}
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	bf 91       	pop	r27
 7ee:	af 91       	pop	r26
 7f0:	9f 91       	pop	r25
 7f2:	8f 91       	pop	r24
 7f4:	7f 91       	pop	r23
 7f6:	6f 91       	pop	r22
 7f8:	5f 91       	pop	r21
 7fa:	4f 91       	pop	r20
 7fc:	3f 91       	pop	r19
 7fe:	2f 91       	pop	r18
 800:	0f 90       	pop	r0
 802:	0f be       	out	0x3f, r0	; 63
 804:	0f 90       	pop	r0
 806:	1f 90       	pop	r1
 808:	18 95       	reti

0000080a <prepare_answer>:

	return 1;
}

/* Slave mode */
uint8_t prepare_answer(void) {
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	Frame* udp_frame = (void*)udp->data;
#	endif
#endif
	switch (frame.h.fun_num) {
 80e:	c0 91 df 00 	lds	r28, 0x00DF	; 0x8000df <frame+0x2>
 812:	c4 30       	cpi	r28, 0x04	; 4
 814:	58 f4       	brcc	.+22     	; 0x82c <prepare_answer+0x22>
 816:	c2 30       	cpi	r28, 0x02	; 2
 818:	08 f0       	brcs	.+2      	; 0x81c <prepare_answer+0x12>
 81a:	57 c0       	rjmp	.+174    	; 0x8ca <prepare_answer+0xc0>
 81c:	cc 23       	and	r28, r28
 81e:	29 f1       	breq	.+74     	; 0x86a <prepare_answer+0x60>
 820:	c1 30       	cpi	r28, 0x01	; 1
 822:	09 f0       	breq	.+2      	; 0x826 <prepare_answer+0x1c>
 824:	82 c0       	rjmp	.+260    	; 0x92a <prepare_answer+0x120>
 826:	20 e0       	ldi	r18, 0x00	; 0
	case REQ_WRITE_BITS: {
		// | bit_addr | bit_mask | bit_value | bit_status |
		for (uint8_t i = 0; i < frame.r_write_bits.nbits; ++i) {
			uint8_t val = *((uint8_t*)frame.r_write_bits.data->bit_addr);

			val &= frame.r_write_bits.data[i].bit_mask;
 828:	35 e0       	ldi	r19, 0x05	; 5
 82a:	2a c0       	rjmp	.+84     	; 0x880 <prepare_answer+0x76>
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	Frame* udp_frame = (void*)udp->data;
#	endif
#endif
	switch (frame.h.fun_num) {
 82c:	c9 30       	cpi	r28, 0x09	; 9
 82e:	09 f4       	brne	.+2      	; 0x832 <prepare_answer+0x28>
 830:	67 c0       	rjmp	.+206    	; 0x900 <prepare_answer+0xf6>
 832:	c2 38       	cpi	r28, 0x82	; 130
 834:	09 f0       	breq	.+2      	; 0x838 <prepare_answer+0x2e>
 836:	79 c0       	rjmp	.+242    	; 0x92a <prepare_answer+0x120>
	}
#endif
#ifdef PC_LINK
	case F_NOT_TRANSIT | 0x02: {
		void* begin_addr = (void*)udp_frame->r_read_bytes.addr_begin;
		memcpy(udp_frame->a_read_bytes.data, begin_addr, udp_frame->r_read_bytes.nbytes);
 838:	d0 91 6d 01 	lds	r29, 0x016D	; 0x80016d <v_buffer+0x4>
 83c:	4d 2f       	mov	r20, r29
 83e:	50 e0       	ldi	r21, 0x00	; 0
 840:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <v_buffer+0x5>
 844:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <v_buffer+0x6>
 848:	8e e6       	ldi	r24, 0x6E	; 110
 84a:	91 e0       	ldi	r25, 0x01	; 1
 84c:	bc d0       	rcall	.+376    	; 0x9c6 <memcpy>
		udp_frame->h.len = sizeof(frame_h) + sizeof(ans_read_bytes) + udp_frame->r_read_bytes.nbytes + 2;
 84e:	c7 e0       	ldi	r28, 0x07	; 7
 850:	cd 0f       	add	r28, r29
 852:	c0 93 6c 01 	sts	0x016C, r28	; 0x80016c <v_buffer+0x3>
		get_crc((void*)&frame, frame.h.len - 2);
	return IMMEDIATE_ANSWER;
#ifdef PC_LINK
_crc_for_udp :
	*((uint16_t*)((uint8_t*)udp_frame + udp_frame->h.len - 2)) =
		get_crc((void*)udp_frame, udp_frame->h.len - 2);
 856:	65 e0       	ldi	r22, 0x05	; 5
 858:	6d 0f       	add	r22, r29
 85a:	89 e6       	ldi	r24, 0x69	; 105
 85c:	91 e0       	ldi	r25, 0x01	; 1
 85e:	03 dc       	rcall	.-2042   	; 0x66 <get_crc>
	*((uint16_t*)((uint8_t*)&frame + frame.h.len - 2)) =
		get_crc((void*)&frame, frame.h.len - 2);
	return IMMEDIATE_ANSWER;
#ifdef PC_LINK
_crc_for_udp :
	*((uint16_t*)((uint8_t*)udp_frame + udp_frame->h.len - 2)) =
 860:	ec 2f       	mov	r30, r28
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	e9 59       	subi	r30, 0x99	; 153
 866:	fe 4f       	sbci	r31, 0xFE	; 254
 868:	48 c0       	rjmp	.+144    	; 0x8fa <prepare_answer+0xf0>
#endif
	switch (frame.h.fun_num) {
		// Write Bytes
	case REQ_WRITE_BYTES: {
		void* begin_addr = (void*)frame.r_write_bytes.addr;
		memcpy(begin_addr, frame.r_write_bytes.data, frame.r_write_bytes.len);
 86a:	40 91 e1 00 	lds	r20, 0x00E1	; 0x8000e1 <frame+0x4>
 86e:	50 e0       	ldi	r21, 0x00	; 0
 870:	64 ee       	ldi	r22, 0xE4	; 228
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <frame+0x5>
 878:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <frame+0x6>
 87c:	a4 d0       	rcall	.+328    	; 0x9c6 <memcpy>
		return IMMEDIATE_ANSWER;
 87e:	56 c0       	rjmp	.+172    	; 0x92c <prepare_answer+0x122>
	}
	// Write Bits
	case REQ_WRITE_BITS: {
		// | bit_addr | bit_mask | bit_value | bit_status |
		for (uint8_t i = 0; i < frame.r_write_bits.nbits; ++i) {
 880:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <frame+0x4>
 884:	28 17       	cp	r18, r24
 886:	08 f0       	brcs	.+2      	; 0x88a <prepare_answer+0x80>
 888:	4e c0       	rjmp	.+156    	; 0x926 <prepare_answer+0x11c>
			uint8_t val = *((uint8_t*)frame.r_write_bits.data->bit_addr);
 88a:	a0 91 e2 00 	lds	r26, 0x00E2	; 0x8000e2 <frame+0x5>
 88e:	b0 91 e3 00 	lds	r27, 0x00E3	; 0x8000e3 <frame+0x6>
 892:	9c 91       	ld	r25, X

			val &= frame.r_write_bits.data[i].bit_mask;
 894:	42 2f       	mov	r20, r18
 896:	50 e0       	ldi	r21, 0x00	; 0
 898:	34 9f       	mul	r19, r20
 89a:	f0 01       	movw	r30, r0
 89c:	35 9f       	mul	r19, r21
 89e:	f0 0d       	add	r31, r0
 8a0:	11 24       	eor	r1, r1
 8a2:	e3 52       	subi	r30, 0x23	; 35
 8a4:	ff 4f       	sbci	r31, 0xFF	; 255
 8a6:	87 81       	ldd	r24, Z+7	; 0x07
 8a8:	98 23       	and	r25, r24
			val |= frame.r_write_bits.data[i].bit_val | frame.r_write_bits.data[i].bit_status;
 8aa:	4f 5f       	subi	r20, 0xFF	; 255
 8ac:	5f 4f       	sbci	r21, 0xFF	; 255
 8ae:	34 9f       	mul	r19, r20
 8b0:	e0 01       	movw	r28, r0
 8b2:	35 9f       	mul	r19, r21
 8b4:	d0 0d       	add	r29, r0
 8b6:	11 24       	eor	r1, r1
 8b8:	c3 52       	subi	r28, 0x23	; 35
 8ba:	df 4f       	sbci	r29, 0xFF	; 255

			*((uint8_t*)frame.r_write_bits.data->bit_addr) = val;
 8bc:	40 85       	ldd	r20, Z+8	; 0x08
 8be:	8c 81       	ldd	r24, Y+4	; 0x04
 8c0:	84 2b       	or	r24, r20
 8c2:	89 2b       	or	r24, r25
 8c4:	8c 93       	st	X, r24
		return IMMEDIATE_ANSWER;
	}
	// Write Bits
	case REQ_WRITE_BITS: {
		// | bit_addr | bit_mask | bit_value | bit_status |
		for (uint8_t i = 0; i < frame.r_write_bits.nbits; ++i) {
 8c6:	2f 5f       	subi	r18, 0xFF	; 255
 8c8:	db cf       	rjmp	.-74     	; 0x880 <prepare_answer+0x76>
	// Send Bytes
	case REQ_READ_BYTES:
	case REQ_READ_BITS: {
		// RD сгрупированы и отсортированы по адресу в слейве
		void* begin_addr = (void*)frame.r_read_bytes.addr_begin;
		memcpy(frame.a_read_bytes.data, begin_addr, frame.r_read_bytes.nbytes);
 8ca:	d0 91 e1 00 	lds	r29, 0x00E1	; 0x8000e1 <frame+0x4>
 8ce:	4d 2f       	mov	r20, r29
 8d0:	50 e0       	ldi	r21, 0x00	; 0
 8d2:	60 91 e2 00 	lds	r22, 0x00E2	; 0x8000e2 <frame+0x5>
 8d6:	70 91 e3 00 	lds	r23, 0x00E3	; 0x8000e3 <frame+0x6>
 8da:	82 ee       	ldi	r24, 0xE2	; 226
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	73 d0       	rcall	.+230    	; 0x9c6 <memcpy>
		frame.h.len = sizeof(frame_h) + sizeof(ans_read_bytes) + frame.r_read_bytes.nbytes + 2;
 8e0:	c7 e0       	ldi	r28, 0x07	; 7
 8e2:	cd 0f       	add	r28, r29
 8e4:	c0 93 e0 00 	sts	0x00E0, r28	; 0x8000e0 <frame+0x3>
	default:
		return NO_ANSWER;
	}
_crc_for_frame:
	*((uint16_t*)((uint8_t*)&frame + frame.h.len - 2)) =
		get_crc((void*)&frame, frame.h.len - 2);
 8e8:	65 e0       	ldi	r22, 0x05	; 5
 8ea:	6d 0f       	add	r22, r29
 8ec:	8d ed       	ldi	r24, 0xDD	; 221
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	ba db       	rcall	.-2188   	; 0x66 <get_crc>
	}
	default:
		return NO_ANSWER;
	}
_crc_for_frame:
	*((uint16_t*)((uint8_t*)&frame + frame.h.len - 2)) =
 8f2:	ec 2f       	mov	r30, r28
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	e5 52       	subi	r30, 0x25	; 37
 8f8:	ff 4f       	sbci	r31, 0xFF	; 255
		get_crc((void*)&frame, frame.h.len - 2);
	return IMMEDIATE_ANSWER;
#ifdef PC_LINK
_crc_for_udp :
	*((uint16_t*)((uint8_t*)udp_frame + udp_frame->h.len - 2)) =
 8fa:	91 83       	std	Z+1, r25	; 0x01
 8fc:	80 83       	st	Z, r24
 8fe:	13 c0       	rjmp	.+38     	; 0x926 <prepare_answer+0x11c>
		goto _crc_for_udp;
	}
#endif
	// Write Bit
	case REQ_WRITE_BIT: {
		*((uint8_t*)frame.r_write_bit.bit_addr) &= ~frame.r_write_bit.bit_n;
 900:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <frame+0x4>
 904:	f0 91 e2 00 	lds	r31, 0x00E2	; 0x8000e2 <frame+0x5>
 908:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <frame+0x6>
 90c:	80 95       	com	r24
 90e:	90 81       	ld	r25, Z
 910:	89 23       	and	r24, r25
 912:	80 83       	st	Z, r24
		*((uint8_t*)frame.r_write_bit.bit_addr) |= frame.r_write_bit.bit_val;
 914:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <frame+0x4>
 918:	f0 91 e2 00 	lds	r31, 0x00E2	; 0x8000e2 <frame+0x5>
 91c:	90 81       	ld	r25, Z
 91e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <frame+0x7>
 922:	89 2b       	or	r24, r25
 924:	80 83       	st	Z, r24
		return IMMEDIATE_ANSWER;
 926:	c0 e0       	ldi	r28, 0x00	; 0
 928:	01 c0       	rjmp	.+2      	; 0x92c <prepare_answer+0x122>
	}
	default:
		return NO_ANSWER;
 92a:	c2 e0       	ldi	r28, 0x02	; 2
_crc_for_udp :
	*((uint16_t*)((uint8_t*)udp_frame + udp_frame->h.len - 2)) =
		get_crc((void*)udp_frame, udp_frame->h.len - 2);
	return IMMEDIATE_ANSWER;
#endif
}
 92c:	8c 2f       	mov	r24, r28
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	08 95       	ret

00000934 <send_answer>:
	}
	M_UCSRB = RX_ENABLED;
}

static void send_answer(void) {
	ptf = &idle_40;
 934:	82 ed       	ldi	r24, 0xD2	; 210
 936:	91 e0       	ldi	r25, 0x01	; 1
 938:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
 93c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	M_OCR = IBBPC_40;
 940:	8a ea       	ldi	r24, 0xAA	; 170
 942:	83 bd       	out	0x23, r24	; 35
	if (prepare_answer() == IMMEDIATE_ANSWER) {
 944:	62 df       	rcall	.-316    	; 0x80a <prepare_answer>
 946:	81 11       	cpse	r24, r1
 948:	01 c0       	rjmp	.+2      	; 0x94c <send_answer+0x18>
		start_transmit();
 94a:	ad cb       	rjmp	.-2214   	; 0xa6 <start_transmit>
	} else {
		M_UCSRB = RX_ENABLED;
 94c:	80 e9       	ldi	r24, 0x90	; 144
 94e:	8a b9       	out	0x0a, r24	; 10
 950:	08 95       	ret

00000952 <transit_send>:
#define LED_3 PC3
#define LED_4 PC2
#define LED_5 PC1

void transit_send() {
	memcpy(&frame, v_buffer, transit);
 952:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <transit>
 956:	50 e0       	ldi	r21, 0x00	; 0
 958:	69 e6       	ldi	r22, 0x69	; 105
 95a:	71 e0       	ldi	r23, 0x01	; 1
 95c:	8d ed       	ldi	r24, 0xDD	; 221
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	32 c0       	rjmp	.+100    	; 0x9c6 <memcpy>

00000962 <transit_answer>:
}

void transit_answer() {
 962:	cf 93       	push	r28
	memcpy(v_buffer, &frame, frame.h.len);
 964:	c0 91 e0 00 	lds	r28, 0x00E0	; 0x8000e0 <frame+0x3>
 968:	4c 2f       	mov	r20, r28
 96a:	50 e0       	ldi	r21, 0x00	; 0
 96c:	6d ed       	ldi	r22, 0xDD	; 221
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	89 e6       	ldi	r24, 0x69	; 105
 972:	91 e0       	ldi	r25, 0x01	; 1
 974:	28 d0       	rcall	.+80     	; 0x9c6 <memcpy>
	v_data_transmitted = frame.h.len;
 976:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <v_data_transmitted>
}
 97a:	cf 91       	pop	r28
 97c:	08 95       	ret

0000097e <transit_timeout>:

void transit_timeout() {
	v_buffer[0] = 0xff;
 97e:	e9 e6       	ldi	r30, 0x69	; 105
 980:	f1 e0       	ldi	r31, 0x01	; 1
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	80 83       	st	Z, r24
	v_buffer[1] = 'T';
 986:	84 e5       	ldi	r24, 0x54	; 84
 988:	81 83       	std	Z+1, r24	; 0x01
	v_buffer[2] = 0x41;
 98a:	81 e4       	ldi	r24, 0x41	; 65
 98c:	82 83       	std	Z+2, r24	; 0x02
	v_buffer[3] = 0xbf;
 98e:	8f eb       	ldi	r24, 0xBF	; 191
 990:	83 83       	std	Z+3, r24	; 0x03
	v_data_transmitted = 4;
 992:	84 e0       	ldi	r24, 0x04	; 4
 994:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <v_data_transmitted>
 998:	08 95       	ret

0000099a <main>:
}

int main(void) {
	DDRC = 0xff;
 99a:	8f ef       	ldi	r24, 0xFF	; 255
 99c:	84 bb       	out	0x14, r24	; 20
	net_init();
 99e:	df dd       	rcall	.-1090   	; 0x55e <net_init>
	sei();
 9a0:	78 94       	sei
	while (1) {
		net_poll();
 9a2:	13 de       	rcall	.-986    	; 0x5ca <net_poll>
		if (!(status & HIGH_PRIORITY) && !transit) { // net_buf lock 
 9a4:	34 fc       	sbrc	r3, 4
 9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <main+0x8>
 9a8:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <transit>
 9ac:	81 11       	cpse	r24, r1
 9ae:	f9 cf       	rjmp	.-14     	; 0x9a2 <main+0x8>
			if (v_data_recieved) {
 9b0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <v_data_recieved>
 9b4:	88 23       	and	r24, r24
 9b6:	a9 f3       	breq	.-22     	; 0x9a2 <main+0x8>
				v_data_recieved = 0;
 9b8:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <v_data_recieved>
				Frame* vframe = (void*)v_buffer;
				transit = vframe->h.len;
 9bc:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <v_buffer+0x3>
 9c0:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <transit>
 9c4:	ee cf       	rjmp	.-36     	; 0x9a2 <main+0x8>

000009c6 <memcpy>:
 9c6:	fb 01       	movw	r30, r22
 9c8:	dc 01       	movw	r26, r24
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <memcpy+0xa>
 9cc:	01 90       	ld	r0, Z+
 9ce:	0d 92       	st	X+, r0
 9d0:	41 50       	subi	r20, 0x01	; 1
 9d2:	50 40       	sbci	r21, 0x00	; 0
 9d4:	d8 f7       	brcc	.-10     	; 0x9cc <memcpy+0x6>
 9d6:	08 95       	ret

000009d8 <_exit>:
 9d8:	f8 94       	cli

000009da <__stop_program>:
 9da:	ff cf       	rjmp	.-2      	; 0x9da <__stop_program>

Disassembly of section .nrww:

00001c00 <_nrww_start>:
    1c00:	00 c0       	rjmp	.+0      	; 0x1c02 <_nrww_start+0x2>
    1c02:	c1 01       	movw	r24, r2
    1c04:	c3 03       	fmuls	r20, r19
    1c06:	02 c2       	rjmp	.+1028   	; 0x200c <__TEXT_REGION_LENGTH__+0xc>
    1c08:	c6 06       	cpc	r12, r22
    1c0a:	07 c7       	rjmp	.+3598   	; 0x2a1a <__TEXT_REGION_LENGTH__+0xa1a>
    1c0c:	05 c5       	rjmp	.+2570   	; 0x2618 <__TEXT_REGION_LENGTH__+0x618>
    1c0e:	c4 04       	cpc	r12, r4
    1c10:	cc 0c       	add	r12, r12
    1c12:	0d cd       	rjmp	.-1510   	; 0x162e <__user_text+0xc2e>
    1c14:	0f cf       	rjmp	.-482    	; 0x1a34 <__user_text+0x1034>
    1c16:	ce 0e       	add	r12, r30
    1c18:	0a ca       	rjmp	.-3052   	; 0x102e <__user_text+0x62e>
    1c1a:	cb 0b       	sbc	r28, r27
    1c1c:	c9 09       	sbc	r28, r9
    1c1e:	08 c8       	rjmp	.-4080   	; 0xc30 <__user_text+0x230>
    1c20:	d8 18       	sub	r13, r8
    1c22:	19 d9       	rcall	.-3534   	; 0xe56 <__user_text+0x456>
    1c24:	1b db       	rcall	.-2506   	; 0x125c <__user_text+0x85c>
    1c26:	da 1a       	sub	r13, r26
    1c28:	1e de       	rcall	.-964    	; 0x1866 <__user_text+0xe66>
    1c2a:	df 1f       	adc	r29, r31
    1c2c:	dd 1d       	adc	r29, r13
    1c2e:	1c dc       	rcall	.-1992   	; 0x1468 <__user_text+0xa68>
    1c30:	14 d4       	rcall	.+2088   	; 0x245a <__TEXT_REGION_LENGTH__+0x45a>
    1c32:	d5 15       	cp	r29, r5
    1c34:	d7 17       	cp	r29, r23
    1c36:	16 d6       	rcall	.+3116   	; 0x2864 <__TEXT_REGION_LENGTH__+0x864>
    1c38:	d2 12       	cpse	r13, r18
    1c3a:	13 d3       	rcall	.+1574   	; 0x2262 <__TEXT_REGION_LENGTH__+0x262>
    1c3c:	11 d1       	rcall	.+546    	; 0x1e60 <CRCHi+0x160>
    1c3e:	d0 10       	cpse	r13, r0
    1c40:	f0 30       	cpi	r31, 0x00	; 0
    1c42:	31 f1       	breq	.+76     	; 0x1c90 <_nrww_start+0x90>
    1c44:	33 f3       	brvs	.-52     	; 0x1c12 <_nrww_start+0x12>
    1c46:	f2 32       	cpi	r31, 0x22	; 34
    1c48:	36 f6       	brtc	.-116    	; 0x1bd6 <__user_text+0x11d6>
    1c4a:	f7 37       	cpi	r31, 0x77	; 119
    1c4c:	f5 35       	cpi	r31, 0x55	; 85
    1c4e:	34 f4       	brge	.+12     	; 0x1c5c <_nrww_start+0x5c>
    1c50:	3c fc       	.word	0xfc3c	; ????
    1c52:	fd 3d       	cpi	r31, 0xDD	; 221
    1c54:	ff 3f       	cpi	r31, 0xFF	; 255
    1c56:	3e fe       	.word	0xfe3e	; ????
    1c58:	fa 3a       	cpi	r31, 0xAA	; 170
    1c5a:	3b fb       	.word	0xfb3b	; ????
    1c5c:	39 f9       	.word	0xf939	; ????
    1c5e:	f8 38       	cpi	r31, 0x88	; 136
    1c60:	28 e8       	ldi	r18, 0x88	; 136
    1c62:	e9 29       	or	r30, r9
    1c64:	eb 2b       	or	r30, r27
    1c66:	2a ea       	ldi	r18, 0xAA	; 170
    1c68:	ee 2e       	mov	r14, r30
    1c6a:	2f ef       	ldi	r18, 0xFF	; 255
    1c6c:	2d ed       	ldi	r18, 0xDD	; 221
    1c6e:	ec 2c       	mov	r14, r12
    1c70:	e4 24       	eor	r14, r4
    1c72:	25 e5       	ldi	r18, 0x55	; 85
    1c74:	27 e7       	ldi	r18, 0x77	; 119
    1c76:	e6 26       	eor	r14, r22
    1c78:	22 e2       	ldi	r18, 0x22	; 34
    1c7a:	e3 23       	and	r30, r19
    1c7c:	e1 21       	and	r30, r1
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	a0 60       	ori	r26, 0x00	; 0
    1c82:	61 a1       	ldd	r22, Z+33	; 0x21
    1c84:	63 a3       	std	Z+35, r22	; 0x23
    1c86:	a2 62       	ori	r26, 0x22	; 34
    1c88:	66 a6       	std	Z+46, r6	; 0x2e
    1c8a:	a7 67       	ori	r26, 0x77	; 119
    1c8c:	a5 65       	ori	r26, 0x55	; 85
    1c8e:	64 a4       	ldd	r6, Z+44	; 0x2c
    1c90:	6c ac       	ldd	r6, Y+60	; 0x3c
    1c92:	ad 6d       	ori	r26, 0xDD	; 221
    1c94:	af 6f       	ori	r26, 0xFF	; 255
    1c96:	6e ae       	std	Y+62, r6	; 0x3e
    1c98:	aa 6a       	ori	r26, 0xAA	; 170
    1c9a:	6b ab       	std	Y+51, r22	; 0x33
    1c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9e:	a8 68       	ori	r26, 0x88	; 136
    1ca0:	78 b8       	out	0x08, r7	; 8
    1ca2:	b9 79       	andi	r27, 0x99	; 153
    1ca4:	bb 7b       	andi	r27, 0xBB	; 187
    1ca6:	7a ba       	out	0x1a, r7	; 26
    1ca8:	be 7e       	andi	r27, 0xEE	; 238
    1caa:	7f bf       	out	0x3f, r23	; 63
    1cac:	7d bd       	out	0x2d, r23	; 45
    1cae:	bc 7c       	andi	r27, 0xCC	; 204
    1cb0:	b4 74       	andi	r27, 0x44	; 68
    1cb2:	75 b5       	in	r23, 0x25	; 37
    1cb4:	77 b7       	in	r23, 0x37	; 55
    1cb6:	b6 76       	andi	r27, 0x66	; 102
    1cb8:	72 b2       	in	r7, 0x12	; 18
    1cba:	b3 73       	andi	r27, 0x33	; 51
    1cbc:	b1 71       	andi	r27, 0x11	; 17
    1cbe:	70 b0       	in	r7, 0x00	; 0
    1cc0:	50 90 91 51 	lds	r5, 0x5191	; 0x805191 <__bss_end+0x4f60>
    1cc4:	93 53       	subi	r25, 0x33	; 51
    1cc6:	52 92       	st	-Z, r5
    1cc8:	96 56       	subi	r25, 0x66	; 102
    1cca:	57 97       	sbiw	r26, 0x17	; 23
    1ccc:	55 95       	asr	r21
    1cce:	94 54       	subi	r25, 0x44	; 68
    1cd0:	9c 5c       	subi	r25, 0xCC	; 204
    1cd2:	5d 9d       	mul	r21, r13
    1cd4:	5f 9f       	mul	r21, r31
    1cd6:	9e 5e       	subi	r25, 0xEE	; 238
    1cd8:	5a 9a       	sbi	0x0b, 2	; 11
    1cda:	9b 5b       	subi	r25, 0xBB	; 187
    1cdc:	99 59       	subi	r25, 0x99	; 153
    1cde:	58 98       	cbi	0x0b, 0	; 11
    1ce0:	88 48       	sbci	r24, 0x88	; 136
    1ce2:	49 89       	ldd	r20, Y+17	; 0x11
    1ce4:	4b 8b       	std	Y+19, r20	; 0x13
    1ce6:	8a 4a       	sbci	r24, 0xAA	; 170
    1ce8:	4e 8e       	std	Y+30, r4	; 0x1e
    1cea:	8f 4f       	sbci	r24, 0xFF	; 255
    1cec:	8d 4d       	sbci	r24, 0xDD	; 221
    1cee:	4c 8c       	ldd	r4, Y+28	; 0x1c
    1cf0:	44 84       	ldd	r4, Z+12	; 0x0c
    1cf2:	85 45       	sbci	r24, 0x55	; 85
    1cf4:	87 47       	sbci	r24, 0x77	; 119
    1cf6:	46 86       	std	Z+14, r4	; 0x0e
    1cf8:	82 42       	sbci	r24, 0x22	; 34
    1cfa:	43 83       	std	Z+3, r20	; 0x03
    1cfc:	41 81       	ldd	r20, Z+1	; 0x01
    1cfe:	80 40       	sbci	r24, 0x00	; 0

00001d00 <CRCHi>:
    1d00:	00 c1       	rjmp	.+512    	; 0x1f02 <CRCHi+0x202>
    1d02:	81 40       	sbci	r24, 0x01	; 1
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <CRCHi+0x8>
    1d06:	80 41       	sbci	r24, 0x10	; 16
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <CRCHi+0xc>
    1d0a:	80 41       	sbci	r24, 0x10	; 16
    1d0c:	00 c1       	rjmp	.+512    	; 0x1f0e <CRCHi+0x20e>
    1d0e:	81 40       	sbci	r24, 0x01	; 1
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <CRCHi+0x14>
    1d12:	80 41       	sbci	r24, 0x10	; 16
    1d14:	00 c1       	rjmp	.+512    	; 0x1f16 <CRCHi+0x216>
    1d16:	81 40       	sbci	r24, 0x01	; 1
    1d18:	00 c1       	rjmp	.+512    	; 0x1f1a <CRCHi+0x21a>
    1d1a:	81 40       	sbci	r24, 0x01	; 1
    1d1c:	01 c0       	rjmp	.+2      	; 0x1d20 <CRCHi+0x20>
    1d1e:	80 41       	sbci	r24, 0x10	; 16
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <CRCHi+0x24>
    1d22:	80 41       	sbci	r24, 0x10	; 16
    1d24:	00 c1       	rjmp	.+512    	; 0x1f26 <CRCHi+0x226>
    1d26:	81 40       	sbci	r24, 0x01	; 1
    1d28:	00 c1       	rjmp	.+512    	; 0x1f2a <CRCHi+0x22a>
    1d2a:	81 40       	sbci	r24, 0x01	; 1
    1d2c:	01 c0       	rjmp	.+2      	; 0x1d30 <CRCHi+0x30>
    1d2e:	80 41       	sbci	r24, 0x10	; 16
    1d30:	00 c1       	rjmp	.+512    	; 0x1f32 <CRCHi+0x232>
    1d32:	81 40       	sbci	r24, 0x01	; 1
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <CRCHi+0x38>
    1d36:	80 41       	sbci	r24, 0x10	; 16
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <CRCHi+0x3c>
    1d3a:	80 41       	sbci	r24, 0x10	; 16
    1d3c:	00 c1       	rjmp	.+512    	; 0x1f3e <CRCHi+0x23e>
    1d3e:	81 40       	sbci	r24, 0x01	; 1
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <CRCHi+0x44>
    1d42:	80 41       	sbci	r24, 0x10	; 16
    1d44:	00 c1       	rjmp	.+512    	; 0x1f46 <CRCHi+0x246>
    1d46:	81 40       	sbci	r24, 0x01	; 1
    1d48:	00 c1       	rjmp	.+512    	; 0x1f4a <CRCHi+0x24a>
    1d4a:	81 40       	sbci	r24, 0x01	; 1
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <CRCHi+0x50>
    1d4e:	80 41       	sbci	r24, 0x10	; 16
    1d50:	00 c1       	rjmp	.+512    	; 0x1f52 <CRCHi+0x252>
    1d52:	81 40       	sbci	r24, 0x01	; 1
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <CRCHi+0x58>
    1d56:	80 41       	sbci	r24, 0x10	; 16
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <CRCHi+0x5c>
    1d5a:	80 41       	sbci	r24, 0x10	; 16
    1d5c:	00 c1       	rjmp	.+512    	; 0x1f5e <CRCHi+0x25e>
    1d5e:	81 40       	sbci	r24, 0x01	; 1
    1d60:	00 c1       	rjmp	.+512    	; 0x1f62 <CRCHi+0x262>
    1d62:	81 40       	sbci	r24, 0x01	; 1
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <CRCHi+0x68>
    1d66:	80 41       	sbci	r24, 0x10	; 16
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <CRCHi+0x6c>
    1d6a:	80 41       	sbci	r24, 0x10	; 16
    1d6c:	00 c1       	rjmp	.+512    	; 0x1f6e <CRCHi+0x26e>
    1d6e:	81 40       	sbci	r24, 0x01	; 1
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <CRCHi+0x74>
    1d72:	80 41       	sbci	r24, 0x10	; 16
    1d74:	00 c1       	rjmp	.+512    	; 0x1f76 <CRCHi+0x276>
    1d76:	81 40       	sbci	r24, 0x01	; 1
    1d78:	00 c1       	rjmp	.+512    	; 0x1f7a <CRCHi+0x27a>
    1d7a:	81 40       	sbci	r24, 0x01	; 1
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <CRCHi+0x80>
    1d7e:	80 41       	sbci	r24, 0x10	; 16
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <CRCHi+0x84>
    1d82:	80 41       	sbci	r24, 0x10	; 16
    1d84:	00 c1       	rjmp	.+512    	; 0x1f86 <CRCHi+0x286>
    1d86:	81 40       	sbci	r24, 0x01	; 1
    1d88:	00 c1       	rjmp	.+512    	; 0x1f8a <CRCHi+0x28a>
    1d8a:	81 40       	sbci	r24, 0x01	; 1
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <CRCHi+0x90>
    1d8e:	80 41       	sbci	r24, 0x10	; 16
    1d90:	00 c1       	rjmp	.+512    	; 0x1f92 <CRCHi+0x292>
    1d92:	81 40       	sbci	r24, 0x01	; 1
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <CRCHi+0x98>
    1d96:	80 41       	sbci	r24, 0x10	; 16
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <CRCHi+0x9c>
    1d9a:	80 41       	sbci	r24, 0x10	; 16
    1d9c:	00 c1       	rjmp	.+512    	; 0x1f9e <CRCHi+0x29e>
    1d9e:	81 40       	sbci	r24, 0x01	; 1
    1da0:	00 c1       	rjmp	.+512    	; 0x1fa2 <CRCHi+0x2a2>
    1da2:	81 40       	sbci	r24, 0x01	; 1
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <CRCHi+0xa8>
    1da6:	80 41       	sbci	r24, 0x10	; 16
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <CRCHi+0xac>
    1daa:	80 41       	sbci	r24, 0x10	; 16
    1dac:	00 c1       	rjmp	.+512    	; 0x1fae <CRCHi+0x2ae>
    1dae:	81 40       	sbci	r24, 0x01	; 1
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <CRCHi+0xb4>
    1db2:	80 41       	sbci	r24, 0x10	; 16
    1db4:	00 c1       	rjmp	.+512    	; 0x1fb6 <CRCHi+0x2b6>
    1db6:	81 40       	sbci	r24, 0x01	; 1
    1db8:	00 c1       	rjmp	.+512    	; 0x1fba <CRCHi+0x2ba>
    1dba:	81 40       	sbci	r24, 0x01	; 1
    1dbc:	01 c0       	rjmp	.+2      	; 0x1dc0 <CRCHi+0xc0>
    1dbe:	80 41       	sbci	r24, 0x10	; 16
    1dc0:	00 c1       	rjmp	.+512    	; 0x1fc2 <CRCHi+0x2c2>
    1dc2:	81 40       	sbci	r24, 0x01	; 1
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <CRCHi+0xc8>
    1dc6:	80 41       	sbci	r24, 0x10	; 16
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <CRCHi+0xcc>
    1dca:	80 41       	sbci	r24, 0x10	; 16
    1dcc:	00 c1       	rjmp	.+512    	; 0x1fce <CRCHi+0x2ce>
    1dce:	81 40       	sbci	r24, 0x01	; 1
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <CRCHi+0xd4>
    1dd2:	80 41       	sbci	r24, 0x10	; 16
    1dd4:	00 c1       	rjmp	.+512    	; 0x1fd6 <CRCHi+0x2d6>
    1dd6:	81 40       	sbci	r24, 0x01	; 1
    1dd8:	00 c1       	rjmp	.+512    	; 0x1fda <CRCHi+0x2da>
    1dda:	81 40       	sbci	r24, 0x01	; 1
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <CRCHi+0xe0>
    1dde:	80 41       	sbci	r24, 0x10	; 16
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <CRCHi+0xe4>
    1de2:	80 41       	sbci	r24, 0x10	; 16
    1de4:	00 c1       	rjmp	.+512    	; 0x1fe6 <CRCHi+0x2e6>
    1de6:	81 40       	sbci	r24, 0x01	; 1
    1de8:	00 c1       	rjmp	.+512    	; 0x1fea <CRCHi+0x2ea>
    1dea:	81 40       	sbci	r24, 0x01	; 1
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <CRCHi+0xf0>
    1dee:	80 41       	sbci	r24, 0x10	; 16
    1df0:	00 c1       	rjmp	.+512    	; 0x1ff2 <CRCHi+0x2f2>
    1df2:	81 40       	sbci	r24, 0x01	; 1
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <CRCHi+0xf8>
    1df6:	80 41       	sbci	r24, 0x10	; 16
    1df8:	01 c0       	rjmp	.+2      	; 0x1dfc <CRCHi+0xfc>
    1dfa:	80 41       	sbci	r24, 0x10	; 16
    1dfc:	00 c1       	rjmp	.+512    	; 0x1ffe <CRCHi+0x2fe>
    1dfe:	81 40       	sbci	r24, 0x01	; 1
