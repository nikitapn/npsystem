
build/atmega16_9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011f0  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .nrww         000003fa  00003c00  00003c00  00001374  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00800062  000011f0  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000211  00800062  00800062  0000176e  2**0
                  ALLOC
  4 .tab          00000090  000011f0  000011f0  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .noinit       0000000a  00800273  00800273  0000176e  2**0
                  ALLOC
  6 .eeprom       000000d2  00810000  00810000  0000176e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY
  8 .comment      00000011  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY
  9 .debug_abbrev 000004e7  00000000  00000000  0000188d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000052e  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000001a  00000000  00000000  000022a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001af  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .stab         00002b14  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .stabstr      000024c2  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_1>
       8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
       c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__vector_3>
      10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      24:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_9>
      28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      2c:	0c 94 12 03 	jmp	0x624	; 0x624 <__vector_11>
      30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      34:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_13>
      38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      44:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__vector_17>
      48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
      50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	a0 e6       	ldi	r26, 0x60	; 96
      62:	b0 e0       	ldi	r27, 0x00	; 0

00000064 <zero_loop>:
      64:	1d 92       	st	X+, r1
      66:	b4 30       	cpi	r27, 0x04	; 4
      68:	e9 f7       	brne	.-6      	; 0x64 <zero_loop>
      6a:	af 35       	cpi	r26, 0x5F	; 95
      6c:	d9 f7       	brne	.-10     	; 0x64 <zero_loop>

0000006e <__do_clear_bss>:
      6e:	22 e0       	ldi	r18, 0x02	; 2
      70:	a2 e6       	ldi	r26, 0x62	; 98
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
      76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
      78:	a3 37       	cpi	r26, 0x73	; 115
      7a:	b2 07       	cpc	r27, r18
      7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
      7e:	0e 94 f4 06 	call	0xde8	; 0xde8 <main>
      82:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <_exit>

00000086 <__bad_interrupt>:
      86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <__vector_3>:
      8a:	0f 93       	push	r16
      8c:	0f b7       	in	r16, 0x3f	; 63
      8e:	0f 93       	push	r16
      90:	23 94       	inc	r2
      92:	0f 91       	pop	r16
      94:	0f bf       	out	0x3f, r16	; 63
      96:	0f 91       	pop	r16
      98:	18 95       	reti

0000009a <get_crc>:
      9a:	dc 01       	movw	r26, r24
      9c:	8f ef       	ldi	r24, 0xFF	; 255
      9e:	9f ef       	ldi	r25, 0xFF	; 255

000000a0 <calc_crc>:
      a0:	fd e3       	ldi	r31, 0x3D	; 61
      a2:	ed 91       	ld	r30, X+
      a4:	e8 27       	eor	r30, r24
      a6:	84 91       	lpm	r24, Z
      a8:	98 27       	eor	r25, r24
      aa:	89 2f       	mov	r24, r25
      ac:	fa 95       	dec	r31
      ae:	94 91       	lpm	r25, Z
      b0:	6a 95       	dec	r22
      b2:	b1 f7       	brne	.-20     	; 0xa0 <calc_crc>
      b4:	08 95       	ret

000000b6 <propagation_delay>:

	start_transmit();
}

static void propagation_delay(void) {
	ptf = saved_ptf;
      b6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <saved_ptf>
      ba:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <saved_ptf+0x1>
      be:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
      c2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	M_OCR = saved_ocr - PROPAGATION_DELAY;
      c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <_edata>
      ca:	8a 50       	subi	r24, 0x0A	; 10
      cc:	83 bd       	out	0x23, r24	; 35
	GIFR = (1 << INTF0);
      ce:	80 e4       	ldi	r24, 0x40	; 64
      d0:	8a bf       	out	0x3a, r24	; 58
	GICR = (1 << INT0);
      d2:	8b bf       	out	0x3b, r24	; 59
	M_UCSRB = RX_ENABLED;
      d4:	80 e9       	ldi	r24, 0x90	; 144
      d6:	8a b9       	out	0x0a, r24	; 10
      d8:	08 95       	ret

000000da <start_transmit>:
	}
}

static void start_transmit(void) {
	// Выключаеться контроль за шиной на время передачи
	M_TCCR = TIMER_OFF;
      da:	15 bc       	out	0x25, r1	; 37
	M_TIFR |= 1 << M_OCF;
      dc:	88 b7       	in	r24, 0x38	; 56
      de:	80 68       	ori	r24, 0x80	; 128
      e0:	88 bf       	out	0x38, r24	; 56
	M_TCNT = 0;
      e2:	14 bc       	out	0x24, r1	; 36

	GICR = 0;
      e4:	1b be       	out	0x3b, r1	; 59
	GIFR = (1 << INTF0);
      e6:	80 e4       	ldi	r24, 0x40	; 64
      e8:	8a bf       	out	0x3a, r24	; 58

	ibbpc_ev = 0;
      ea:	21 2c       	mov	r2, r1

	saved_ptf = ptf;
      ec:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ptf>
      f0:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <ptf+0x1>
      f4:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <saved_ptf+0x1>
      f8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <saved_ptf>
	saved_ocr = M_OCR;
      fc:	83 b5       	in	r24, 0x23	; 35
      fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <_edata>

	ptf = &propagation_delay;
     102:	8b e5       	ldi	r24, 0x5B	; 91
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     10a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	M_OCR = PROPAGATION_DELAY;
     10e:	8a e0       	ldi	r24, 0x0A	; 10
     110:	83 bd       	out	0x23, r24	; 35

	tx_count = frame.h.len;
     112:	ec ee       	ldi	r30, 0xEC	; 236
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	83 81       	ldd	r24, Z+3	; 0x03
     118:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tx_count>
	pCurBufPtr = (void*)&frame;
     11c:	f0 93 6d 00 	sts	0x006D, r31	; 0x80006d <pCurBufPtr+0x1>
     120:	e0 93 6c 00 	sts	0x006C, r30	; 0x80006c <pCurBufPtr>

	status |= HIGH_PRIORITY;
     124:	83 2d       	mov	r24, r3
     126:	80 61       	ori	r24, 0x10	; 16
     128:	38 2e       	mov	r3, r24

	MAX485_OUT();
     12a:	93 9a       	sbi	0x12, 3	; 18
	M_UCSRB = TX_ENABLED;
     12c:	88 e4       	ldi	r24, 0x48	; 72
     12e:	8a b9       	out	0x0a, r24	; 10

	M_UDR = (*pCurBufPtr);
     130:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pCurBufPtr>
     134:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pCurBufPtr+0x1>
     138:	80 81       	ld	r24, Z
     13a:	8c b9       	out	0x0c, r24	; 12
     13c:	08 95       	ret

0000013e <send_sync_frame>:
		}
	}
}

static void send_sync_frame(void) {
	M_OCR = IBBPC_40;
     13e:	8a ea       	ldi	r24, 0xAA	; 170
     140:	83 bd       	out	0x23, r24	; 35
	ptf = idle_40;
     142:	8b ed       	ldi	r24, 0xDB	; 219
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     14a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	ac = 0;
     14e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <ac>

	frame.h.sl_addr = MY_ADDRESS | 0x80;
     152:	ec ee       	ldi	r30, 0xEC	; 236
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	89 e8       	ldi	r24, 0x89	; 137
     158:	80 83       	st	Z, r24
	status |= SYNC | LAST_MASTER;
     15a:	83 2d       	mov	r24, r3
     15c:	89 60       	ori	r24, 0x09	; 9
     15e:	38 2e       	mov	r3, r24
	frame.h.len = 1;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	83 83       	std	Z+3, r24	; 0x03

	start_transmit();
     164:	0c 94 6d 00 	jmp	0xda	; 0xda <start_transmit>

00000168 <read_answer>:
	return IMMEDIATE_ANSWER;
#endif
}

/* Master mode */
static void read_answer(void) {
     168:	af 92       	push	r10
     16a:	bf 92       	push	r11
     16c:	cf 92       	push	r12
     16e:	df 92       	push	r13
     170:	ef 92       	push	r14
     172:	ff 92       	push	r15
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	10 91 6b 00 	lds	r17, 0x006B	; 0x80006b <cur_req_num>
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;

	if (status & DATA_RECIVED) {
     180:	31 fe       	sbrs	r3, 1
     182:	68 c0       	rjmp	.+208    	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>

/* Master mode */
static void read_answer(void) {
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;
     184:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <pbegin_data>
     188:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <pbegin_data+0x1>
     18c:	c0 80       	ld	r12, Z
     18e:	81 81       	ldd	r24, Z+1	; 0x01
     190:	83 70       	andi	r24, 0x03	; 3
     192:	d8 2e       	mov	r13, r24

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
     194:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <pend_data>
     198:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <pend_data+0x1>
			p->unreachable_cnt = 0;
			if (cur_req_num == REQ_READ_BYTES) {
     19c:	80 e0       	ldi	r24, 0x00	; 0
				uint16_t addr = (uint16_t)p->val.remote_addr;
				if (pr_addr != addr) {
					ix += 1;
					pr_addr = addr;
				}
				uint8_t bit_mask = (3 << p->val.bit_size);
     19e:	63 e0       	ldi	r22, 0x03	; 3
     1a0:	70 e0       	ldi	r23, 0x00	; 0
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
     1a2:	e4 17       	cp	r30, r20
     1a4:	f5 07       	cpc	r31, r21
     1a6:	09 f4       	brne	.+2      	; 0x1aa <read_answer+0x42>
     1a8:	51 c0       	rjmp	.+162    	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
			p->unreachable_cnt = 0;
     1aa:	14 82       	std	Z+4, r1	; 0x04
			if (cur_req_num == REQ_READ_BYTES) {
     1ac:	12 30       	cpi	r17, 0x02	; 2
     1ae:	f1 f4       	brne	.+60     	; 0x1ec <read_answer+0x84>
     1b0:	98 2f       	mov	r25, r24
				for (uint8_t i = 0; i < p->val.bit_size + 1; i++, ix++) {
     1b2:	29 2f       	mov	r18, r25
     1b4:	28 1b       	sub	r18, r24
     1b6:	c2 2f       	mov	r28, r18
     1b8:	d0 e0       	ldi	r29, 0x00	; 0
     1ba:	03 81       	ldd	r16, Z+3	; 0x03
     1bc:	20 2f       	mov	r18, r16
     1be:	26 95       	lsr	r18
     1c0:	26 95       	lsr	r18
     1c2:	26 95       	lsr	r18
     1c4:	27 70       	andi	r18, 0x07	; 7
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	2c 17       	cp	r18, r28
     1ca:	3d 07       	cpc	r19, r29
     1cc:	e4 f1       	brlt	.+120    	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
					*((uint8_t*)(p->val.local_addr + i)) = frame.a_read_bytes.data[ix];
     1ce:	29 2f       	mov	r18, r25
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	24 51       	subi	r18, 0x14	; 20
     1d4:	3f 4f       	sbci	r19, 0xFF	; 255
     1d6:	d9 01       	movw	r26, r18
     1d8:	15 96       	adiw	r26, 0x05	; 5
     1da:	fc 90       	ld	r15, X
     1dc:	22 81       	ldd	r18, Z+2	; 0x02
     1de:	30 2f       	mov	r19, r16
     1e0:	33 70       	andi	r19, 0x03	; 3
     1e2:	c2 0f       	add	r28, r18
     1e4:	d3 1f       	adc	r29, r19
     1e6:	f8 82       	st	Y, r15

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
			p->unreachable_cnt = 0;
			if (cur_req_num == REQ_READ_BYTES) {
				for (uint8_t i = 0; i < p->val.bit_size + 1; i++, ix++) {
     1e8:	9f 5f       	subi	r25, 0xFF	; 255
     1ea:	e3 cf       	rjmp	.-58     	; 0x1b2 <read_answer+0x4a>
					*((uint8_t*)(p->val.local_addr + i)) = frame.a_read_bytes.data[ix];
				}
			} else if (cur_req_num == REQ_READ_BITS) {
     1ec:	13 30       	cpi	r17, 0x03	; 3
     1ee:	51 f5       	brne	.+84     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
				uint16_t addr = (uint16_t)p->val.remote_addr;
     1f0:	b0 81       	ld	r27, Z
     1f2:	cb 2f       	mov	r28, r27
     1f4:	91 81       	ldd	r25, Z+1	; 0x01
     1f6:	d9 2f       	mov	r29, r25
     1f8:	d3 70       	andi	r29, 0x03	; 3
				if (pr_addr != addr) {
     1fa:	cc 16       	cp	r12, r28
     1fc:	dd 06       	cpc	r13, r29
     1fe:	09 f0       	breq	.+2      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
					ix += 1;
     200:	8f 5f       	subi	r24, 0xFF	; 255
					pr_addr = addr;
				}
				uint8_t bit_mask = (3 << p->val.bit_size);
     202:	23 81       	ldd	r18, Z+3	; 0x03
     204:	92 2f       	mov	r25, r18
     206:	96 95       	lsr	r25
     208:	96 95       	lsr	r25
     20a:	96 95       	lsr	r25
     20c:	97 70       	andi	r25, 0x07	; 7
     20e:	7b 01       	movw	r14, r22
     210:	01 c0       	rjmp	.+2      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
     212:	ee 0c       	add	r14, r14
     214:	9a 95       	dec	r25
     216:	ea f7       	brpl	.-6      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
				uint8_t rem_val = frame.a_read_bits.data[ix] & bit_mask;
				uint8_t val = *((uint8_t*)((uint16_t)p->val.local_addr));
     218:	a2 80       	ldd	r10, Z+2	; 0x02
     21a:	23 70       	andi	r18, 0x03	; 3
     21c:	b2 2e       	mov	r11, r18

				val &= ~bit_mask;
     21e:	9e 2d       	mov	r25, r14
     220:	90 95       	com	r25
     222:	d5 01       	movw	r26, r10
     224:	2c 91       	ld	r18, X
     226:	02 2f       	mov	r16, r18
     228:	09 23       	and	r16, r25
				if (pr_addr != addr) {
					ix += 1;
					pr_addr = addr;
				}
				uint8_t bit_mask = (3 << p->val.bit_size);
				uint8_t rem_val = frame.a_read_bits.data[ix] & bit_mask;
     22a:	c8 2e       	mov	r12, r24
     22c:	d1 2c       	mov	r13, r1
     22e:	96 01       	movw	r18, r12
     230:	24 51       	subi	r18, 0x14	; 20
     232:	3f 4f       	sbci	r19, 0xFF	; 255
				uint8_t val = *((uint8_t*)((uint16_t)p->val.local_addr));

				val &= ~bit_mask;
				val |= rem_val;

				*((uint8_t*)((uint16_t)p->val.local_addr)) = val;
     234:	d9 01       	movw	r26, r18
     236:	15 96       	adiw	r26, 0x05	; 5
     238:	9c 91       	ld	r25, X
     23a:	9e 21       	and	r25, r14
     23c:	90 2b       	or	r25, r16
     23e:	d5 01       	movw	r26, r10
     240:	9c 93       	st	X, r25
			if (cur_req_num == REQ_READ_BYTES) {
				for (uint8_t i = 0; i < p->val.bit_size + 1; i++, ix++) {
					*((uint8_t*)(p->val.local_addr + i)) = frame.a_read_bytes.data[ix];
				}
			} else if (cur_req_num == REQ_READ_BITS) {
				uint16_t addr = (uint16_t)p->val.remote_addr;
     242:	6e 01       	movw	r12, r28
     244:	98 2f       	mov	r25, r24
	struct remote_data* p;
	uint8_t ix = 0;
	uint16_t pr_addr = pbegin_data->val.remote_addr;

	if (status & DATA_RECIVED) {
		for (p = pbegin_data; p != pend_data; ++p) {
     246:	35 96       	adiw	r30, 0x05	; 5
     248:	89 2f       	mov	r24, r25
     24a:	ab cf       	rjmp	.-170    	; 0x1a2 <read_answer+0x3a>
				val |= rem_val;

				*((uint8_t*)((uint16_t)p->val.local_addr)) = val;
			}
		}
		status &= ~DATA_RECIVED;
     24c:	b3 2d       	mov	r27, r3
     24e:	bd 7f       	andi	r27, 0xFD	; 253
     250:	3b 2e       	mov	r3, r27
     252:	72 c0       	rjmp	.+228    	; 0x338 <__EEPROM_REGION_LENGTH__+0x138>
	} else {
		if (cur_req_num == REQ_READ_BYTES) {
     254:	12 30       	cpi	r17, 0x02	; 2
     256:	99 f5       	brne	.+102    	; 0x2be <__EEPROM_REGION_LENGTH__+0xbe>
     258:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <pbegin_data>
     25c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pbegin_data+0x1>
     260:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <pend_data>
     264:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <pend_data+0x1>
			while ((p = pbegin_data++) != pend_data) {
     268:	e9 2f       	mov	r30, r25
     26a:	f8 2f       	mov	r31, r24
     26c:	af 01       	movw	r20, r30
     26e:	4b 5f       	subi	r20, 0xFB	; 251
     270:	5f 4f       	sbci	r21, 0xFF	; 255
     272:	e6 17       	cp	r30, r22
     274:	f7 07       	cpc	r31, r23
     276:	f1 f0       	breq	.+60     	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
				if (p->unreachable_cnt > R_DATA_MAX_TRY) {
     278:	84 81       	ldd	r24, Z+4	; 0x04
     27a:	86 30       	cpi	r24, 0x06	; 6
     27c:	90 f0       	brcs	.+36     	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
					*((uint8_t*)((uint16_t)p->val.local_addr + p->val.bit_size)) = 0x00;
     27e:	22 81       	ldd	r18, Z+2	; 0x02
     280:	83 81       	ldd	r24, Z+3	; 0x03
     282:	38 2f       	mov	r19, r24
     284:	33 70       	andi	r19, 0x03	; 3
     286:	86 95       	lsr	r24
     288:	86 95       	lsr	r24
     28a:	86 95       	lsr	r24
     28c:	87 70       	andi	r24, 0x07	; 7
     28e:	f9 01       	movw	r30, r18
     290:	e8 0f       	add	r30, r24
     292:	f1 1d       	adc	r31, r1
     294:	10 82       	st	Z, r1
					info.com.rv_error_cnt++;
     296:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <info+0x3>
     29a:	8f 5f       	subi	r24, 0xFF	; 255
     29c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <info+0x3>
     2a0:	07 c0       	rjmp	.+14     	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
				} else {
					p->unreachable_cnt++;
     2a2:	8f 5f       	subi	r24, 0xFF	; 255
     2a4:	84 83       	std	Z+4, r24	; 0x04
					info.com.rv_error_all_cnt++;
     2a6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <info+0x4>
     2aa:	8f 5f       	subi	r24, 0xFF	; 255
     2ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <info+0x4>
     2b0:	fa 01       	movw	r30, r20
     2b2:	dc cf       	rjmp	.-72     	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
     2b4:	50 93 71 00 	sts	0x0071, r21	; 0x800071 <pbegin_data+0x1>
     2b8:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <pbegin_data>
     2bc:	3d c0       	rjmp	.+122    	; 0x338 <__EEPROM_REGION_LENGTH__+0x138>
				}
			}
		} else if (cur_req_num == REQ_READ_BITS) {
     2be:	13 30       	cpi	r17, 0x03	; 3
     2c0:	d9 f5       	brne	.+118    	; 0x338 <__EEPROM_REGION_LENGTH__+0x138>
     2c2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <pbegin_data>
     2c6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pbegin_data+0x1>
     2ca:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <pend_data>
     2ce:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <pend_data+0x1>
			while ((p = pbegin_data++) != pend_data) {
     2d2:	e9 2f       	mov	r30, r25
     2d4:	f8 2f       	mov	r31, r24
				if (p->unreachable_cnt > R_DATA_MAX_TRY) {
					*((uint8_t*)((uint16_t)p->val.local_addr)) &= ~(2 << p->val.bit_size);
     2d6:	62 e0       	ldi	r22, 0x02	; 2
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	9f 01       	movw	r18, r30
     2dc:	2b 5f       	subi	r18, 0xFB	; 251
     2de:	3f 4f       	sbci	r19, 0xFF	; 255
					p->unreachable_cnt++;
					info.com.rv_error_all_cnt++;
				}
			}
		} else if (cur_req_num == REQ_READ_BITS) {
			while ((p = pbegin_data++) != pend_data) {
     2e0:	e4 17       	cp	r30, r20
     2e2:	f5 07       	cpc	r31, r21
     2e4:	29 f1       	breq	.+74     	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
				if (p->unreachable_cnt > R_DATA_MAX_TRY) {
     2e6:	84 81       	ldd	r24, Z+4	; 0x04
     2e8:	86 30       	cpi	r24, 0x06	; 6
     2ea:	c8 f0       	brcs	.+50     	; 0x31e <__EEPROM_REGION_LENGTH__+0x11e>
					*((uint8_t*)((uint16_t)p->val.local_addr)) &= ~(2 << p->val.bit_size);
     2ec:	a2 81       	ldd	r26, Z+2	; 0x02
     2ee:	83 81       	ldd	r24, Z+3	; 0x03
     2f0:	b8 2f       	mov	r27, r24
     2f2:	b3 70       	andi	r27, 0x03	; 3
     2f4:	86 95       	lsr	r24
     2f6:	86 95       	lsr	r24
     2f8:	86 95       	lsr	r24
     2fa:	87 70       	andi	r24, 0x07	; 7
     2fc:	fb 01       	movw	r30, r22
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <__EEPROM_REGION_LENGTH__+0x104>
     300:	ee 0f       	add	r30, r30
     302:	ff 1f       	adc	r31, r31
     304:	8a 95       	dec	r24
     306:	e2 f7       	brpl	.-8      	; 0x300 <__EEPROM_REGION_LENGTH__+0x100>
     308:	cf 01       	movw	r24, r30
     30a:	80 95       	com	r24
     30c:	9c 91       	ld	r25, X
     30e:	89 23       	and	r24, r25
     310:	8c 93       	st	X, r24
					info.com.rv_error_cnt++;
     312:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <info+0x3>
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <info+0x3>
     31c:	07 c0       	rjmp	.+14     	; 0x32c <__EEPROM_REGION_LENGTH__+0x12c>
				} else {
					p->unreachable_cnt++;
     31e:	8f 5f       	subi	r24, 0xFF	; 255
     320:	84 83       	std	Z+4, r24	; 0x04
					info.com.rv_error_all_cnt++;
     322:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <info+0x4>
     326:	8f 5f       	subi	r24, 0xFF	; 255
     328:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <info+0x4>
     32c:	f9 01       	movw	r30, r18
     32e:	d5 cf       	rjmp	.-86     	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
     330:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <pbegin_data+0x1>
     334:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <pbegin_data>
				}
			}
		}
	}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	bf 90       	pop	r11
     34a:	af 90       	pop	r10
     34c:	08 95       	ret

0000034e <timeout_for_answer>:
	}
}

static void timeout_for_answer(void) {
	// Защита от запаздалого ответа
	cli();
     34e:	f8 94       	cli
	status &= ~MASTER_MODE;
     350:	83 2d       	mov	r24, r3
     352:	8b 7f       	andi	r24, 0xFB	; 251
     354:	38 2e       	mov	r3, r24
	sei();
     356:	78 94       	sei

	M_OCR = IBBPC_40;
     358:	8a ea       	ldi	r24, 0xAA	; 170
     35a:	83 bd       	out	0x23, r24	; 35
	ptf = &idle_40;
     35c:	8b ed       	ldi	r24, 0xDB	; 219
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     364:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
		transit_accepted = transit = 0;
	} 
	else
#endif
	{
		read_answer();
     368:	0e 94 b4 00 	call	0x168	; 0x168 <read_answer>
	}
	M_UCSRB = RX_ENABLED;
     36c:	80 e9       	ldi	r24, 0x90	; 144
     36e:	8a b9       	out	0x0a, r24	; 10
     370:	08 95       	ret

00000372 <answer_has_been_recived>:
}

static void answer_has_been_recived(void) {
	ptf = &idle_40;
     372:	8b ed       	ldi	r24, 0xDB	; 219
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     37a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	status &= ~MASTER_MODE;
     37e:	83 2d       	mov	r24, r3
     380:	8b 7f       	andi	r24, 0xFB	; 251
     382:	38 2e       	mov	r3, r24
		transit_accepted = transit = 0;
	} 
	else
#endif
	{
		read_answer();
     384:	0e 94 b4 00 	call	0x168	; 0x168 <read_answer>
	}
	M_UCSRB = RX_ENABLED;
     388:	80 e9       	ldi	r24, 0x90	; 144
     38a:	8a b9       	out	0x0a, r24	; 10
     38c:	08 95       	ret

0000038e <inc_ac>:
	ptf();
	//#endif // VIRTUAL
}

static uint8_t inc_ac(void) {
	ac = ac + 1;
     38e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <ac>
     392:	8f 5f       	subi	r24, 0xFF	; 255
     394:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <ac>
	//	if (ac > nomm) ac = 1; // этот счетчик очиститься автоматичеси после синхрофрейма
	if (ac == MY_ADDRESS) {
     398:	89 30       	cpi	r24, 0x09	; 9
     39a:	59 f4       	brne	.+22     	; 0x3b2 <inc_ac+0x24>
		//	M_OCR = IBBPC_3 - M_TCNT;
		ptf = &access_time;
     39c:	84 e0       	ldi	r24, 0x04	; 4
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     3a4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
		status |= HIGH_PRIORITY;
     3a8:	83 2d       	mov	r24, r3
     3aa:	80 61       	ori	r24, 0x10	; 16
     3ac:	38 2e       	mov	r3, r24
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	08 95       	ret
		return 1;
	}
	return 0;
     3b2:	80 e0       	ldi	r24, 0x00	; 0
}
     3b4:	08 95       	ret

000003b6 <idle_40>:

static void idle_40(void) {
	ibbpc = 4;
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ibbpc>
	if (status & SYNC) {
     3bc:	30 fc       	sbrc	r3, 0
     3be:	09 c0       	rjmp	.+18     	; 0x3d2 <idle_40+0x1c>
		if (inc_ac()) {
			return;
		}
	}
	M_OCR = IBBPC_10;
     3c0:	84 e6       	ldi	r24, 0x64	; 100
     3c2:	83 bd       	out	0x23, r24	; 35
	ptf = idle_10;
     3c4:	8e ee       	ldi	r24, 0xEE	; 238
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     3cc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
     3d0:	08 95       	ret
}

static void idle_40(void) {
	ibbpc = 4;
	if (status & SYNC) {
		if (inc_ac()) {
     3d2:	0e 94 c7 01 	call	0x38e	; 0x38e <inc_ac>
     3d6:	88 23       	and	r24, r24
     3d8:	99 f3       	breq	.-26     	; 0x3c0 <idle_40+0xa>
     3da:	08 95       	ret

000003dc <idle_10>:
	M_OCR = IBBPC_10;
	ptf = idle_10;
}

static void idle_10(void) {
	ibbpc++;
     3dc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <ibbpc>
     3e0:	8f 5f       	subi	r24, 0xFF	; 255
     3e2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ibbpc>
	if (ibbpc >= 50) {
     3e6:	82 33       	cpi	r24, 0x32	; 50
     3e8:	50 f4       	brcc	.+20     	; 0x3fe <idle_10+0x22>
		//		PORTC ^= (1 << PC5);
#endif
		send_sync_frame();
		return;
	}
	if (status & SYNC) {
     3ea:	30 fe       	sbrs	r3, 0
     3ec:	0c c0       	rjmp	.+24     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
		if ((status & LAST_MASTER) && (ibbpc >= 36)) {
     3ee:	33 fe       	sbrs	r3, 3
     3f0:	08 c0       	rjmp	.+16     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
     3f2:	84 32       	cpi	r24, 0x24	; 36
     3f4:	30 f0       	brcs	.+12     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
#ifdef MARKER_DEBUG
			LED_PORT ^= (1 << MARKER_LED);
     3f6:	92 b3       	in	r25, 0x12	; 18
     3f8:	80 e2       	ldi	r24, 0x20	; 32
     3fa:	89 27       	eor	r24, r25
     3fc:	82 bb       	out	0x12, r24	; 18
#endif
			send_sync_frame();
     3fe:	0c 94 9f 00 	jmp	0x13e	; 0x13e <send_sync_frame>
		} else {
			inc_ac();
     402:	0c 94 c7 01 	jmp	0x38e	; 0x38e <inc_ac>
     406:	08 95       	ret

00000408 <access_time>:
	uint16_t pr_addr;
	uint8_t* ptr;
	uint8_t marker;

	// If there are no remote data
	if (!rdata[0].val.device_addr || r_data_cnt) return 0;
     408:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <rdata+0x1>
     40c:	28 7f       	andi	r18, 0xF8	; 248
     40e:	09 f4       	brne	.+2      	; 0x412 <access_time+0xa>
     410:	a0 c0       	rjmp	.+320    	; 0x552 <__stack+0xf3>
     412:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <r_data_cnt>
     416:	21 11       	cpse	r18, r1
     418:	9c c0       	rjmp	.+312    	; 0x552 <__stack+0xf3>

	if (pend_data != rdata && (pend_data - 1)->val.marker == M_ARRAY_END) {
     41a:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <pend_data>
     41e:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <pend_data+0x1>
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	27 38       	cpi	r18, 0x87	; 135
     426:	34 07       	cpc	r19, r20
     428:	61 f0       	breq	.+24     	; 0x442 <access_time+0x3a>
     42a:	f9 01       	movw	r30, r18
     42c:	35 97       	sbiw	r30, 0x05	; 5
     42e:	23 81       	ldd	r18, Z+3	; 0x03
     430:	20 7c       	andi	r18, 0xC0	; 192
     432:	20 34       	cpi	r18, 0x40	; 64
     434:	31 f4       	brne	.+12     	; 0x442 <access_time+0x3a>
		pend_data = rdata;
     436:	27 e8       	ldi	r18, 0x87	; 135
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <pend_data+0x1>
     43e:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <pend_data>
	}

	pbegin_data = pend_data;
     442:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <pend_data>
     446:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <pend_data+0x1>
     44a:	f0 93 71 00 	sts	0x0071, r31	; 0x800071 <pbegin_data+0x1>
     44e:	e0 93 70 00 	sts	0x0070, r30	; 0x800070 <pbegin_data>

	frame.h.sl_addr = pend_data->val.device_addr;
     452:	21 81       	ldd	r18, Z+1	; 0x01
     454:	26 95       	lsr	r18
     456:	26 95       	lsr	r18
     458:	26 95       	lsr	r18
     45a:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <frame>
	frame.h.m_addr = MY_ADDRESS;
     45e:	29 e0       	ldi	r18, 0x09	; 9
     460:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <frame+0x1>
	cur_req_num = frame.h.fun_num = (pend_data->val.data_rw_type << 1) | pend_data->val.is_bit;
     464:	23 81       	ldd	r18, Z+3	; 0x03
     466:	22 fb       	bst	r18, 2
     468:	88 27       	eor	r24, r24
     46a:	80 f9       	bld	r24, 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	91 81       	ldd	r25, Z+1	; 0x01
     474:	92 fb       	bst	r25, 2
     476:	99 27       	eor	r25, r25
     478:	90 f9       	bld	r25, 0
     47a:	89 2b       	or	r24, r25
     47c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <frame+0x2>
     480:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <cur_req_num>

	if (cur_req_num == REQ_READ_BYTES || cur_req_num == REQ_READ_BITS) {
     484:	9e ef       	ldi	r25, 0xFE	; 254
     486:	98 0f       	add	r25, r24
     488:	92 30       	cpi	r25, 0x02	; 2
     48a:	50 f4       	brcc	.+20     	; 0x4a0 <__stack+0x41>
		pr_addr = 0xffff;
		frame.r_read_bytes.addr_begin = pend_data->val.remote_addr;
     48c:	20 81       	ld	r18, Z
     48e:	91 81       	ldd	r25, Z+1	; 0x01
     490:	93 70       	andi	r25, 0x03	; 3
     492:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <frame+0x5>
     496:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <frame+0x6>
		frame.r_read_bytes.nbytes = 0;
     49a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <frame+0x4>
     49e:	0b c0       	rjmp	.+22     	; 0x4b6 <__stack+0x57>
		ptr = (uint8_t*)&frame.r_read_bytes.crc;
	} else if (cur_req_num == REQ_WRITE_BYTES) {
     4a0:	81 11       	cpse	r24, r1
     4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <__stack+0x57>
		frame.r_write_bytes.len = 0;
     4a4:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <frame+0x4>
		frame.r_write_bytes.addr = pend_data->val.remote_addr;
     4a8:	20 81       	ld	r18, Z
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	93 70       	andi	r25, 0x03	; 3
     4ae:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <frame+0x5>
     4b2:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <frame+0x6>
	GICR = (1 << INT0);
	M_UCSRB = RX_ENABLED;
}


static void access_time(void) {
     4b6:	4f ef       	ldi	r20, 0xFF	; 255
     4b8:	5f ef       	ldi	r21, 0xFF	; 255
		frame.r_write_bytes.addr = pend_data->val.remote_addr;
	}

	do {
		size = pend_data->val.bit_size;
		if (cur_req_num == REQ_READ_BYTES) {
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	69 f4       	brne	.+26     	; 0x4d8 <__stack+0x79>
			frame.r_read_bytes.nbytes += size + 1;
     4be:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <frame+0x4>
     4c2:	21 e0       	ldi	r18, 0x01	; 1
     4c4:	29 0f       	add	r18, r25
		frame.r_write_bytes.len = 0;
		frame.r_write_bytes.addr = pend_data->val.remote_addr;
	}

	do {
		size = pend_data->val.bit_size;
     4c6:	93 81       	ldd	r25, Z+3	; 0x03
     4c8:	96 95       	lsr	r25
     4ca:	96 95       	lsr	r25
     4cc:	96 95       	lsr	r25
     4ce:	97 70       	andi	r25, 0x07	; 7
		if (cur_req_num == REQ_READ_BYTES) {
			frame.r_read_bytes.nbytes += size + 1;
     4d0:	92 0f       	add	r25, r18
     4d2:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <frame+0x4>
     4d6:	0f c0       	rjmp	.+30     	; 0x4f6 <__stack+0x97>
		} else if (cur_req_num == REQ_READ_BITS) {
     4d8:	83 30       	cpi	r24, 0x03	; 3
     4da:	69 f4       	brne	.+26     	; 0x4f6 <__stack+0x97>
			uint16_t addr = pend_data->val.remote_addr;
     4dc:	20 81       	ld	r18, Z
     4de:	91 81       	ldd	r25, Z+1	; 0x01
     4e0:	39 2f       	mov	r19, r25
     4e2:	33 70       	andi	r19, 0x03	; 3
			if (pr_addr != addr) {
     4e4:	24 17       	cp	r18, r20
     4e6:	35 07       	cpc	r19, r21
     4e8:	31 f0       	breq	.+12     	; 0x4f6 <__stack+0x97>
				pr_addr = addr;
				frame.r_read_bits.nbytes += 1;
     4ea:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <frame+0x4>
     4ee:	9f 5f       	subi	r25, 0xFF	; 255
     4f0:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <frame+0x4>
     4f4:	a9 01       	movw	r20, r18
		//		(*ptr++) = *((uint8_t*)pend_data->val.local_addr) & (1 << pend_data->val.size) ? 0xFF : 0;
		//		(*ptr++) = *((uint8_t*)(pend_data->val.local_addr + 1)) & (1 << pend_data->val.size) ? 0xFF : 0; // status
		//		req_size = req_size + 1;
		//		break;
		//	}
	} while (!(marker = (pend_data++)->val.marker & (M_ARRAY_END | M_LAST_DATA_IN_REQUEST)));
     4f6:	93 81       	ldd	r25, Z+3	; 0x03
     4f8:	92 95       	swap	r25
     4fa:	96 95       	lsr	r25
     4fc:	96 95       	lsr	r25
     4fe:	93 70       	andi	r25, 0x03	; 3
     500:	35 96       	adiw	r30, 0x05	; 5
     502:	99 23       	and	r25, r25
     504:	d1 f2       	breq	.-76     	; 0x4ba <__stack+0x5b>
     506:	f0 93 6f 00 	sts	0x006F, r31	; 0x80006f <pend_data+0x1>
     50a:	e0 93 6e 00 	sts	0x006E, r30	; 0x80006e <pend_data>

	if (marker == M_ARRAY_END) r_data_cnt = R_DATA_PERIOD;
     50e:	91 30       	cpi	r25, 0x01	; 1
     510:	19 f4       	brne	.+6      	; 0x518 <__stack+0xb9>
     512:	8a e0       	ldi	r24, 0x0A	; 10
     514:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <r_data_cnt>

	frame.h.len = (void*)ptr - (void*)&frame + 2;
     518:	8c ee       	ldi	r24, 0xEC	; 236
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	63 ef       	ldi	r22, 0xF3	; 243
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	6e 5f       	subi	r22, 0xFE	; 254
     522:	68 1b       	sub	r22, r24
     524:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <frame+0x3>
	*((uint16_t*)ptr) = get_crc((void*)&frame, frame.h.len - 2);
     528:	62 50       	subi	r22, 0x02	; 2
     52a:	0e 94 4d 00 	call	0x9a	; 0x9a <get_crc>
     52e:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <frame+0x8>
     532:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <frame+0x7>
		transit_accepted = 0x00;
#endif
		result = send_request();
	}
	if (result) {
		M_OCR = IBBPC_30;
     536:	8c e8       	ldi	r24, 0x8C	; 140
     538:	83 bd       	out	0x23, r24	; 35
		ptf = &timeout_for_answer;
     53a:	87 ea       	ldi	r24, 0xA7	; 167
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     542:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
		status |= MASTER_MODE | LAST_MASTER;
		status &= ~DATA_RECIVED;
     546:	83 2d       	mov	r24, r3
     548:	8d 7f       	andi	r24, 0xFD	; 253
     54a:	8c 60       	ori	r24, 0x0C	; 12
     54c:	38 2e       	mov	r3, r24
		start_transmit();
     54e:	0c 94 6d 00 	jmp	0xda	; 0xda <start_transmit>
	} else {
		M_OCR = IBBPC_10;
     552:	84 e6       	ldi	r24, 0x64	; 100
     554:	83 bd       	out	0x23, r24	; 35
		//	M_TCNT = IBBPC_3;
		ptf = &idle_10;
     556:	8e ee       	ldi	r24, 0xEE	; 238
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     55e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
     562:	08 95       	ret

00000564 <net_init>:
	* (uint8_t*)(0x60) = 0x1A;
#endif // PC_LINK_VIRTUAL


	// LEDs config
	LED_DDR |= (1 << WORK_LED) | (1 << MARKER_LED);
     564:	81 b3       	in	r24, 0x11	; 17
     566:	80 63       	ori	r24, 0x30	; 48
     568:	81 bb       	out	0x11, r24	; 17

	pbegin_data = pend_data = rdata;
     56a:	87 e8       	ldi	r24, 0x87	; 135
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <pend_data+0x1>
     572:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <pend_data>
     576:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <pbegin_data+0x1>
     57a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <pbegin_data>

	status = IDLE;
     57e:	31 2c       	mov	r3, r1
	ibbpc_ev = 0;
     580:	21 2c       	mov	r2, r1

	ptf = &idle_40;
     582:	8b ed       	ldi	r24, 0xDB	; 219
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     58a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	M_OCR = IBBPC_40; // 17.3611111 us - one bit time
     58e:	8a ea       	ldi	r24, 0xAA	; 170
     590:	83 bd       	out	0x23, r24	; 35
	M_TCNT = 0;
     592:	14 bc       	out	0x24, r1	; 36

	// Init UART
	// PD0 - RX, PD1 - TX, PD2 - SL, PD3 - DIR
	pCurBufPtr = (void*)&frame;
     594:	8c ee       	ldi	r24, 0xEC	; 236
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <pCurBufPtr+0x1>
     59c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <pCurBufPtr>
	TX_RX_CTRL_DDR |= (1 << TX_RX_CTRL_PIN);
     5a0:	8b 9a       	sbi	0x11, 3	; 17
	TX_RX_CTRL_DDR |= (1 << PD1);
     5a2:	89 9a       	sbi	0x11, 1	; 17
	TX_RX_CTRL_DDR &= ~(1 << PD2);
     5a4:	8a 98       	cbi	0x11, 2	; 17
	M_UBRRL = lo8(UBRR_VALUE);
     5a6:	8c e0       	ldi	r24, 0x0C	; 12
     5a8:	89 b9       	out	0x09, r24	; 9
	M_UBRRH = hi8(UBRR_VALUE);
     5aa:	10 bc       	out	0x20, r1	; 32
	M_UCSRA = 0;
     5ac:	1b b8       	out	0x0b, r1	; 11
	// 1 - stop bit, parity - even, frame length 8 - bit.
	M_UCSRC = UCSRC_VALUE;
     5ae:	96 ea       	ldi	r25, 0xA6	; 166
     5b0:	90 bd       	out	0x20, r25	; 32
	M_UCSRB = RX_ENABLED;
     5b2:	90 e9       	ldi	r25, 0x90	; 144
     5b4:	9a b9       	out	0x0a, r25	; 10
	// External interrupt

	// Нужно захватывать именно начало байта т.к. прерывание по приему байта будет с опозданием.
	MCUCR = (1 << ISC00); //Any logical change on INT0 generates an interrupt request
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	95 bf       	out	0x35, r25	; 53
//	MCUCR = (1 << ISC00) | (1 << ISC01); //The rising edge of INT0 generates an interrupt request
	GIFR = (1 << INTF0);
     5ba:	90 e4       	ldi	r25, 0x40	; 64
     5bc:	9a bf       	out	0x3a, r25	; 58
	GICR = (1 << INT0);
     5be:	9b bf       	out	0x3b, r25	; 59
	// Timer 2
	M_TCCR = TIMER_ON;
     5c0:	85 bd       	out	0x25, r24	; 37
	M_TIMSK |= ALLOW_TIMER_INT;
     5c2:	89 b7       	in	r24, 0x39	; 57
     5c4:	80 68       	ori	r24, 0x80	; 128
     5c6:	89 bf       	out	0x39, r24	; 57
     5c8:	08 95       	ret

000005ca <net_poll>:
				start_transmit();
			}
			v_busy = 0x00;
		} */
		//#else
	if (status & DATA_RECIVED) {
     5ca:	93 2d       	mov	r25, r3
     5cc:	31 fe       	sbrs	r3, 1
     5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <net_poll+0x16>
		if (ibbpc_ev >= 1) {
     5d0:	22 20       	and	r2, r2
     5d2:	01 f1       	breq	.+64     	; 0x614 <net_poll+0x4a>
			info.com.e_slave_timeout++;
     5d4:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <info+0x2>
     5d8:	8f 5f       	subi	r24, 0xFF	; 255
     5da:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <info+0x2>
     5de:	1a c0       	rjmp	.+52     	; 0x614 <net_poll+0x4a>
		}
		goto call_fun;
	}

	if (!ibbpc_ev) return;
     5e0:	82 2d       	mov	r24, r2
     5e2:	22 20       	and	r2, r2
     5e4:	f1 f0       	breq	.+60     	; 0x622 <net_poll+0x58>

	if (ibbpc_ev > 1) {
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	a0 f0       	brcs	.+40     	; 0x612 <net_poll+0x48>
		// Выход из синхронизированного состояния
		info.com.synclost++;
     5ea:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <info+0x1>
     5ee:	8f 5f       	subi	r24, 0xFF	; 255
     5f0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <info+0x1>
		M_OCR = IBBPC_40;
     5f4:	8a ea       	ldi	r24, 0xAA	; 170
     5f6:	83 bd       	out	0x23, r24	; 35
		ptf = idle_40;
     5f8:	8b ed       	ldi	r24, 0xDB	; 219
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     600:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
		M_UCSRB = RX_ENABLED;
     604:	80 e9       	ldi	r24, 0x90	; 144
     606:	8a b9       	out	0x0a, r24	; 10
		status &= ~SYNC;
		ibbpc_ev = 0;
     608:	21 2c       	mov	r2, r1
#ifdef PC_LINK
		//	transit = 0x00;
#endif
		status &= ~HIGH_PRIORITY;
     60a:	83 2d       	mov	r24, r3
     60c:	8e 7e       	andi	r24, 0xEE	; 238
     60e:	38 2e       	mov	r3, r24
		return;
     610:	08 95       	ret
	}
	ibbpc_ev = 0;
     612:	21 2c       	mov	r2, r1
call_fun:
	status &= ~HIGH_PRIORITY;
     614:	9f 7e       	andi	r25, 0xEF	; 239
     616:	39 2e       	mov	r3, r25
	ptf();
     618:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <ptf>
     61c:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <ptf+0x1>
     620:	09 94       	ijmp
     622:	08 95       	ret

00000624 <__vector_11>:

	M_UDR = (*pCurBufPtr);
}

/* USART, Rx Complete */
ISR(RX_ISR) {
     624:	1f 92       	push	r1
     626:	0f 92       	push	r0
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	0f 92       	push	r0
     62c:	11 24       	eor	r1, r1
     62e:	2f 93       	push	r18
     630:	3f 93       	push	r19
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	ef 93       	push	r30
     638:	ff 93       	push	r31
	uint8_t tmp;
	tmp = M_UDR;
     63a:	9c b1       	in	r25, 0x0c	; 12
	//	if (M_UCSRA & (1 << PE))
	//		return;	
	if (rx_len >= MAX_FRAME_LEN) return;
     63c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <rx_len>
     640:	88 38       	cpi	r24, 0x88	; 136
     642:	78 f4       	brcc	.+30     	; 0x662 <__vector_11+0x3e>
	rx_len = rx_len + 1;
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <rx_len>
	(*pCurBufPtr++) = tmp;
     64a:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pCurBufPtr>
     64e:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pCurBufPtr+0x1>
     652:	9f 01       	movw	r18, r30
     654:	2f 5f       	subi	r18, 0xFF	; 255
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <pCurBufPtr+0x1>
     65c:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <pCurBufPtr>
     660:	90 83       	st	Z, r25
}
     662:	ff 91       	pop	r31
     664:	ef 91       	pop	r30
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	3f 91       	pop	r19
     66c:	2f 91       	pop	r18
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_13>:

/* USART, Tx Completed */
ISR(TX_ISR) {
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	8f 93       	push	r24
     684:	9f 93       	push	r25
     686:	ef 93       	push	r30
     688:	ff 93       	push	r31
	tx_count = tx_count - 1;
     68a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tx_count>
     68e:	81 50       	subi	r24, 0x01	; 1
     690:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tx_count>
	if (tx_count) {
     694:	88 23       	and	r24, r24
     696:	69 f0       	breq	.+26     	; 0x6b2 <__vector_13+0x3a>
		M_UDR = *(++pCurBufPtr);
     698:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pCurBufPtr>
     69c:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pCurBufPtr+0x1>
     6a0:	cf 01       	movw	r24, r30
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <pCurBufPtr+0x1>
     6a8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <pCurBufPtr>
     6ac:	81 81       	ldd	r24, Z+1	; 0x01
     6ae:	8c b9       	out	0x0c, r24	; 12
     6b0:	0b c0       	rjmp	.+22     	; 0x6c8 <__vector_13+0x50>
#ifdef DEBUG_CMD
		if (frame.h.len > 1) {
			//			MAKE_DEBUG_CMD(MY_ADDRESS, 2);
		}
#endif // DEBUG_CMD
		MAX485_IN();
     6b2:	93 98       	cbi	0x12, 3	; 18
		M_TCCR = TIMER_ON;
     6b4:	8c e0       	ldi	r24, 0x0C	; 12
     6b6:	85 bd       	out	0x25, r24	; 37
		rx_len = 0;
     6b8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <rx_len>
		pCurBufPtr = (void*)&frame;
     6bc:	8c ee       	ldi	r24, 0xEC	; 236
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <pCurBufPtr+0x1>
     6c4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <pCurBufPtr>
	}
}
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	0f 90       	pop	r0
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	0f 90       	pop	r0
     6d6:	1f 90       	pop	r1
     6d8:	18 95       	reti

000006da <__vector_1>:

/* External Interrupt Request 0 */
/* Falling edge - bus has been captured */
/* Rising edge - signal loss */
ISR(INT0_vect) {
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	2f 93       	push	r18
     6e6:	3f 93       	push	r19
     6e8:	4f 93       	push	r20
     6ea:	5f 93       	push	r21
     6ec:	6f 93       	push	r22
     6ee:	7f 93       	push	r23
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	af 93       	push	r26
     6f6:	bf 93       	push	r27
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
	// bus has been captured
	if (!(PIND & (1 << PD2))) {
     6fc:	82 99       	sbic	0x10, 2	; 16
     6fe:	0a c0       	rjmp	.+20     	; 0x714 <__vector_1+0x3a>
		ibbpc_ev = 0;
     700:	21 2c       	mov	r2, r1
		M_TCCR = TIMER_OFF;
     702:	15 bc       	out	0x25, r1	; 37
		M_TCNT = 0;
     704:	14 bc       	out	0x24, r1	; 36
		M_TIFR |= 1 << M_OCF;
     706:	88 b7       	in	r24, 0x38	; 56
     708:	80 68       	ori	r24, 0x80	; 128
     70a:	88 bf       	out	0x38, r24	; 56
		status &= ~DATA_RECIVED;
     70c:	83 2d       	mov	r24, r3
     70e:	8d 7f       	andi	r24, 0xFD	; 253
     710:	38 2e       	mov	r3, r24
		return;
     712:	62 c0       	rjmp	.+196    	; 0x7d8 <__vector_1+0xfe>
	}

	// signal loss
	M_UCSRB = 0;
     714:	1a b8       	out	0x0a, r1	; 10
	M_OCR = IBBPC_40;
     716:	8a ea       	ldi	r24, 0xAA	; 170
     718:	83 bd       	out	0x23, r24	; 35
	M_TCCR = TIMER_ON;
     71a:	8c e0       	ldi	r24, 0x0C	; 12
     71c:	85 bd       	out	0x25, r24	; 37
	ptf = &idle_40;
     71e:	8b ed       	ldi	r24, 0xDB	; 219
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     726:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>

	// Возможно, одно из устройств передало синхронизирующий фрейм
	if (rx_len == 1 && *((uint8_t*)&frame) & 0x80) {
     72a:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <rx_len>
     72e:	61 30       	cpi	r22, 0x01	; 1
     730:	79 f4       	brne	.+30     	; 0x750 <__vector_1+0x76>
     732:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <frame>
     736:	87 ff       	sbrs	r24, 7
     738:	45 c0       	rjmp	.+138    	; 0x7c4 <__vector_1+0xea>
		// Синхронизируемся...
		ac = 0;
     73a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <ac>
		status &= ~(LAST_MASTER | MASTER_MODE);
		status |= SYNC;
     73e:	83 2d       	mov	r24, r3
     740:	83 7f       	andi	r24, 0xF3	; 243
     742:	81 60       	ori	r24, 0x01	; 1
     744:	38 2e       	mov	r3, r24
#ifdef MARKER_DEBUG
		LED_PORT ^= (1 << MARKER_LED);
     746:	92 b3       	in	r25, 0x12	; 18
     748:	80 e2       	ldi	r24, 0x20	; 32
     74a:	89 27       	eor	r24, r25
     74c:	82 bb       	out	0x12, r24	; 18
     74e:	3a c0       	rjmp	.+116    	; 0x7c4 <__vector_1+0xea>
#endif
	}
#ifdef DEBUG_CMD
	//		MAKE_DEBUG_CMD(MY_ADDRESS, 1);
#endif // DEBUG_CMD
	else if (rx_len < 4) {
     750:	64 30       	cpi	r22, 0x04	; 4
     752:	c0 f1       	brcs	.+112    	; 0x7c4 <__vector_1+0xea>
		ibbpc_ev++;
		ptf = &answer_has_been_recived;
		goto Rx_set;
	}
#endif
	else if (get_crc((void*)&frame, rx_len - 2) == *((uint16_t*)(pCurBufPtr - 2))) {
     754:	62 50       	subi	r22, 0x02	; 2
     756:	8c ee       	ldi	r24, 0xEC	; 236
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 4d 00 	call	0x9a	; 0x9a <get_crc>
     75e:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <pCurBufPtr>
     762:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <pCurBufPtr+0x1>
     766:	32 97       	sbiw	r30, 0x02	; 2
     768:	20 81       	ld	r18, Z
     76a:	31 81       	ldd	r19, Z+1	; 0x01
     76c:	82 17       	cp	r24, r18
     76e:	93 07       	cpc	r25, r19
     770:	49 f5       	brne	.+82     	; 0x7c4 <__vector_1+0xea>
		// Синхронизируемся каждый раз
		status |= SYNC;
     772:	83 2d       	mov	r24, r3
     774:	93 2d       	mov	r25, r3
     776:	91 60       	ori	r25, 0x01	; 1
     778:	39 2e       	mov	r3, r25
     77a:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <frame+0x1>
		// Если устройство - мастер ставим флаг "данные получены", выходим
		if (status & MASTER_MODE && frame.h.m_addr == MY_ADDRESS) {
     77e:	82 ff       	sbrs	r24, 2
     780:	0b c0       	rjmp	.+22     	; 0x798 <__vector_1+0xbe>
     782:	99 30       	cpi	r25, 0x09	; 9
     784:	49 f4       	brne	.+18     	; 0x798 <__vector_1+0xbe>
			status |= DATA_RECIVED;
     786:	83 60       	ori	r24, 0x03	; 3
     788:	38 2e       	mov	r3, r24
			ptf = &answer_has_been_recived;
     78a:	89 eb       	ldi	r24, 0xB9	; 185
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     792:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
			goto Rx_set;
     796:	18 c0       	rjmp	.+48     	; 0x7c8 <__vector_1+0xee>
		} else {
			ac = frame.h.m_addr;
     798:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <ac>
     79c:	87 7f       	andi	r24, 0xF7	; 247
			// устанавливаем счетчик
			// если устройство не участвует в обмене он установаиться 2 раза
			// если адресуемое устройство ответит
		}
		// Если устройство не мастер сброс флага предыдущего мастера
		status &= ~LAST_MASTER;
     79e:	98 2f       	mov	r25, r24
     7a0:	91 60       	ori	r25, 0x01	; 1
     7a2:	39 2e       	mov	r3, r25
		if (frame.h.sl_addr == MY_ADDRESS) {
     7a4:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <frame>
     7a8:	99 30       	cpi	r25, 0x09	; 9
     7aa:	61 f4       	brne	.+24     	; 0x7c4 <__vector_1+0xea>
			//	{
			//		ibbpc_ev = 1;
			//	} else {
			//		M_OCR = IBBPC_8 - M_TCNT;
			//	}
			status |= HIGH_PRIORITY;
     7ac:	81 61       	ori	r24, 0x11	; 17
     7ae:	38 2e       	mov	r3, r24
#ifdef DEBUG_CMD
			//				MAKE_DEBUG_CMD_0060(MY_ADDRESS, M_TCNT);
#endif // DEBUG_CMD
			ptf = &send_answer;
     7b0:	8b ee       	ldi	r24, 0xEB	; 235
     7b2:	94 e0       	ldi	r25, 0x04	; 4
     7b4:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     7b8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
			M_TCNT = 0; // new
     7bc:	14 bc       	out	0x24, r1	; 36
			M_OCR = IBBPC_8;
     7be:	83 e2       	ldi	r24, 0x23	; 35
     7c0:	83 bd       	out	0x23, r24	; 35
			goto Rx_set;
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <__vector_1+0xee>
		}
	} else {
		// bad crc received. do nothing
	}
	M_UCSRB = RX_ENABLED;
     7c4:	80 e9       	ldi	r24, 0x90	; 144
     7c6:	8a b9       	out	0x0a, r24	; 10
Rx_set:
	rx_len = 0;
     7c8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <rx_len>
	pCurBufPtr = (void*)&frame;
     7cc:	8c ee       	ldi	r24, 0xEC	; 236
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <pCurBufPtr+0x1>
     7d4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <pCurBufPtr>
}
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <prepare_answer>:

	return 1;
}

/* Slave mode */
uint8_t prepare_answer(void) {
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	Frame* udp_frame = (void*)udp->data;
#	endif
#endif
	switch (frame.h.fun_num) {
     7fe:	c0 91 ee 00 	lds	r28, 0x00EE	; 0x8000ee <frame+0x2>
     802:	cb 30       	cpi	r28, 0x0B	; 11
     804:	09 f4       	brne	.+2      	; 0x808 <prepare_answer+0xe>
     806:	96 c0       	rjmp	.+300    	; 0x934 <prepare_answer+0x13a>
     808:	40 f5       	brcc	.+80     	; 0x85a <prepare_answer+0x60>
     80a:	c4 30       	cpi	r28, 0x04	; 4
     80c:	60 f4       	brcc	.+24     	; 0x826 <prepare_answer+0x2c>
     80e:	c2 30       	cpi	r28, 0x02	; 2
     810:	08 f0       	brcs	.+2      	; 0x814 <prepare_answer+0x1a>
     812:	80 c0       	rjmp	.+256    	; 0x914 <prepare_answer+0x11a>
     814:	cc 23       	and	r28, r28
     816:	09 f4       	brne	.+2      	; 0x81a <prepare_answer+0x20>
     818:	4c c0       	rjmp	.+152    	; 0x8b2 <prepare_answer+0xb8>
     81a:	c1 30       	cpi	r28, 0x01	; 1
     81c:	09 f0       	breq	.+2      	; 0x820 <prepare_answer+0x26>
     81e:	d6 c0       	rjmp	.+428    	; 0x9cc <prepare_answer+0x1d2>
     820:	20 e0       	ldi	r18, 0x00	; 0
	case REQ_WRITE_BITS: {
		// | bit_addr | bit_mask | bit_value | bit_status |
		for (uint8_t i = 0; i < frame.r_write_bits.nbits; ++i) {
			uint8_t val = *((uint8_t*)frame.r_write_bits.data->bit_addr);

			val &= frame.r_write_bits.data[i].bit_mask;
     822:	35 e0       	ldi	r19, 0x05	; 5
     824:	52 c0       	rjmp	.+164    	; 0x8ca <prepare_answer+0xd0>
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	Frame* udp_frame = (void*)udp->data;
#	endif
#endif
	switch (frame.h.fun_num) {
     826:	c8 30       	cpi	r28, 0x08	; 8
     828:	09 f4       	brne	.+2      	; 0x82c <prepare_answer+0x32>
     82a:	91 c0       	rjmp	.+290    	; 0x94e <prepare_answer+0x154>
     82c:	c9 30       	cpi	r28, 0x09	; 9
     82e:	09 f0       	breq	.+2      	; 0x832 <prepare_answer+0x38>
     830:	cd c0       	rjmp	.+410    	; 0x9cc <prepare_answer+0x1d2>
		goto _crc_for_udp;
	}
#endif
	// Write Bit
	case REQ_WRITE_BIT: {
		*((uint8_t*)frame.r_write_bit.bit_addr) &= ~frame.r_write_bit.bit_n;
     832:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <frame+0x4>
     836:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <frame+0x5>
     83a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <frame+0x6>
     83e:	80 95       	com	r24
     840:	90 81       	ld	r25, Z
     842:	89 23       	and	r24, r25
     844:	80 83       	st	Z, r24
		*((uint8_t*)frame.r_write_bit.bit_addr) |= frame.r_write_bit.bit_val;
     846:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <frame+0x4>
     84a:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <frame+0x5>
     84e:	90 81       	ld	r25, Z
     850:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <frame+0x7>
     854:	89 2b       	or	r24, r25
     856:	80 83       	st	Z, r24
     858:	b7 c0       	rjmp	.+366    	; 0x9c8 <prepare_answer+0x1ce>
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	Frame* udp_frame = (void*)udp->data;
#	endif
#endif
	switch (frame.h.fun_num) {
     85a:	c7 34       	cpi	r28, 0x47	; 71
     85c:	09 f4       	brne	.+2      	; 0x860 <prepare_answer+0x66>
     85e:	71 c0       	rjmp	.+226    	; 0x942 <prepare_answer+0x148>
     860:	60 f4       	brcc	.+24     	; 0x87a <prepare_answer+0x80>
     862:	c5 34       	cpi	r28, 0x45	; 69
     864:	09 f4       	brne	.+2      	; 0x868 <prepare_answer+0x6e>
     866:	69 c0       	rjmp	.+210    	; 0x93a <prepare_answer+0x140>
     868:	c6 34       	cpi	r28, 0x46	; 70
     86a:	09 f0       	breq	.+2      	; 0x86e <prepare_answer+0x74>
     86c:	af c0       	rjmp	.+350    	; 0x9cc <prepare_answer+0x1d2>
		MAKE_DEBUG_CMD_0060(MY_ADDRESS, DBG_NET_WRITE_PAGE_END);
#endif
		return ANSWER_ON_REQUEST;
	}
	case F_NO_ANSWER | REQ_REPLACE_ALG: {
		status &= ~SYNC;
     86e:	83 2d       	mov	r24, r3
     870:	8e 7f       	andi	r24, 0xFE	; 254
     872:	38 2e       	mov	r3, r24
		info.com.result = replace_alg();
     874:	0e 94 14 06 	call	0xc28	; 0xc28 <replace_alg>
     878:	95 c0       	rjmp	.+298    	; 0x9a4 <prepare_answer+0x1aa>
	ip_packet_t* ip = (void*)(eth_frame->data);
	udp_packet_t* udp = (void*)(ip->data);
	Frame* udp_frame = (void*)udp->data;
#	endif
#endif
	switch (frame.h.fun_num) {
     87a:	cc 34       	cpi	r28, 0x4C	; 76
     87c:	09 f4       	brne	.+2      	; 0x880 <prepare_answer+0x86>
     87e:	73 c0       	rjmp	.+230    	; 0x966 <prepare_answer+0x16c>
     880:	cd 34       	cpi	r28, 0x4D	; 77
     882:	09 f4       	brne	.+2      	; 0x886 <prepare_answer+0x8c>
     884:	7f c0       	rjmp	.+254    	; 0x984 <prepare_answer+0x18a>
     886:	ca 34       	cpi	r28, 0x4A	; 74
     888:	09 f0       	breq	.+2      	; 0x88c <prepare_answer+0x92>
     88a:	a0 c0       	rjmp	.+320    	; 0x9cc <prepare_answer+0x1d2>
		eeprom_write_block((void*)frame.r_write_epprom.data, (void*)frame.r_write_epprom.addr, frame.r_write_epprom.len);
		info.com.result = 0x00;
		return ANSWER_ON_REQUEST;
	}
	case F_NO_ANSWER | REQ_WRITE_RD: {
		status &= ~SYNC;
     88c:	83 2d       	mov	r24, r3
     88e:	8e 7f       	andi	r24, 0xFE	; 254
     890:	38 2e       	mov	r3, r24
	pCurBufPtr = (void*)&frame;
}

#ifndef PC_LINK
static uint8_t write_rd(void) {
	pbegin_data = pend_data = rdata;
     892:	87 e8       	ldi	r24, 0x87	; 135
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <pend_data+0x1>
     89a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <pend_data>
     89e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <pbegin_data+0x1>
     8a2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <pbegin_data>
	memcpy(rdata, frame.r_write_rd.data, frame.r_write_rd.size);
     8a6:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <frame+0x5>
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	62 ef       	ldi	r22, 0xF2	; 242
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	75 c0       	rjmp	.+234    	; 0x99c <prepare_answer+0x1a2>
#endif
	switch (frame.h.fun_num) {
		// Write Bytes
	case REQ_WRITE_BYTES: {
		void* begin_addr = (void*)frame.r_write_bytes.addr;
		memcpy(begin_addr, frame.r_write_bytes.data, frame.r_write_bytes.len);
     8b2:	40 91 f0 00 	lds	r20, 0x00F0	; 0x8000f0 <frame+0x4>
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	63 ef       	ldi	r22, 0xF3	; 243
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <frame+0x5>
     8c0:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <frame+0x6>
     8c4:	0e 94 bf 08 	call	0x117e	; 0x117e <memcpy>
		return IMMEDIATE_ANSWER;
     8c8:	82 c0       	rjmp	.+260    	; 0x9ce <prepare_answer+0x1d4>
	}
	// Write Bits
	case REQ_WRITE_BITS: {
		// | bit_addr | bit_mask | bit_value | bit_status |
		for (uint8_t i = 0; i < frame.r_write_bits.nbits; ++i) {
     8ca:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <frame+0x4>
     8ce:	28 17       	cp	r18, r24
     8d0:	08 f0       	brcs	.+2      	; 0x8d4 <prepare_answer+0xda>
     8d2:	7a c0       	rjmp	.+244    	; 0x9c8 <prepare_answer+0x1ce>
			uint8_t val = *((uint8_t*)frame.r_write_bits.data->bit_addr);
     8d4:	a0 91 f1 00 	lds	r26, 0x00F1	; 0x8000f1 <frame+0x5>
     8d8:	b0 91 f2 00 	lds	r27, 0x00F2	; 0x8000f2 <frame+0x6>
     8dc:	9c 91       	ld	r25, X

			val &= frame.r_write_bits.data[i].bit_mask;
     8de:	42 2f       	mov	r20, r18
     8e0:	50 e0       	ldi	r21, 0x00	; 0
     8e2:	34 9f       	mul	r19, r20
     8e4:	f0 01       	movw	r30, r0
     8e6:	35 9f       	mul	r19, r21
     8e8:	f0 0d       	add	r31, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	e4 51       	subi	r30, 0x14	; 20
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	87 81       	ldd	r24, Z+7	; 0x07
     8f2:	98 23       	and	r25, r24
			val |= frame.r_write_bits.data[i].bit_val | frame.r_write_bits.data[i].bit_status;
     8f4:	4f 5f       	subi	r20, 0xFF	; 255
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255
     8f8:	34 9f       	mul	r19, r20
     8fa:	e0 01       	movw	r28, r0
     8fc:	35 9f       	mul	r19, r21
     8fe:	d0 0d       	add	r29, r0
     900:	11 24       	eor	r1, r1
     902:	c4 51       	subi	r28, 0x14	; 20
     904:	df 4f       	sbci	r29, 0xFF	; 255

			*((uint8_t*)frame.r_write_bits.data->bit_addr) = val;
     906:	40 85       	ldd	r20, Z+8	; 0x08
     908:	8c 81       	ldd	r24, Y+4	; 0x04
     90a:	84 2b       	or	r24, r20
     90c:	89 2b       	or	r24, r25
     90e:	8c 93       	st	X, r24
		return IMMEDIATE_ANSWER;
	}
	// Write Bits
	case REQ_WRITE_BITS: {
		// | bit_addr | bit_mask | bit_value | bit_status |
		for (uint8_t i = 0; i < frame.r_write_bits.nbits; ++i) {
     910:	2f 5f       	subi	r18, 0xFF	; 255
     912:	db cf       	rjmp	.-74     	; 0x8ca <prepare_answer+0xd0>
	// Send Bytes
	case REQ_READ_BYTES:
	case REQ_READ_BITS: {
		// RD сгрупированы и отсортированы по адресу в слейве
		void* begin_addr = (void*)frame.r_read_bytes.addr_begin;
		memcpy(frame.a_read_bytes.data, begin_addr, frame.r_read_bytes.nbytes);
     914:	c0 91 f0 00 	lds	r28, 0x00F0	; 0x8000f0 <frame+0x4>
     918:	4c 2f       	mov	r20, r28
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <frame+0x5>
     920:	70 91 f2 00 	lds	r23, 0x00F2	; 0x8000f2 <frame+0x6>
     924:	81 ef       	ldi	r24, 0xF1	; 241
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 bf 08 	call	0x117e	; 0x117e <memcpy>
		frame.h.len = sizeof(frame_h) + sizeof(ans_read_bytes) + frame.r_read_bytes.nbytes + 2;
     92c:	c9 5f       	subi	r28, 0xF9	; 249
     92e:	c0 93 ef 00 	sts	0x00EF, r28	; 0x8000ef <frame+0x3>
		goto _crc_for_frame;
     932:	3c c0       	rjmp	.+120    	; 0x9ac <prepare_answer+0x1b2>
	}
#ifndef PC_LINK
	case REQ_REINIT_IO: {
		init_io();
     934:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <init_io>
     938:	47 c0       	rjmp	.+142    	; 0x9c8 <prepare_answer+0x1ce>
		return IMMEDIATE_ANSWER;
	}
	case F_NO_ANSWER | REQ_WRITE_PAGE: {
		status &= ~SYNC;
     93a:	83 2d       	mov	r24, r3
     93c:	8e 7f       	andi	r24, 0xFE	; 254
     93e:	38 2e       	mov	r3, r24
     940:	2f c0       	rjmp	.+94     	; 0x9a0 <prepare_answer+0x1a6>
		status &= ~SYNC;
		info.com.result = replace_alg();
		return ANSWER_ON_REQUEST;
	}
	case F_NO_ANSWER | REQ_REMOVE_ALG: {
		status &= ~SYNC;
     942:	83 2d       	mov	r24, r3
     944:	8e 7f       	andi	r24, 0xFE	; 254
     946:	38 2e       	mov	r3, r24
		info.com.result = remove_alg();
     948:	0e 94 3f 06 	call	0xc7e	; 0xc7e <remove_alg>
     94c:	2b c0       	rjmp	.+86     	; 0x9a4 <prepare_answer+0x1aa>
		return ANSWER_ON_REQUEST;
	}
	case REQ_STOP_ALG: {
		frame.a_stop_alg.result = stop_alg(frame.r_stop_alg.addr);
     94e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <frame+0x4>
     952:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <frame+0x5>
     956:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <stop_alg>
     95a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <frame+0x4>
		frame.h.len = sizeof(frame_h) + sizeof(ans_stop_alg);
     95e:	87 e0       	ldi	r24, 0x07	; 7
     960:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <frame+0x3>
		break;
     964:	23 c0       	rjmp	.+70     	; 0x9ac <prepare_answer+0x1b2>
	}
	case F_NO_ANSWER | REQ_WRITE_EEPROM: {
		eeprom_write_block((void*)frame.r_write_epprom.data, (void*)frame.r_write_epprom.addr, frame.r_write_epprom.len);
     966:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <frame+0x6>
     96a:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <frame+0x7>
     96e:	60 91 f0 00 	lds	r22, 0x00F0	; 0x8000f0 <frame+0x4>
     972:	70 91 f1 00 	lds	r23, 0x00F1	; 0x8000f1 <frame+0x5>
     976:	84 ef       	ldi	r24, 0xF4	; 244
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 df 08 	call	0x11be	; 0x11be <eeprom_write_block>
		info.com.result = 0x00;
     97e:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <info>
     982:	12 c0       	rjmp	.+36     	; 0x9a8 <prepare_answer+0x1ae>
		status &= ~SYNC;
		info.com.result = write_rd();
		return ANSWER_ON_REQUEST;
	}
	case F_NO_ANSWER | REQ_WRITE_TWI_TAB: {
		status &= ~SYNC;
     984:	83 2d       	mov	r24, r3
     986:	8e 7f       	andi	r24, 0xFE	; 254
     988:	38 2e       	mov	r3, r24

extern uint8_t twi_ix;
extern uint8_t twi_table[];

static uint8_t write_twi(void) {
	twi_ix = 0;
     98a:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <twi_ix>
	memcpy(twi_table, frame.r_write_twi.data, frame.r_write_twi.size);
     98e:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <frame+0x5>
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	62 ef       	ldi	r22, 0xF2	; 242
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	84 e7       	ldi	r24, 0x74	; 116
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 bf 08 	call	0x117e	; 0x117e <memcpy>
	return write_page();
     9a0:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <write_page>
		info.com.result = write_rd();
		return ANSWER_ON_REQUEST;
	}
	case F_NO_ANSWER | REQ_WRITE_TWI_TAB: {
		status &= ~SYNC;
		info.com.result = write_twi();
     9a4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <info>
		return ANSWER_ON_REQUEST;
     9a8:	c1 e0       	ldi	r28, 0x01	; 1
     9aa:	11 c0       	rjmp	.+34     	; 0x9ce <prepare_answer+0x1d4>
	}
	default:
		return NO_ANSWER;
	}
_crc_for_frame:
	*((uint16_t*)((uint8_t*)&frame + frame.h.len - 2)) =
     9ac:	c0 91 ef 00 	lds	r28, 0x00EF	; 0x8000ef <frame+0x3>
		get_crc((void*)&frame, frame.h.len - 2);
     9b0:	6e ef       	ldi	r22, 0xFE	; 254
     9b2:	6c 0f       	add	r22, r28
     9b4:	8c ee       	ldi	r24, 0xEC	; 236
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 4d 00 	call	0x9a	; 0x9a <get_crc>
	}
	default:
		return NO_ANSWER;
	}
_crc_for_frame:
	*((uint16_t*)((uint8_t*)&frame + frame.h.len - 2)) =
     9bc:	ec 2f       	mov	r30, r28
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	e6 51       	subi	r30, 0x16	; 22
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	91 83       	std	Z+1, r25	; 0x01
     9c6:	80 83       	st	Z, r24
		get_crc((void*)&frame, frame.h.len - 2);
	return IMMEDIATE_ANSWER;
     9c8:	c0 e0       	ldi	r28, 0x00	; 0
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <prepare_answer+0x1d4>
		*((uint8_t*)frame.r_write_bit.bit_addr) &= ~frame.r_write_bit.bit_n;
		*((uint8_t*)frame.r_write_bit.bit_addr) |= frame.r_write_bit.bit_val;
		return IMMEDIATE_ANSWER;
	}
	default:
		return NO_ANSWER;
     9cc:	c2 e0       	ldi	r28, 0x02	; 2
_crc_for_udp :
	*((uint16_t*)((uint8_t*)udp_frame + udp_frame->h.len - 2)) =
		get_crc((void*)udp_frame, udp_frame->h.len - 2);
	return IMMEDIATE_ANSWER;
#endif
}
     9ce:	8c 2f       	mov	r24, r28
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <send_answer>:
	}
	M_UCSRB = RX_ENABLED;
}

static void send_answer(void) {
	ptf = &idle_40;
     9d6:	8b ed       	ldi	r24, 0xDB	; 219
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <ptf+0x1>
     9de:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <ptf>
	M_OCR = IBBPC_40;
     9e2:	8a ea       	ldi	r24, 0xAA	; 170
     9e4:	83 bd       	out	0x23, r24	; 35
	if (prepare_answer() == IMMEDIATE_ANSWER) {
     9e6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <prepare_answer>
     9ea:	81 11       	cpse	r24, r1
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <send_answer+0x1c>
		start_transmit();
     9ee:	0c 94 6d 00 	jmp	0xda	; 0xda <start_transmit>
	} else {
		M_UCSRB = RX_ENABLED;
     9f2:	80 e9       	ldi	r24, 0x90	; 144
     9f4:	8a b9       	out	0x0a, r24	; 10
     9f6:	08 95       	ret

000009f8 <find_task_index>:
		task[i - SYS_TASK_NUM] = tt.t[i].addr;

	return write_page();
}

static uint8_t find_task_index(uint16_t addr) {
     9f8:	ac 01       	movw	r20, r24
	for (uint8_t i = SYS_TASK_NUM; i < tt.size; ++i) {
     9fa:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <tt>
     9fe:	e3 ec       	ldi	r30, 0xC3	; 195
     a00:	f1 e0       	ldi	r31, 0x01	; 1
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	92 17       	cp	r25, r18
     a06:	40 f4       	brcc	.+16     	; 0xa18 <find_task_index+0x20>
     a08:	34 96       	adiw	r30, 0x04	; 4
		if (tt.t[i].addr == addr) return i;
     a0a:	66 81       	ldd	r22, Z+6	; 0x06
     a0c:	77 81       	ldd	r23, Z+7	; 0x07
     a0e:	64 17       	cp	r22, r20
     a10:	75 07       	cpc	r23, r21
     a12:	21 f0       	breq	.+8      	; 0xa1c <find_task_index+0x24>

	return write_page();
}

static uint8_t find_task_index(uint16_t addr) {
	for (uint8_t i = SYS_TASK_NUM; i < tt.size; ++i) {
     a14:	9f 5f       	subi	r25, 0xFF	; 255
     a16:	f6 cf       	rjmp	.-20     	; 0xa04 <find_task_index+0xc>
		if (tt.t[i].addr == addr) return i;
	}
	return 0xff;
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	08 95       	ret
     a1c:	89 2f       	mov	r24, r25
}
     a1e:	08 95       	ret

00000a20 <store_sram_to_flash>:
		}
	}
}

static uint8_t store_sram_to_flash(void) {
	uint8_t user_tt_size = tt.size - SYS_TASK_NUM;
     a20:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <tt>
     a24:	3e ef       	ldi	r19, 0xFE	; 254
     a26:	32 0f       	add	r19, r18

	frame.r_wr_p.page = PAGE((uint16_t)&FLASH_TT); // bad assembly code here
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	9e e3       	ldi	r25, 0x3E	; 62
     a2c:	88 0f       	add	r24, r24
     a2e:	89 2f       	mov	r24, r25
     a30:	88 1f       	adc	r24, r24
     a32:	99 0b       	sbc	r25, r25
     a34:	91 95       	neg	r25
     a36:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <frame+0x4>
	frame.r_wr_p.size = 2 + user_tt_size * 2;
     a3a:	83 2f       	mov	r24, r19
     a3c:	88 0f       	add	r24, r24
     a3e:	8e 5f       	subi	r24, 0xFE	; 254
     a40:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <frame+0x5>
	frame.r_wr_p.data[0] = user_tt_size;
     a44:	30 93 f2 00 	sts	0x00F2, r19	; 0x8000f2 <frame+0x6>
	frame.r_wr_p.data[1] = 0;
     a48:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <frame+0x7>
     a4c:	e3 ec       	ldi	r30, 0xC3	; 195
     a4e:	f1 e0       	ldi	r31, 0x01	; 1
     a50:	a4 ef       	ldi	r26, 0xF4	; 244
     a52:	b0 e0       	ldi	r27, 0x00	; 0

	uint16_t* task = (uint16_t*)(frame.r_wr_p.data + 2);
	
	for (uint8_t i = SYS_TASK_NUM; i < tt.size; ++i)
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	34 96       	adiw	r30, 0x04	; 4
     a58:	82 17       	cp	r24, r18
     a5a:	30 f4       	brcc	.+12     	; 0xa68 <store_sram_to_flash+0x48>
		task[i - SYS_TASK_NUM] = tt.t[i].addr;
     a5c:	46 81       	ldd	r20, Z+6	; 0x06
     a5e:	57 81       	ldd	r21, Z+7	; 0x07
     a60:	4d 93       	st	X+, r20
     a62:	5d 93       	st	X+, r21
	frame.r_wr_p.data[0] = user_tt_size;
	frame.r_wr_p.data[1] = 0;

	uint16_t* task = (uint16_t*)(frame.r_wr_p.data + 2);
	
	for (uint8_t i = SYS_TASK_NUM; i < tt.size; ++i)
     a64:	8f 5f       	subi	r24, 0xFF	; 255
     a66:	f7 cf       	rjmp	.-18     	; 0xa56 <store_sram_to_flash+0x36>
		task[i - SYS_TASK_NUM] = tt.t[i].addr;

	return write_page();
     a68:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <write_page>

00000a6c <core_init>:
	
	return 0;
}

void core_init(void) {
	eeprom_read_block((void*)&_noinit_start, (void*)0, MEMORY_LEN + sizeof(eeprcfg_t));
     a6c:	42 ed       	ldi	r20, 0xD2	; 210
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	83 e7       	ldi	r24, 0x73	; 115
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	0e 94 cf 08 	call	0x119e	; 0x119e <eeprom_read_block>
	
	twi_init();
     a7c:	0e 94 08 07 	call	0xe10	; 0xe10 <twi_init>
	load_flash(&FLASH_RD, &rdata, sizeof(rdata));
     a80:	44 e6       	ldi	r20, 0x64	; 100
     a82:	67 e8       	ldi	r22, 0x87	; 135
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e8       	ldi	r24, 0x80	; 128
     a88:	9e e3       	ldi	r25, 0x3E	; 62
     a8a:	0e 94 1a 08 	call	0x1034	; 0x1034 <load_flash>
	load_flash(&FLASH_TWI, &twi_table, sizeof(twi_table));
     a8e:	4a e3       	ldi	r20, 0x3A	; 58
     a90:	64 e7       	ldi	r22, 0x74	; 116
     a92:	71 e0       	ldi	r23, 0x01	; 1
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	92 e1       	ldi	r25, 0x12	; 18
     a98:	0e 94 1a 08 	call	0x1034	; 0x1034 <load_flash>
	load_tt();
     a9c:	0e 94 24 08 	call	0x1048	; 0x1048 <load_tt>
	TCCR0 = (1 << CS02) | (1 << CS00); // div 1024
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0);
     aa4:	89 b7       	in	r24, 0x39	; 57
     aa6:	81 60       	ori	r24, 0x01	; 1
     aa8:	89 bf       	out	0x39, r24	; 57
     aaa:	08 95       	ret

00000aac <adc_task>:
uint16_t adc_value[ADC_MAX];

uint16_t adc_task(void) {
	static uint8_t index;

	switch(eeprcfg.adc_state) 
     aac:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <__bss_end>
     ab0:	83 30       	cpi	r24, 0x03	; 3
     ab2:	21 f1       	breq	.+72     	; 0xafc <adc_task+0x50>
     ab4:	28 f4       	brcc	.+10     	; 0xac0 <adc_task+0x14>
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	59 f0       	breq	.+22     	; 0xad0 <adc_task+0x24>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	69 f0       	breq	.+26     	; 0xad8 <adc_task+0x2c>
     abe:	3c c0       	rjmp	.+120    	; 0xb38 <adc_task+0x8c>
     ac0:	84 30       	cpi	r24, 0x04	; 4
     ac2:	b9 f1       	breq	.+110    	; 0xb32 <adc_task+0x86>
     ac4:	85 30       	cpi	r24, 0x05	; 5
     ac6:	c1 f5       	brne	.+112    	; 0xb38 <adc_task+0x8c>
			break;
		case ADC_DELAY:
			eeprcfg.adc_state = ADC_SET_CHANNEL;
			break;
		case ADC_DISABLE:
			ADCSRA = 0;
     ac8:	16 b8       	out	0x06, r1	; 6
			eeprcfg.adc_state = ADC_OFF;
     aca:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <__bss_end>
			break;
     ace:	34 c0       	rjmp	.+104    	; 0xb38 <adc_task+0x8c>
	switch(eeprcfg.adc_state) 
	{
		case ADC_OFF:
			break;
		case ADC_INIT:
			ADCSRA = (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADEN);
     ad0:	87 e8       	ldi	r24, 0x87	; 135
     ad2:	86 b9       	out	0x06, r24	; 6
			index = 0;
     ad4:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <index.2319>
		case ADC_SET_CHANNEL:
			if (index >= eeprcfg.adc_n)
     ad8:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <__bss_end+0x1>
     adc:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <index.2319>
     ae0:	89 17       	cp	r24, r25
     ae2:	10 f0       	brcs	.+4      	; 0xae8 <adc_task+0x3c>
				index = 0;
     ae4:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <index.2319>
			ADMUX = eeprcfg.admux_value[index];
     ae8:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <index.2319>
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	ed 58       	subi	r30, 0x8D	; 141
     af0:	fd 4f       	sbci	r31, 0xFD	; 253
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= (1 << ADSC);
     af6:	36 9a       	sbi	0x06, 6	; 6
			eeprcfg.adc_state = ADC_CONVERTING;
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	1c c0       	rjmp	.+56     	; 0xb34 <adc_task+0x88>
			break;
		case ADC_CONVERTING:
			if (ADCSRA & (1 << ADIF))  {
     afc:	34 9b       	sbis	0x06, 4	; 6
     afe:	1c c0       	rjmp	.+56     	; 0xb38 <adc_task+0x8c>
				ADCSRA |= (1 << ADIF);
     b00:	34 9a       	sbi	0x06, 4	; 6
				uint16_t value = ADCW;
     b02:	24 b1       	in	r18, 0x04	; 4
     b04:	35 b1       	in	r19, 0x05	; 5
				adc_value[eeprcfg.admux_value[index] & 0x07] = value;
     b06:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <index.2319>
     b0a:	e8 2f       	mov	r30, r24
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	ed 58       	subi	r30, 0x8D	; 141
     b10:	fd 4f       	sbci	r31, 0xFD	; 253
     b12:	e2 81       	ldd	r30, Z+2	; 0x02
     b14:	e7 70       	andi	r30, 0x07	; 7
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	e2 55       	subi	r30, 0x52	; 82
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	31 83       	std	Z+1, r19	; 0x01
     b22:	20 83       	st	Z, r18
				eeprcfg.adc_state = ADC_DELAY;
     b24:	94 e0       	ldi	r25, 0x04	; 4
     b26:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <__bss_end>
				index++;
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <index.2319>
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <adc_task+0x8c>
			}
			break;
		case ADC_DELAY:
			eeprcfg.adc_state = ADC_SET_CHANNEL;
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <__bss_end>
			break;
	};
	
//	TIMSK &= ~(1 << TOIE0);
	static uint8_t cnt;
	info.cpu_load = info.u8_time - cnt;
     b38:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <info+0x5>
     b3c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <cnt.2328>
     b40:	28 2f       	mov	r18, r24
     b42:	29 1b       	sub	r18, r25
     b44:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <info+0x9>
	cnt = info.u8_time;
     b48:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <cnt.2328>
//	TIMSK |= (1 << TOIE0);

	LED_PORT ^= (1 << WORK_LED); 
     b4c:	92 b3       	in	r25, 0x12	; 18
     b4e:	80 e1       	ldi	r24, 0x10	; 16
     b50:	89 27       	eor	r24, r25
     b52:	82 bb       	out	0x12, r24	; 18
	
	return ADC_TASK_DELAY;
}
     b54:	82 e3       	ldi	r24, 0x32	; 50
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	08 95       	ret

00000b5a <twi_task>:

uint16_t twi_task(void) {
	twitab_t* tab = (void*)twi_table;

	if (!tab->n || twi_result == TWI_BUSY) return I2C_TASK_DELAY;
     b5a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <twi_table>
     b5e:	88 23       	and	r24, r24
     b60:	09 f4       	brne	.+2      	; 0xb64 <twi_task+0xa>
     b62:	5f c0       	rjmp	.+190    	; 0xc22 <twi_task+0xc8>
     b64:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <twi_result>
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	09 f4       	brne	.+2      	; 0xb6e <twi_task+0x14>
     b6c:	5a c0       	rjmp	.+180    	; 0xc22 <twi_task+0xc8>

	if (twi_result != TWI_FREE) {
     b6e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <twi_result>
     b72:	88 23       	and	r24, r24
     b74:	49 f1       	breq	.+82     	; 0xbc8 <twi_task+0x6e>
		twi_req_t* cur = &tab->twi_req[twi_ix];
     b76:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <twi_ix>
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
		cur->status = twi_result;
     b7c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <twi_result>
     b80:	df 01       	movw	r26, r30
     b82:	93 e0       	ldi	r25, 0x03	; 3
     b84:	aa 0f       	add	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	9a 95       	dec	r25
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <twi_task+0x2a>
     b8c:	a4 58       	subi	r26, 0x84	; 132
     b8e:	be 4f       	sbci	r27, 0xFE	; 254
     b90:	8c 93       	st	X, r24

		if (cur->fn >= TWI_REQ_READ) {
     b92:	23 e0       	ldi	r18, 0x03	; 3
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	2a 95       	dec	r18
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <twi_task+0x3a>
     b9c:	ec 58       	subi	r30, 0x8C	; 140
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	82 30       	cpi	r24, 0x02	; 2
     ba4:	88 f0       	brcs	.+34     	; 0xbc8 <twi_task+0x6e>
			if (twi_result == TWI_SUCCESS) {
     ba6:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <twi_result>
     baa:	85 81       	ldd	r24, Z+5	; 0x05
     bac:	96 81       	ldd	r25, Z+6	; 0x06
     bae:	47 81       	ldd	r20, Z+7	; 0x07
				uint8_t* r_buf = twi_buf + 3;
				memcpy(cur->data, r_buf, cur->len);
     bb0:	50 e0       	ldi	r21, 0x00	; 0
	if (twi_result != TWI_FREE) {
		twi_req_t* cur = &tab->twi_req[twi_ix];
		cur->status = twi_result;

		if (cur->fn >= TWI_REQ_READ) {
			if (twi_result == TWI_SUCCESS) {
     bb2:	21 30       	cpi	r18, 0x01	; 1
     bb4:	29 f4       	brne	.+10     	; 0xbc0 <twi_task+0x66>
				uint8_t* r_buf = twi_buf + 3;
				memcpy(cur->data, r_buf, cur->len);
     bb6:	62 e5       	ldi	r22, 0x52	; 82
     bb8:	72 e0       	ldi	r23, 0x02	; 2
     bba:	0e 94 bf 08 	call	0x117e	; 0x117e <memcpy>
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <twi_task+0x6e>
			} else {
				memset(cur->data, 0, cur->len);
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	0e 94 c8 08 	call	0x1190	; 0x1190 <memset>
			}
		}
	}
	
	if (++twi_ix == tab->n) twi_ix = 0;
     bc8:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <twi_ix>
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <twi_ix>
     bd2:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <twi_table>
     bd6:	89 13       	cpse	r24, r25
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <twi_task+0x84>
     bda:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <twi_ix>
	
	twi_req_t* next = &tab->twi_req[twi_ix];
     bde:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <twi_ix>
     be2:	88 e0       	ldi	r24, 0x08	; 8
     be4:	28 9f       	mul	r18, r24
     be6:	90 01       	movw	r18, r0
     be8:	11 24       	eor	r1, r1
     bea:	c9 01       	movw	r24, r18
     bec:	8b 58       	subi	r24, 0x8B	; 139
     bee:	9e 4f       	sbci	r25, 0xFE	; 254
	
	switch (next->fn) {
     bf0:	f9 01       	movw	r30, r18
     bf2:	ec 58       	subi	r30, 0x8C	; 140
     bf4:	fe 4f       	sbci	r31, 0xFE	; 254
     bf6:	21 81       	ldd	r18, Z+1	; 0x01
     bf8:	21 30       	cpi	r18, 0x01	; 1
     bfa:	71 f0       	breq	.+28     	; 0xc18 <twi_task+0xbe>
     bfc:	50 f0       	brcs	.+20     	; 0xc12 <twi_task+0xb8>
     bfe:	22 30       	cpi	r18, 0x02	; 2
     c00:	29 f0       	breq	.+10     	; 0xc0c <twi_task+0xb2>
     c02:	23 30       	cpi	r18, 0x03	; 3
     c04:	61 f4       	brne	.+24     	; 0xc1e <twi_task+0xc4>
	case TWI_REQ_READ:
		twi_read(next);
		break;
	case TWI_REQ_READ_BLOCK:
		twi_read_bytes(next);
     c06:	0e 94 60 07 	call	0xec0	; 0xec0 <twi_read_bytes>
		break;
     c0a:	0b c0       	rjmp	.+22     	; 0xc22 <twi_task+0xc8>
	
	twi_req_t* next = &tab->twi_req[twi_ix];
	
	switch (next->fn) {
	case TWI_REQ_READ:
		twi_read(next);
     c0c:	0e 94 4c 07 	call	0xe98	; 0xe98 <twi_read>
		break;
     c10:	08 c0       	rjmp	.+16     	; 0xc22 <twi_task+0xc8>
	case TWI_REQ_READ_BLOCK:
		twi_read_bytes(next);
		break;
	case TWI_REQ_WRITE:
		twi_write(next);
     c12:	0e 94 0e 07 	call	0xe1c	; 0xe1c <twi_write>
		break;
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <twi_task+0xc8>
	case TWI_REQ_WRITE_BLOCK:
		twi_write_bytes(next);
     c18:	0e 94 23 07 	call	0xe46	; 0xe46 <twi_write_bytes>
		break;
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <twi_task+0xc8>
	default:
		twi_result = TWI_FREE;
     c1e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <twi_result>
		break;
	}

	return I2C_TASK_DELAY;
}
     c22:	82 e3       	ldi	r24, 0x32	; 50
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	08 95       	ret

00000c28 <replace_alg>:
		if (tt.t[i].addr == addr) return i;
	}
	return 0xff;
}

uint8_t replace_alg(void) {
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
	if (frame.r_rep_alg.addr_old == 0x0000) {
     c2c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <frame+0x4>
     c30:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <frame+0x5>
     c34:	c0 91 f2 00 	lds	r28, 0x00F2	; 0x8000f2 <frame+0x6>
     c38:	d0 91 f3 00 	lds	r29, 0x00F3	; 0x8000f3 <frame+0x7>
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	21 f4       	brne	.+8      	; 0xc48 <replace_alg+0x20>
		append_alg_to_end(frame.r_rep_alg.addr_new);
     c40:	ce 01       	movw	r24, r28
     c42:	0e 94 3f 08 	call	0x107e	; 0x107e <append_alg_to_end>
     c46:	17 c0       	rjmp	.+46     	; 0xc76 <replace_alg+0x4e>
	} else {
		int8_t index = find_task_index(frame.r_rep_alg.addr_old);
     c48:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <find_task_index>
		if (index == 0xFF) return NET_ALGORTIHM_NOT_FOUND;
		
		tt.t[index].addr = frame.r_rep_alg.addr_new;
     c4c:	08 2e       	mov	r0, r24
     c4e:	00 0c       	add	r0, r0
     c50:	99 0b       	sbc	r25, r25
     c52:	fc 01       	movw	r30, r24
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	ed 53       	subi	r30, 0x3D	; 61
     c5e:	fe 4f       	sbci	r31, 0xFE	; 254
     c60:	d3 83       	std	Z+3, r29	; 0x03
     c62:	c2 83       	std	Z+2, r28	; 0x02
		tt.t[index].counter = 0;
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	fc 01       	movw	r30, r24
     c6e:	e9 53       	subi	r30, 0x39	; 57
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	11 82       	std	Z+1, r1	; 0x01
     c74:	10 82       	st	Z, r1
	}
	return store_sram_to_flash();
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
		if (index == 0xFF) return NET_ALGORTIHM_NOT_FOUND;
		
		tt.t[index].addr = frame.r_rep_alg.addr_new;
		tt.t[index].counter = 0;
	}
	return store_sram_to_flash();
     c7a:	0c 94 10 05 	jmp	0xa20	; 0xa20 <store_sram_to_flash>

00000c7e <remove_alg>:
}

uint8_t remove_alg(void) {
	uint8_t index = find_task_index(frame.r_remove_alg.addr);
     c7e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <frame+0x4>
     c82:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <frame+0x5>
     c86:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <find_task_index>
	if (index == 0xff) return NET_ALGORTIHM_NOT_FOUND;
     c8a:	8f 3f       	cpi	r24, 0xFF	; 255
     c8c:	89 f1       	breq	.+98     	; 0xcf0 <remove_alg+0x72>

	tt.size = tt.size - 1;
     c8e:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <tt>
     c92:	91 50       	subi	r25, 0x01	; 1
     c94:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <tt>
	tt.cur_task = 0;
     c98:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <tt+0x1>
	for (uint8_t i = index; i < tt.size; ++i) {
     c9c:	89 17       	cp	r24, r25
     c9e:	30 f5       	brcc	.+76     	; 0xcec <remove_alg+0x6e>
		tt.t[i].addr = tt.t[i + 1].addr;
     ca0:	48 2f       	mov	r20, r24
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	9a 01       	movw	r18, r20
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	d9 01       	movw	r26, r18
     cac:	aa 0f       	add	r26, r26
     cae:	bb 1f       	adc	r27, r27
     cb0:	aa 0f       	add	r26, r26
     cb2:	bb 1f       	adc	r27, r27
     cb4:	ad 53       	subi	r26, 0x3D	; 61
     cb6:	be 4f       	sbci	r27, 0xFE	; 254
     cb8:	12 96       	adiw	r26, 0x02	; 2
     cba:	6d 91       	ld	r22, X+
     cbc:	7c 91       	ld	r23, X
     cbe:	13 97       	sbiw	r26, 0x03	; 3
     cc0:	44 0f       	add	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	fa 01       	movw	r30, r20
     cca:	ed 53       	subi	r30, 0x3D	; 61
     ccc:	fe 4f       	sbci	r31, 0xFE	; 254
     cce:	73 83       	std	Z+3, r23	; 0x03
     cd0:	62 83       	std	Z+2, r22	; 0x02
		tt.t[i].counter = tt.t[i + 1].counter;
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	f9 01       	movw	r30, r18
     cdc:	e9 53       	subi	r30, 0x39	; 57
     cde:	fe 4f       	sbci	r31, 0xFE	; 254
     ce0:	20 81       	ld	r18, Z
     ce2:	31 81       	ldd	r19, Z+1	; 0x01
     ce4:	2d 93       	st	X+, r18
     ce6:	3c 93       	st	X, r19
	uint8_t index = find_task_index(frame.r_remove_alg.addr);
	if (index == 0xff) return NET_ALGORTIHM_NOT_FOUND;

	tt.size = tt.size - 1;
	tt.cur_task = 0;
	for (uint8_t i = index; i < tt.size; ++i) {
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	d8 cf       	rjmp	.-80     	; 0xc9c <remove_alg+0x1e>
		tt.t[i].addr = tt.t[i + 1].addr;
		tt.t[i].counter = tt.t[i + 1].counter;
	}
	return store_sram_to_flash();
     cec:	0c 94 10 05 	jmp	0xa20	; 0xa20 <store_sram_to_flash>
}
     cf0:	8e ef       	ldi	r24, 0xFE	; 254
     cf2:	08 95       	ret

00000cf4 <stop_alg>:

uint8_t stop_alg(uint16_t algAddr) {
	uint8_t index = find_task_index(algAddr);
     cf4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <find_task_index>
	if (index == 0xff) return NET_ALGORTIHM_NOT_FOUND;
     cf8:	8f 3f       	cpi	r24, 0xFF	; 255
     cfa:	71 f0       	breq	.+28     	; 0xd18 <stop_alg+0x24>

	tt.cur_task = 0;
     cfc:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <tt+0x1>
	tt.t[index].counter = 0xFFFF;
     d00:	94 e0       	ldi	r25, 0x04	; 4
     d02:	89 9f       	mul	r24, r25
     d04:	f0 01       	movw	r30, r0
     d06:	11 24       	eor	r1, r1
     d08:	e9 53       	subi	r30, 0x39	; 57
     d0a:	fe 4f       	sbci	r31, 0xFE	; 254
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	9f ef       	ldi	r25, 0xFF	; 255
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	80 83       	st	Z, r24
	
	return 0;
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	08 95       	ret
	return store_sram_to_flash();
}

uint8_t stop_alg(uint16_t algAddr) {
	uint8_t index = find_task_index(algAddr);
	if (index == 0xff) return NET_ALGORTIHM_NOT_FOUND;
     d18:	8e ef       	ldi	r24, 0xFE	; 254

	tt.cur_task = 0;
	tt.t[index].counter = 0xFFFF;
	
	return 0;
}
     d1a:	08 95       	ret

00000d1c <update_counter>:

void update_counter(void) {
	static uint8_t last;
	static uint16_t last_1s;

	if (last != *(uint8_t*)&timer_cnt_unsafe) {
     d1c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <timer_cnt_unsafe>
     d20:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <last.2269>
     d24:	89 17       	cp	r24, r25
     d26:	09 f4       	brne	.+2      	; 0xd2a <update_counter+0xe>
     d28:	4d c0       	rjmp	.+154    	; 0xdc4 <update_counter+0xa8>
		last = timer_cnt_unsafe;
     d2a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <last.2269>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d2e:	f8 94       	cli
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			info.u32_time = timer_cnt_unsafe;
     d30:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <timer_cnt_unsafe>
     d34:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <timer_cnt_unsafe+0x1>
     d38:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <timer_cnt_unsafe+0x2>
     d3c:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <timer_cnt_unsafe+0x3>
     d40:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <info+0x5>
     d44:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <info+0x6>
     d48:	a0 93 84 00 	sts	0x0084, r26	; 0x800084 <info+0x7>
     d4c:	b0 93 85 00 	sts	0x0085, r27	; 0x800085 <info+0x8>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     d50:	78 94       	sei
		}
		
		if (internal_time.sec.quality == VQ_BAD) {
     d52:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <internal_time+0x1>
     d56:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <info+0x5>
     d5a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <info+0x6>
     d5e:	21 11       	cpse	r18, r1
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <update_counter+0x50>
			last_1s = info.u16_time;
     d62:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <last_1s.2270+0x1>
     d66:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <last_1s.2270>
			return;
     d6a:	08 95       	ret
		}

		if (info.u16_time - last_1s >= 100) {
     d6c:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <last_1s.2270>
     d70:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <last_1s.2270+0x1>
     d74:	ac 01       	movw	r20, r24
     d76:	42 1b       	sub	r20, r18
     d78:	53 0b       	sbc	r21, r19
     d7a:	44 36       	cpi	r20, 0x64	; 100
     d7c:	51 05       	cpc	r21, r1
     d7e:	10 f1       	brcs	.+68     	; 0xdc4 <update_counter+0xa8>
			last_1s = info.u16_time;
     d80:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <last_1s.2270+0x1>
     d84:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <last_1s.2270>
			if (++internal_time.sec.value == 60) {
     d88:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <internal_time>
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	8c 33       	cpi	r24, 0x3C	; 60
     d90:	19 f0       	breq	.+6      	; 0xd98 <update_counter+0x7c>
     d92:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <internal_time>
     d96:	08 95       	ret
				internal_time.sec.value = 0;
     d98:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <internal_time>
				if (++internal_time.min.value == 60) {
     d9c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <internal_time+0x2>
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	8c 33       	cpi	r24, 0x3C	; 60
     da4:	19 f0       	breq	.+6      	; 0xdac <update_counter+0x90>
     da6:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <internal_time+0x2>
     daa:	08 95       	ret
					internal_time.min.value = 0;
     dac:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <internal_time+0x2>
					if (++internal_time.hour.value == 24) {
     db0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <internal_time+0x4>
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	88 31       	cpi	r24, 0x18	; 24
     db8:	19 f0       	breq	.+6      	; 0xdc0 <update_counter+0xa4>
     dba:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <internal_time+0x4>
     dbe:	08 95       	ret
						internal_time.hour.value = 0;
     dc0:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <internal_time+0x4>
     dc4:	08 95       	ret

00000dc6 <reset>:
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	a8 95       	wdr
     dcc:	81 b5       	in	r24, 0x21	; 33
     dce:	88 61       	ori	r24, 0x18	; 24
     dd0:	81 bd       	out	0x21, r24	; 33
     dd2:	11 bc       	out	0x21, r1	; 33
     dd4:	0f be       	out	0x3f, r0	; 63
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     dd6:	9c e0       	ldi	r25, 0x0C	; 12
     dd8:	88 e1       	ldi	r24, 0x18	; 24
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	a8 95       	wdr
     de0:	81 bd       	out	0x21, r24	; 33
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	91 bd       	out	0x21, r25	; 33
     de6:	ff cf       	rjmp	.-2      	; 0xde6 <reset+0x20>

00000de8 <main>:

	return I2C_TASK_DELAY;
}

int main(void) {
	init_io();
     de8:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <init_io>
	core_init();
     dec:	0e 94 36 05 	call	0xa6c	; 0xa6c <core_init>
	net_init();
     df0:	0e 94 b2 02 	call	0x564	; 0x564 <net_init>
	
	sei();
     df4:	78 94       	sei
     df6:	9f e0       	ldi	r25, 0x0F	; 15
     df8:	88 e1       	ldi	r24, 0x18	; 24
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	a8 95       	wdr
     e00:	81 bd       	out	0x21, r24	; 33
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	91 bd       	out	0x21, r25	; 33

	wdt_enable(WDTO_2S);
	core_run();
     e06:	0e 94 50 08 	call	0x10a0	; 0x10a0 <core_run>
}
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	08 95       	ret

00000e10 <twi_init>:
#define TWI_S_WRITE_ADDR				1
#define TWI_S_WRITE_DATA				2
#define TWI_S_WRITE_NO_ADDRESS	3

void twi_init(void) {
	TWBR = 72; // 100 khz
     e10:	88 e4       	ldi	r24, 0x48	; 72
     e12:	80 b9       	out	0x00, r24	; 0
	TWSR = 0;
     e14:	11 b8       	out	0x01, r1	; 1
	TWAR = _TWI_ADDR;
     e16:	80 e1       	ldi	r24, 0x10	; 16
     e18:	82 b9       	out	0x02, r24	; 2
     e1a:	08 95       	ret

00000e1c <twi_write>:
#ifndef TWI_MASTER_ONLY
	TWCR = TWI_ENABLE | (1 << TWEA);
#endif // MASTER_ONLY
}

void twi_write(twi_req_t* req) {
     e1c:	dc 01       	movw	r26, r24
	twi_result = TWI_BUSY;
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <twi_result>

	twi_buf[0] = req->dev_addr | TW_WRITE;
     e24:	ef e4       	ldi	r30, 0x4F	; 79
     e26:	f2 e0       	ldi	r31, 0x02	; 2
     e28:	11 96       	adiw	r26, 0x01	; 1
     e2a:	8c 91       	ld	r24, X
     e2c:	11 97       	sbiw	r26, 0x01	; 1
     e2e:	80 83       	st	Z, r24
	twi_buf[1] = req->wr_value;
     e30:	14 96       	adiw	r26, 0x04	; 4
     e32:	8c 91       	ld	r24, X
     e34:	81 83       	std	Z+1, r24	; 0x01
	t_len = 2;
     e36:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <t_len>
	twi_master_state = TWI_S_WRITE_NO_ADDRESS;
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <twi_master_state>

	TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWSTA);
     e40:	85 ea       	ldi	r24, 0xA5	; 165
     e42:	86 bf       	out	0x36, r24	; 54
     e44:	08 95       	ret

00000e46 <twi_write_bytes>:
}

void twi_write_bytes(twi_req_t* req) {
     e46:	fc 01       	movw	r30, r24
	t_header_len = (req->_addrh & 0x80) ? 3 : 2;
     e48:	83 81       	ldd	r24, Z+3	; 0x03
     e4a:	28 2f       	mov	r18, r24
     e4c:	22 1f       	adc	r18, r18
     e4e:	22 27       	eor	r18, r18
     e50:	22 1f       	adc	r18, r18
     e52:	2e 5f       	subi	r18, 0xFE	; 254
     e54:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <t_header_len>

	twi_result = TWI_BUSY;
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <twi_result>

	twi_buf[0] = req->dev_addr | TW_WRITE;
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <twi_buf>
	twi_buf[1] = req->_addrl;
     e64:	92 81       	ldd	r25, Z+2	; 0x02
     e66:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <twi_buf+0x1>
	twi_buf[2] = req->_addrh & 0x7F;
     e6a:	8f 77       	andi	r24, 0x7F	; 127
     e6c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <twi_buf+0x2>

	t_len = req->len + t_header_len;
     e70:	46 81       	ldd	r20, Z+6	; 0x06
     e72:	82 2f       	mov	r24, r18
     e74:	84 0f       	add	r24, r20
     e76:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <t_len>

	twi_master_state = TWI_S_WRITE_ADDR;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <twi_master_state>

	memcpy(twi_buf + t_header_len, req->data, req->len);
     e80:	82 2f       	mov	r24, r18
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	64 81       	ldd	r22, Z+4	; 0x04
     e88:	75 81       	ldd	r23, Z+5	; 0x05
     e8a:	81 5b       	subi	r24, 0xB1	; 177
     e8c:	9d 4f       	sbci	r25, 0xFD	; 253
     e8e:	0e 94 bf 08 	call	0x117e	; 0x117e <memcpy>

	TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWSTA);
     e92:	85 ea       	ldi	r24, 0xA5	; 165
     e94:	86 bf       	out	0x36, r24	; 54
     e96:	08 95       	ret

00000e98 <twi_read>:
}

void twi_read(twi_req_t* req) {
     e98:	fc 01       	movw	r30, r24
	twi_result = TWI_BUSY;
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <twi_result>

	twi_buf[0] = req->dev_addr | TW_READ;
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	91 60       	ori	r25, 0x01	; 1
     ea4:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <twi_buf>
	t_len = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <t_len>

	r_last_index = req->len + 2;
     eae:	86 81       	ldd	r24, Z+6	; 0x06
     eb0:	8e 5f       	subi	r24, 0xFE	; 254
     eb2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <r_last_index>

	twi_master_state = TWI_S_READ;
     eb6:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <twi_master_state>

	TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWSTA);
     eba:	85 ea       	ldi	r24, 0xA5	; 165
     ebc:	86 bf       	out	0x36, r24	; 54
     ebe:	08 95       	ret

00000ec0 <twi_read_bytes>:
}

void twi_read_bytes(twi_req_t* req) {
     ec0:	fc 01       	movw	r30, r24
	t_header_len = (req->_addrh & 0x80) ? 3 : 2;
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	89 2f       	mov	r24, r25
     ec6:	88 1f       	adc	r24, r24
     ec8:	88 27       	eor	r24, r24
     eca:	88 1f       	adc	r24, r24
     ecc:	8e 5f       	subi	r24, 0xFE	; 254
     ece:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <t_header_len>
	twi_result = TWI_BUSY;
     ed2:	22 e0       	ldi	r18, 0x02	; 2
     ed4:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <twi_result>

	twi_buf[0] = req->dev_addr | TW_WRITE;
     ed8:	21 81       	ldd	r18, Z+1	; 0x01
     eda:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <twi_buf>
	twi_buf[1] = req->_addrl;
     ede:	22 81       	ldd	r18, Z+2	; 0x02
     ee0:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <twi_buf+0x1>
	twi_buf[2] = req->_addrh & 0x7F;
     ee4:	9f 77       	andi	r25, 0x7F	; 127
     ee6:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <twi_buf+0x2>

	t_len = t_header_len;
     eea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <t_len>
	r_last_index = req->len + 2;
     eee:	86 81       	ldd	r24, Z+6	; 0x06
     ef0:	8e 5f       	subi	r24, 0xFE	; 254
     ef2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <r_last_index>

	twi_master_state = TWI_S_READ;
     ef6:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <twi_master_state>

	TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWSTA);
     efa:	85 ea       	ldi	r24, 0xA5	; 165
     efc:	86 bf       	out	0x36, r24	; 54
     efe:	08 95       	ret

00000f00 <__vector_17>:
}

ISR(TWI_vect)
{
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	8f 93       	push	r24
     f0c:	9f 93       	push	r25
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
	switch (TWSR & 0xF8)
     f12:	81 b1       	in	r24, 0x01	; 1
     f14:	88 7f       	andi	r24, 0xF8	; 248
     f16:	88 32       	cpi	r24, 0x28	; 40
     f18:	91 f1       	breq	.+100    	; 0xf7e <__vector_17+0x7e>
     f1a:	78 f4       	brcc	.+30     	; 0xf3a <__vector_17+0x3a>
     f1c:	80 31       	cpi	r24, 0x10	; 16
     f1e:	11 f1       	breq	.+68     	; 0xf64 <__vector_17+0x64>
     f20:	30 f4       	brcc	.+12     	; 0xf2e <__vector_17+0x2e>
     f22:	88 23       	and	r24, r24
     f24:	09 f4       	brne	.+2      	; 0xf28 <__vector_17+0x28>
     f26:	78 c0       	rjmp	.+240    	; 0x1018 <__vector_17+0x118>
     f28:	88 30       	cpi	r24, 0x08	; 8
     f2a:	e1 f0       	breq	.+56     	; 0xf64 <__vector_17+0x64>
     f2c:	7a c0       	rjmp	.+244    	; 0x1022 <__vector_17+0x122>
     f2e:	88 31       	cpi	r24, 0x18	; 24
     f30:	31 f1       	breq	.+76     	; 0xf7e <__vector_17+0x7e>
     f32:	80 32       	cpi	r24, 0x20	; 32
     f34:	09 f4       	brne	.+2      	; 0xf38 <__vector_17+0x38>
     f36:	70 c0       	rjmp	.+224    	; 0x1018 <__vector_17+0x118>
     f38:	74 c0       	rjmp	.+232    	; 0x1022 <__vector_17+0x122>
     f3a:	80 34       	cpi	r24, 0x40	; 64
     f3c:	09 f4       	brne	.+2      	; 0xf40 <__vector_17+0x40>
     f3e:	56 c0       	rjmp	.+172    	; 0xfec <__vector_17+0xec>
     f40:	38 f4       	brcc	.+14     	; 0xf50 <__vector_17+0x50>
     f42:	80 33       	cpi	r24, 0x30	; 48
     f44:	09 f4       	brne	.+2      	; 0xf48 <__vector_17+0x48>
     f46:	68 c0       	rjmp	.+208    	; 0x1018 <__vector_17+0x118>
     f48:	88 33       	cpi	r24, 0x38	; 56
     f4a:	09 f4       	brne	.+2      	; 0xf4e <__vector_17+0x4e>
     f4c:	42 c0       	rjmp	.+132    	; 0xfd2 <__vector_17+0xd2>
     f4e:	69 c0       	rjmp	.+210    	; 0x1022 <__vector_17+0x122>
     f50:	80 35       	cpi	r24, 0x50	; 80
     f52:	09 f4       	brne	.+2      	; 0xf56 <__vector_17+0x56>
     f54:	40 c0       	rjmp	.+128    	; 0xfd6 <__vector_17+0xd6>
     f56:	88 35       	cpi	r24, 0x58	; 88
     f58:	09 f4       	brne	.+2      	; 0xf5c <__vector_17+0x5c>
     f5a:	53 c0       	rjmp	.+166    	; 0x1002 <__vector_17+0x102>
     f5c:	88 34       	cpi	r24, 0x48	; 72
     f5e:	09 f0       	breq	.+2      	; 0xf62 <__vector_17+0x62>
     f60:	60 c0       	rjmp	.+192    	; 0x1022 <__vector_17+0x122>
     f62:	5a c0       	rjmp	.+180    	; 0x1018 <__vector_17+0x118>
	case TW_MT_ARB_LOST: // Arbitration lost in SLA+R or NOT ACK bit
		TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWSTA); // A START condition will be transmitted when the bus becomes free
		break;
	case TW_START:
	case TW_REP_START:
		if (twi_master_state == TWI_S_WRITE_DATA) {
     f64:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <twi_master_state>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	21 f4       	brne	.+8      	; 0xf74 <__vector_17+0x74>
			TWDR = twi_buf[0];
     f6c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <twi_buf>
     f70:	83 b9       	out	0x03, r24	; 3
     f72:	44 c0       	rjmp	.+136    	; 0xffc <__vector_17+0xfc>
			TWCR = TWI_ENABLE | (1 << TWINT);
			break;
		}
		w_ix = 0;
     f74:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <w_ix>
		r_ix = 3;
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <r_ix>
		// Master Transmitter Mode
	case TW_MT_SLA_ACK:
	case TW_MT_DATA_ACK:
		if (w_ix < t_len) {
     f7e:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <w_ix>
     f82:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <t_len>
     f86:	e8 17       	cp	r30, r24
     f88:	c8 f4       	brcc	.+50     	; 0xfbc <__vector_17+0xbc>
			TWDR = twi_buf[w_ix++];
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	8e 0f       	add	r24, r30
     f8e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <w_ix>
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	e1 5b       	subi	r30, 0xB1	; 177
     f96:	fd 4f       	sbci	r31, 0xFD	; 253
     f98:	80 81       	ld	r24, Z
     f9a:	83 b9       	out	0x03, r24	; 3
			if (twi_master_state == TWI_S_WRITE_ADDR && w_ix == t_header_len) {
     f9c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <twi_master_state>
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	61 f5       	brne	.+88     	; 0xffc <__vector_17+0xfc>
     fa4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <w_ix>
     fa8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <t_header_len>
     fac:	98 13       	cpse	r25, r24
     fae:	26 c0       	rjmp	.+76     	; 0xffc <__vector_17+0xfc>
				TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWSTA);
     fb0:	85 ea       	ldi	r24, 0xA5	; 165
     fb2:	86 bf       	out	0x36, r24	; 54
				twi_master_state = TWI_S_WRITE_DATA;
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <twi_master_state>
				break;
     fba:	33 c0       	rjmp	.+102    	; 0x1022 <__vector_17+0x122>
			}
			TWCR = TWI_ENABLE | (1 << TWINT);
		} else if (twi_master_state == TWI_S_WRITE_DATA) {
     fbc:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <twi_master_state>
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <__vector_17+0xc8>
			TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWSTO) | (1 << TWEA);
     fc4:	85 ed       	ldi	r24, 0xD5	; 213
     fc6:	25 c0       	rjmp	.+74     	; 0x1012 <__vector_17+0x112>
			twi_result = TWI_SUCCESS;
		} else {
			twi_buf[0] |= TW_READ;
     fc8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <twi_buf>
     fcc:	81 60       	ori	r24, 0x01	; 1
     fce:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <twi_buf>
			TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWSTA);
     fd2:	85 ea       	ldi	r24, 0xA5	; 165
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <__vector_17+0xfe>
		}
		break;
		// Master Receiver Mode
	case TW_MR_DATA_ACK:
		twi_buf[r_ix++] = TWDR;
     fd6:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <r_ix>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	8e 0f       	add	r24, r30
     fde:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <r_ix>
     fe2:	83 b1       	in	r24, 0x03	; 3
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	e1 5b       	subi	r30, 0xB1	; 177
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
     fea:	80 83       	st	Z, r24
	case TW_MR_SLA_ACK:
		if (r_ix < r_last_index) {
     fec:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <r_ix>
     ff0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <r_last_index>
     ff4:	98 17       	cp	r25, r24
     ff6:	10 f4       	brcc	.+4      	; 0xffc <__vector_17+0xfc>
			TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWEA);
     ff8:	85 ec       	ldi	r24, 0xC5	; 197
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <__vector_17+0xfe>
		} else {
			TWCR = TWI_ENABLE | (1 << TWINT);
     ffc:	85 e8       	ldi	r24, 0x85	; 133
     ffe:	86 bf       	out	0x36, r24	; 54
    1000:	10 c0       	rjmp	.+32     	; 0x1022 <__vector_17+0x122>
		}
		break;
	case TW_MR_DATA_NACK:
		twi_buf[r_ix] = TWDR;
    1002:	83 b1       	in	r24, 0x03	; 3
    1004:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <r_ix>
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	e1 5b       	subi	r30, 0xB1	; 177
    100c:	fd 4f       	sbci	r31, 0xFD	; 253
    100e:	80 83       	st	Z, r24
		TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWSTO);
    1010:	85 e9       	ldi	r24, 0x95	; 149
    1012:	86 bf       	out	0x36, r24	; 54
		twi_result = TWI_SUCCESS;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	03 c0       	rjmp	.+6      	; 0x101e <__vector_17+0x11e>
		break;
		// MT + MR errors
	case TW_MT_SLA_NACK:
	case TW_MT_DATA_NACK:
	case TW_MR_SLA_NACK:
		TWCR = TWI_ENABLE | (1 << TWINT) | (1 << TWSTO);
    1018:	85 e9       	ldi	r24, 0x95	; 149
    101a:	86 bf       	out	0x36, r24	; 54
		twi_result = TWI_ERROR;
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <twi_result>
		break;
#endif // MASTER_ONLY
	default:
		break;
	};
    1022:	ff 91       	pop	r31
    1024:	ef 91       	pop	r30
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	0f 90       	pop	r0
    1030:	1f 90       	pop	r1
    1032:	18 95       	reti

00001034 <load_flash>:
    1034:	e8 2f       	mov	r30, r24
    1036:	f9 2f       	mov	r31, r25
    1038:	a6 2f       	mov	r26, r22
    103a:	b7 2f       	mov	r27, r23

0000103c <copy_flesh>:
    103c:	c8 95       	lpm
    103e:	0d 92       	st	X+, r0
    1040:	31 96       	adiw	r30, 0x01	; 1
    1042:	4a 95       	dec	r20
    1044:	d9 f7       	brne	.-10     	; 0x103c <copy_flesh>
    1046:	08 95       	ret

00001048 <load_tt>:
    1048:	02 e0       	ldi	r16, 0x02	; 2
    104a:	00 93 c3 01 	sts	0x01C3, r16	; 0x8001c3 <tt>
    104e:	06 e5       	ldi	r16, 0x56	; 86
    1050:	00 93 c5 01 	sts	0x01C5, r16	; 0x8001c5 <tt+0x2>
    1054:	05 e0       	ldi	r16, 0x05	; 5
    1056:	00 93 c6 01 	sts	0x01C6, r16	; 0x8001c6 <tt+0x3>
    105a:	0d ea       	ldi	r16, 0xAD	; 173
    105c:	00 93 c9 01 	sts	0x01C9, r16	; 0x8001c9 <tt+0x6>
    1060:	05 e0       	ldi	r16, 0x05	; 5
    1062:	00 93 ca 01 	sts	0x01CA, r16	; 0x8001ca <tt+0x7>
    1066:	e0 e0       	ldi	r30, 0x00	; 0
    1068:	fe e3       	ldi	r31, 0x3E	; 62
    106a:	14 91       	lpm	r17, Z
    106c:	11 23       	and	r17, r17
    106e:	31 f0       	breq	.+12     	; 0x107c <no_tasks>
    1070:	32 96       	adiw	r30, 0x02	; 2

00001072 <task_copy>:
    1072:	85 91       	lpm	r24, Z+
    1074:	95 91       	lpm	r25, Z+
    1076:	03 d0       	rcall	.+6      	; 0x107e <append_alg_to_end>
    1078:	1a 95       	dec	r17
    107a:	d9 f7       	brne	.-10     	; 0x1072 <task_copy>

0000107c <no_tasks>:
    107c:	08 95       	ret

0000107e <append_alg_to_end>:
    107e:	a3 ec       	ldi	r26, 0xC3	; 195
    1080:	b1 e0       	ldi	r27, 0x01	; 1
    1082:	2c 91       	ld	r18, X
    1084:	23 95       	inc	r18
    1086:	2c 93       	st	X, r18
    1088:	2a 95       	dec	r18
    108a:	12 96       	adiw	r26, 0x02	; 2
    108c:	34 e0       	ldi	r19, 0x04	; 4
    108e:	23 9f       	mul	r18, r19
    1090:	a0 0d       	add	r26, r0
    1092:	b1 1d       	adc	r27, r1
    1094:	11 24       	eor	r1, r1
    1096:	8d 93       	st	X+, r24
    1098:	9d 93       	st	X+, r25
    109a:	1d 92       	st	X+, r1
    109c:	1d 92       	st	X+, r1
    109e:	08 95       	ret

000010a0 <core_run>:
    10a0:	94 da       	rcall	.-2776   	; 0x5ca <net_poll>
    10a2:	3c de       	rcall	.-904    	; 0xd1c <update_counter>
    10a4:	a8 95       	wdr
    10a6:	34 fa       	bst	r3, 4
    10a8:	de f3       	brts	.-10     	; 0x10a0 <core_run>
    10aa:	a3 ec       	ldi	r26, 0xC3	; 195
    10ac:	b1 e0       	ldi	r27, 0x01	; 1
    10ae:	0d 91       	ld	r16, X+
    10b0:	1d 91       	ld	r17, X+
    10b2:	24 e0       	ldi	r18, 0x04	; 4
    10b4:	12 9f       	mul	r17, r18
    10b6:	a0 0d       	add	r26, r0
    10b8:	b1 1d       	adc	r27, r1
    10ba:	11 24       	eor	r1, r1
    10bc:	ed 91       	ld	r30, X+
    10be:	fd 91       	ld	r31, X+
    10c0:	f8 94       	cli
    10c2:	8d 91       	ld	r24, X+
    10c4:	9d 91       	ld	r25, X+
    10c6:	78 94       	sei
    10c8:	88 23       	and	r24, r24
    10ca:	99 f4       	brne	.+38     	; 0x10f2 <next_task>
    10cc:	99 23       	and	r25, r25
    10ce:	89 f4       	brne	.+34     	; 0x10f2 <next_task>
    10d0:	af 93       	push	r26
    10d2:	bf 93       	push	r27
    10d4:	68 94       	set
    10d6:	35 f8       	bld	r3, 5
    10d8:	09 95       	icall
    10da:	e8 94       	clt
    10dc:	35 f8       	bld	r3, 5
    10de:	bf 91       	pop	r27
    10e0:	af 91       	pop	r26
    10e2:	f8 94       	cli
    10e4:	9e 93       	st	-X, r25
    10e6:	8e 93       	st	-X, r24
    10e8:	78 94       	sei
    10ea:	00 91 c3 01 	lds	r16, 0x01C3	; 0x8001c3 <tt>
    10ee:	10 91 c4 01 	lds	r17, 0x01C4	; 0x8001c4 <tt+0x1>

000010f2 <next_task>:
    10f2:	13 95       	inc	r17
    10f4:	01 13       	cpse	r16, r17
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <update_cur_task>
    10f8:	11 27       	eor	r17, r17

000010fa <update_cur_task>:
    10fa:	10 93 c4 01 	sts	0x01C4, r17	; 0x8001c4 <tt+0x1>
    10fe:	d0 cf       	rjmp	.-96     	; 0x10a0 <core_run>

00001100 <__vector_9>:
    1100:	7f 93       	push	r23
    1102:	7f b7       	in	r23, 0x3f	; 63
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	a3 ec       	ldi	r26, 0xC3	; 195
    1110:	b1 e0       	ldi	r27, 0x01	; 1
    1112:	7c 91       	ld	r23, X
    1114:	77 23       	and	r23, r23
    1116:	79 f0       	breq	.+30     	; 0x1136 <_int_main_exit>
    1118:	14 96       	adiw	r26, 0x04	; 4

0000111a <int_main_loop>:
    111a:	8d 91       	ld	r24, X+
    111c:	9c 91       	ld	r25, X
    111e:	99 23       	and	r25, r25
    1120:	21 f4       	brne	.+8      	; 0x112a <_sub_1>
    1122:	88 23       	and	r24, r24
    1124:	11 f4       	brne	.+4      	; 0x112a <_sub_1>
    1126:	13 96       	adiw	r26, 0x03	; 3
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <_int_main_next_task>

0000112a <_sub_1>:
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	9c 93       	st	X, r25
    112e:	8e 93       	st	-X, r24
    1130:	14 96       	adiw	r26, 0x04	; 4

00001132 <_int_main_next_task>:
    1132:	7a 95       	dec	r23
    1134:	91 f7       	brne	.-28     	; 0x111a <int_main_loop>

00001136 <_int_main_exit>:
    1136:	83 e6       	ldi	r24, 0x63	; 99
    1138:	82 bf       	out	0x32, r24	; 50
    113a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <timer_cnt_unsafe>
    113e:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <timer_cnt_unsafe+0x1>
    1142:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <timer_cnt_unsafe+0x2>
    1146:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <timer_cnt_unsafe+0x3>
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	a7 1f       	adc	r26, r23
    114e:	b7 1f       	adc	r27, r23
    1150:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <timer_cnt_unsafe>
    1154:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <timer_cnt_unsafe+0x1>
    1158:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <timer_cnt_unsafe+0x2>
    115c:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <timer_cnt_unsafe+0x3>
    1160:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <r_data_cnt>
    1164:	88 23       	and	r24, r24
    1166:	19 f0       	breq	.+6      	; 0x116e <clear_stack>
    1168:	8a 95       	dec	r24
    116a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <r_data_cnt>

0000116e <clear_stack>:
    116e:	bf 91       	pop	r27
    1170:	af 91       	pop	r26
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	7f 91       	pop	r23
    1178:	7f bf       	out	0x3f, r23	; 63
    117a:	7f 91       	pop	r23
    117c:	18 95       	reti

0000117e <memcpy>:
    117e:	fb 01       	movw	r30, r22
    1180:	dc 01       	movw	r26, r24
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <memcpy+0xa>
    1184:	01 90       	ld	r0, Z+
    1186:	0d 92       	st	X+, r0
    1188:	41 50       	subi	r20, 0x01	; 1
    118a:	50 40       	sbci	r21, 0x00	; 0
    118c:	d8 f7       	brcc	.-10     	; 0x1184 <memcpy+0x6>
    118e:	08 95       	ret

00001190 <memset>:
    1190:	dc 01       	movw	r26, r24
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <memset+0x6>
    1194:	6d 93       	st	X+, r22
    1196:	41 50       	subi	r20, 0x01	; 1
    1198:	50 40       	sbci	r21, 0x00	; 0
    119a:	e0 f7       	brcc	.-8      	; 0x1194 <memset+0x4>
    119c:	08 95       	ret

0000119e <eeprom_read_block>:
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22

000011a2 <eeprom_read_blraw>:
    11a2:	fc 01       	movw	r30, r24
    11a4:	e1 99       	sbic	0x1c, 1	; 28
    11a6:	fe cf       	rjmp	.-4      	; 0x11a4 <eeprom_read_blraw+0x2>
    11a8:	06 c0       	rjmp	.+12     	; 0x11b6 <eeprom_read_blraw+0x14>
    11aa:	ff bb       	out	0x1f, r31	; 31
    11ac:	ee bb       	out	0x1e, r30	; 30
    11ae:	e0 9a       	sbi	0x1c, 0	; 28
    11b0:	31 96       	adiw	r30, 0x01	; 1
    11b2:	0d b2       	in	r0, 0x1d	; 29
    11b4:	0d 92       	st	X+, r0
    11b6:	41 50       	subi	r20, 0x01	; 1
    11b8:	50 40       	sbci	r21, 0x00	; 0
    11ba:	b8 f7       	brcc	.-18     	; 0x11aa <eeprom_read_blraw+0x8>
    11bc:	08 95       	ret

000011be <eeprom_write_block>:
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <eeprom_write_block+0xc>
    11c4:	2d 91       	ld	r18, X+
    11c6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <eeprom_write_r18>
    11ca:	41 50       	subi	r20, 0x01	; 1
    11cc:	50 40       	sbci	r21, 0x00	; 0
    11ce:	d0 f7       	brcc	.-12     	; 0x11c4 <eeprom_write_block+0x6>
    11d0:	08 95       	ret

000011d2 <eeprom_write_byte>:
    11d2:	26 2f       	mov	r18, r22

000011d4 <eeprom_write_r18>:
    11d4:	e1 99       	sbic	0x1c, 1	; 28
    11d6:	fe cf       	rjmp	.-4      	; 0x11d4 <eeprom_write_r18>
    11d8:	9f bb       	out	0x1f, r25	; 31
    11da:	8e bb       	out	0x1e, r24	; 30
    11dc:	2d bb       	out	0x1d, r18	; 29
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	e2 9a       	sbi	0x1c, 2	; 28
    11e4:	e1 9a       	sbi	0x1c, 1	; 28
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	08 95       	ret

000011ec <_exit>:
    11ec:	f8 94       	cli

000011ee <__stop_program>:
    11ee:	ff cf       	rjmp	.-2      	; 0x11ee <__stop_program>

Disassembly of section .nrww:

00003c00 <_nrww_start>:
    3c00:	00 c0       	rjmp	.+0      	; 0x3c02 <_nrww_start+0x2>
    3c02:	c1 01       	movw	r24, r2
    3c04:	c3 03       	fmuls	r20, r19
    3c06:	02 c2       	rjmp	.+1028   	; 0x400c <__TEXT_REGION_LENGTH__+0xc>
    3c08:	c6 06       	cpc	r12, r22
    3c0a:	07 c7       	rjmp	.+3598   	; 0x4a1a <__TEXT_REGION_LENGTH__+0xa1a>
    3c0c:	05 c5       	rjmp	.+2570   	; 0x4618 <__TEXT_REGION_LENGTH__+0x618>
    3c0e:	c4 04       	cpc	r12, r4
    3c10:	cc 0c       	add	r12, r12
    3c12:	0d cd       	rjmp	.-1510   	; 0x362e <_user_space+0x23ae>
    3c14:	0f cf       	rjmp	.-482    	; 0x3a34 <_user_space+0x27b4>
    3c16:	ce 0e       	add	r12, r30
    3c18:	0a ca       	rjmp	.-3052   	; 0x302e <_user_space+0x1dae>
    3c1a:	cb 0b       	sbc	r28, r27
    3c1c:	c9 09       	sbc	r28, r9
    3c1e:	08 c8       	rjmp	.-4080   	; 0x2c30 <_user_space+0x19b0>
    3c20:	d8 18       	sub	r13, r8
    3c22:	19 d9       	rcall	.-3534   	; 0x2e56 <_user_space+0x1bd6>
    3c24:	1b db       	rcall	.-2506   	; 0x325c <_user_space+0x1fdc>
    3c26:	da 1a       	sub	r13, r26
    3c28:	1e de       	rcall	.-964    	; 0x3866 <_user_space+0x25e6>
    3c2a:	df 1f       	adc	r29, r31
    3c2c:	dd 1d       	adc	r29, r13
    3c2e:	1c dc       	rcall	.-1992   	; 0x3468 <_user_space+0x21e8>
    3c30:	14 d4       	rcall	.+2088   	; 0x445a <__TEXT_REGION_LENGTH__+0x45a>
    3c32:	d5 15       	cp	r29, r5
    3c34:	d7 17       	cp	r29, r23
    3c36:	16 d6       	rcall	.+3116   	; 0x4864 <__TEXT_REGION_LENGTH__+0x864>
    3c38:	d2 12       	cpse	r13, r18
    3c3a:	13 d3       	rcall	.+1574   	; 0x4262 <__TEXT_REGION_LENGTH__+0x262>
    3c3c:	11 d1       	rcall	.+546    	; 0x3e60 <FLASH_TT+0x60>
    3c3e:	d0 10       	cpse	r13, r0
    3c40:	f0 30       	cpi	r31, 0x00	; 0
    3c42:	31 f1       	breq	.+76     	; 0x3c90 <_nrww_start+0x90>
    3c44:	33 f3       	brvs	.-52     	; 0x3c12 <_nrww_start+0x12>
    3c46:	f2 32       	cpi	r31, 0x22	; 34
    3c48:	36 f6       	brtc	.-116    	; 0x3bd6 <_user_space+0x2956>
    3c4a:	f7 37       	cpi	r31, 0x77	; 119
    3c4c:	f5 35       	cpi	r31, 0x55	; 85
    3c4e:	34 f4       	brge	.+12     	; 0x3c5c <_nrww_start+0x5c>
    3c50:	3c fc       	.word	0xfc3c	; ????
    3c52:	fd 3d       	cpi	r31, 0xDD	; 221
    3c54:	ff 3f       	cpi	r31, 0xFF	; 255
    3c56:	3e fe       	.word	0xfe3e	; ????
    3c58:	fa 3a       	cpi	r31, 0xAA	; 170
    3c5a:	3b fb       	.word	0xfb3b	; ????
    3c5c:	39 f9       	.word	0xf939	; ????
    3c5e:	f8 38       	cpi	r31, 0x88	; 136
    3c60:	28 e8       	ldi	r18, 0x88	; 136
    3c62:	e9 29       	or	r30, r9
    3c64:	eb 2b       	or	r30, r27
    3c66:	2a ea       	ldi	r18, 0xAA	; 170
    3c68:	ee 2e       	mov	r14, r30
    3c6a:	2f ef       	ldi	r18, 0xFF	; 255
    3c6c:	2d ed       	ldi	r18, 0xDD	; 221
    3c6e:	ec 2c       	mov	r14, r12
    3c70:	e4 24       	eor	r14, r4
    3c72:	25 e5       	ldi	r18, 0x55	; 85
    3c74:	27 e7       	ldi	r18, 0x77	; 119
    3c76:	e6 26       	eor	r14, r22
    3c78:	22 e2       	ldi	r18, 0x22	; 34
    3c7a:	e3 23       	and	r30, r19
    3c7c:	e1 21       	and	r30, r1
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	a0 60       	ori	r26, 0x00	; 0
    3c82:	61 a1       	ldd	r22, Z+33	; 0x21
    3c84:	63 a3       	std	Z+35, r22	; 0x23
    3c86:	a2 62       	ori	r26, 0x22	; 34
    3c88:	66 a6       	std	Z+46, r6	; 0x2e
    3c8a:	a7 67       	ori	r26, 0x77	; 119
    3c8c:	a5 65       	ori	r26, 0x55	; 85
    3c8e:	64 a4       	ldd	r6, Z+44	; 0x2c
    3c90:	6c ac       	ldd	r6, Y+60	; 0x3c
    3c92:	ad 6d       	ori	r26, 0xDD	; 221
    3c94:	af 6f       	ori	r26, 0xFF	; 255
    3c96:	6e ae       	std	Y+62, r6	; 0x3e
    3c98:	aa 6a       	ori	r26, 0xAA	; 170
    3c9a:	6b ab       	std	Y+51, r22	; 0x33
    3c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    3c9e:	a8 68       	ori	r26, 0x88	; 136
    3ca0:	78 b8       	out	0x08, r7	; 8
    3ca2:	b9 79       	andi	r27, 0x99	; 153
    3ca4:	bb 7b       	andi	r27, 0xBB	; 187
    3ca6:	7a ba       	out	0x1a, r7	; 26
    3ca8:	be 7e       	andi	r27, 0xEE	; 238
    3caa:	7f bf       	out	0x3f, r23	; 63
    3cac:	7d bd       	out	0x2d, r23	; 45
    3cae:	bc 7c       	andi	r27, 0xCC	; 204
    3cb0:	b4 74       	andi	r27, 0x44	; 68
    3cb2:	75 b5       	in	r23, 0x25	; 37
    3cb4:	77 b7       	in	r23, 0x37	; 55
    3cb6:	b6 76       	andi	r27, 0x66	; 102
    3cb8:	72 b2       	in	r7, 0x12	; 18
    3cba:	b3 73       	andi	r27, 0x33	; 51
    3cbc:	b1 71       	andi	r27, 0x11	; 17
    3cbe:	70 b0       	in	r7, 0x00	; 0
    3cc0:	50 90 91 51 	lds	r5, 0x5191	; 0x805191 <_end+0x4f14>
    3cc4:	93 53       	subi	r25, 0x33	; 51
    3cc6:	52 92       	st	-Z, r5
    3cc8:	96 56       	subi	r25, 0x66	; 102
    3cca:	57 97       	sbiw	r26, 0x17	; 23
    3ccc:	55 95       	asr	r21
    3cce:	94 54       	subi	r25, 0x44	; 68
    3cd0:	9c 5c       	subi	r25, 0xCC	; 204
    3cd2:	5d 9d       	mul	r21, r13
    3cd4:	5f 9f       	mul	r21, r31
    3cd6:	9e 5e       	subi	r25, 0xEE	; 238
    3cd8:	5a 9a       	sbi	0x0b, 2	; 11
    3cda:	9b 5b       	subi	r25, 0xBB	; 187
    3cdc:	99 59       	subi	r25, 0x99	; 153
    3cde:	58 98       	cbi	0x0b, 0	; 11
    3ce0:	88 48       	sbci	r24, 0x88	; 136
    3ce2:	49 89       	ldd	r20, Y+17	; 0x11
    3ce4:	4b 8b       	std	Y+19, r20	; 0x13
    3ce6:	8a 4a       	sbci	r24, 0xAA	; 170
    3ce8:	4e 8e       	std	Y+30, r4	; 0x1e
    3cea:	8f 4f       	sbci	r24, 0xFF	; 255
    3cec:	8d 4d       	sbci	r24, 0xDD	; 221
    3cee:	4c 8c       	ldd	r4, Y+28	; 0x1c
    3cf0:	44 84       	ldd	r4, Z+12	; 0x0c
    3cf2:	85 45       	sbci	r24, 0x55	; 85
    3cf4:	87 47       	sbci	r24, 0x77	; 119
    3cf6:	46 86       	std	Z+14, r4	; 0x0e
    3cf8:	82 42       	sbci	r24, 0x22	; 34
    3cfa:	43 83       	std	Z+3, r20	; 0x03
    3cfc:	41 81       	ldd	r20, Z+1	; 0x01
    3cfe:	80 40       	sbci	r24, 0x00	; 0

00003d00 <CRCHi>:
    3d00:	00 c1       	rjmp	.+512    	; 0x3f02 <init_io+0x2>
    3d02:	81 40       	sbci	r24, 0x01	; 1
    3d04:	01 c0       	rjmp	.+2      	; 0x3d08 <CRCHi+0x8>
    3d06:	80 41       	sbci	r24, 0x10	; 16
    3d08:	01 c0       	rjmp	.+2      	; 0x3d0c <CRCHi+0xc>
    3d0a:	80 41       	sbci	r24, 0x10	; 16
    3d0c:	00 c1       	rjmp	.+512    	; 0x3f0e <init_io+0xe>
    3d0e:	81 40       	sbci	r24, 0x01	; 1
    3d10:	01 c0       	rjmp	.+2      	; 0x3d14 <CRCHi+0x14>
    3d12:	80 41       	sbci	r24, 0x10	; 16
    3d14:	00 c1       	rjmp	.+512    	; 0x3f16 <init_io+0x16>
    3d16:	81 40       	sbci	r24, 0x01	; 1
    3d18:	00 c1       	rjmp	.+512    	; 0x3f1a <init_io+0x1a>
    3d1a:	81 40       	sbci	r24, 0x01	; 1
    3d1c:	01 c0       	rjmp	.+2      	; 0x3d20 <CRCHi+0x20>
    3d1e:	80 41       	sbci	r24, 0x10	; 16
    3d20:	01 c0       	rjmp	.+2      	; 0x3d24 <CRCHi+0x24>
    3d22:	80 41       	sbci	r24, 0x10	; 16
    3d24:	00 c1       	rjmp	.+512    	; 0x3f26 <init_io+0x26>
    3d26:	81 40       	sbci	r24, 0x01	; 1
    3d28:	00 c1       	rjmp	.+512    	; 0x3f2a <init_io+0x2a>
    3d2a:	81 40       	sbci	r24, 0x01	; 1
    3d2c:	01 c0       	rjmp	.+2      	; 0x3d30 <CRCHi+0x30>
    3d2e:	80 41       	sbci	r24, 0x10	; 16
    3d30:	00 c1       	rjmp	.+512    	; 0x3f32 <init_io+0x32>
    3d32:	81 40       	sbci	r24, 0x01	; 1
    3d34:	01 c0       	rjmp	.+2      	; 0x3d38 <CRCHi+0x38>
    3d36:	80 41       	sbci	r24, 0x10	; 16
    3d38:	01 c0       	rjmp	.+2      	; 0x3d3c <CRCHi+0x3c>
    3d3a:	80 41       	sbci	r24, 0x10	; 16
    3d3c:	00 c1       	rjmp	.+512    	; 0x3f3e <init_io+0x3e>
    3d3e:	81 40       	sbci	r24, 0x01	; 1
    3d40:	01 c0       	rjmp	.+2      	; 0x3d44 <CRCHi+0x44>
    3d42:	80 41       	sbci	r24, 0x10	; 16
    3d44:	00 c1       	rjmp	.+512    	; 0x3f46 <init_io+0x46>
    3d46:	81 40       	sbci	r24, 0x01	; 1
    3d48:	00 c1       	rjmp	.+512    	; 0x3f4a <init_io+0x4a>
    3d4a:	81 40       	sbci	r24, 0x01	; 1
    3d4c:	01 c0       	rjmp	.+2      	; 0x3d50 <CRCHi+0x50>
    3d4e:	80 41       	sbci	r24, 0x10	; 16
    3d50:	00 c1       	rjmp	.+512    	; 0x3f52 <init_io+0x52>
    3d52:	81 40       	sbci	r24, 0x01	; 1
    3d54:	01 c0       	rjmp	.+2      	; 0x3d58 <CRCHi+0x58>
    3d56:	80 41       	sbci	r24, 0x10	; 16
    3d58:	01 c0       	rjmp	.+2      	; 0x3d5c <CRCHi+0x5c>
    3d5a:	80 41       	sbci	r24, 0x10	; 16
    3d5c:	00 c1       	rjmp	.+512    	; 0x3f5e <init_io+0x5e>
    3d5e:	81 40       	sbci	r24, 0x01	; 1
    3d60:	00 c1       	rjmp	.+512    	; 0x3f62 <init_io+0x62>
    3d62:	81 40       	sbci	r24, 0x01	; 1
    3d64:	01 c0       	rjmp	.+2      	; 0x3d68 <CRCHi+0x68>
    3d66:	80 41       	sbci	r24, 0x10	; 16
    3d68:	01 c0       	rjmp	.+2      	; 0x3d6c <CRCHi+0x6c>
    3d6a:	80 41       	sbci	r24, 0x10	; 16
    3d6c:	00 c1       	rjmp	.+512    	; 0x3f6e <init_io+0x6e>
    3d6e:	81 40       	sbci	r24, 0x01	; 1
    3d70:	01 c0       	rjmp	.+2      	; 0x3d74 <CRCHi+0x74>
    3d72:	80 41       	sbci	r24, 0x10	; 16
    3d74:	00 c1       	rjmp	.+512    	; 0x3f76 <init_io+0x76>
    3d76:	81 40       	sbci	r24, 0x01	; 1
    3d78:	00 c1       	rjmp	.+512    	; 0x3f7a <init_io+0x7a>
    3d7a:	81 40       	sbci	r24, 0x01	; 1
    3d7c:	01 c0       	rjmp	.+2      	; 0x3d80 <CRCHi+0x80>
    3d7e:	80 41       	sbci	r24, 0x10	; 16
    3d80:	01 c0       	rjmp	.+2      	; 0x3d84 <CRCHi+0x84>
    3d82:	80 41       	sbci	r24, 0x10	; 16
    3d84:	00 c1       	rjmp	.+512    	; 0x3f86 <write_page+0x6>
    3d86:	81 40       	sbci	r24, 0x01	; 1
    3d88:	00 c1       	rjmp	.+512    	; 0x3f8a <write_page+0xa>
    3d8a:	81 40       	sbci	r24, 0x01	; 1
    3d8c:	01 c0       	rjmp	.+2      	; 0x3d90 <CRCHi+0x90>
    3d8e:	80 41       	sbci	r24, 0x10	; 16
    3d90:	00 c1       	rjmp	.+512    	; 0x3f92 <write_page+0x12>
    3d92:	81 40       	sbci	r24, 0x01	; 1
    3d94:	01 c0       	rjmp	.+2      	; 0x3d98 <CRCHi+0x98>
    3d96:	80 41       	sbci	r24, 0x10	; 16
    3d98:	01 c0       	rjmp	.+2      	; 0x3d9c <CRCHi+0x9c>
    3d9a:	80 41       	sbci	r24, 0x10	; 16
    3d9c:	00 c1       	rjmp	.+512    	; 0x3f9e <Wrloop+0x2>
    3d9e:	81 40       	sbci	r24, 0x01	; 1
    3da0:	00 c1       	rjmp	.+512    	; 0x3fa2 <Wrloop+0x6>
    3da2:	81 40       	sbci	r24, 0x01	; 1
    3da4:	01 c0       	rjmp	.+2      	; 0x3da8 <CRCHi+0xa8>
    3da6:	80 41       	sbci	r24, 0x10	; 16
    3da8:	01 c0       	rjmp	.+2      	; 0x3dac <CRCHi+0xac>
    3daa:	80 41       	sbci	r24, 0x10	; 16
    3dac:	00 c1       	rjmp	.+512    	; 0x3fae <Wrloop+0x12>
    3dae:	81 40       	sbci	r24, 0x01	; 1
    3db0:	01 c0       	rjmp	.+2      	; 0x3db4 <CRCHi+0xb4>
    3db2:	80 41       	sbci	r24, 0x10	; 16
    3db4:	00 c1       	rjmp	.+512    	; 0x3fb6 <Wrloop+0x1a>
    3db6:	81 40       	sbci	r24, 0x01	; 1
    3db8:	00 c1       	rjmp	.+512    	; 0x3fba <Wrloop+0x1e>
    3dba:	81 40       	sbci	r24, 0x01	; 1
    3dbc:	01 c0       	rjmp	.+2      	; 0x3dc0 <CRCHi+0xc0>
    3dbe:	80 41       	sbci	r24, 0x10	; 16
    3dc0:	00 c1       	rjmp	.+512    	; 0x3fc2 <Rdloop>
    3dc2:	81 40       	sbci	r24, 0x01	; 1
    3dc4:	01 c0       	rjmp	.+2      	; 0x3dc8 <CRCHi+0xc8>
    3dc6:	80 41       	sbci	r24, 0x10	; 16
    3dc8:	01 c0       	rjmp	.+2      	; 0x3dcc <CRCHi+0xcc>
    3dca:	80 41       	sbci	r24, 0x10	; 16
    3dcc:	00 c1       	rjmp	.+512    	; 0x3fce <Return>
    3dce:	81 40       	sbci	r24, 0x01	; 1
    3dd0:	01 c0       	rjmp	.+2      	; 0x3dd4 <CRCHi+0xd4>
    3dd2:	80 41       	sbci	r24, 0x10	; 16
    3dd4:	00 c1       	rjmp	.+512    	; 0x3fd6 <Return+0x8>
    3dd6:	81 40       	sbci	r24, 0x01	; 1
    3dd8:	00 c1       	rjmp	.+512    	; 0x3fda <Do_spm>
    3dda:	81 40       	sbci	r24, 0x01	; 1
    3ddc:	01 c0       	rjmp	.+2      	; 0x3de0 <CRCHi+0xe0>
    3dde:	80 41       	sbci	r24, 0x10	; 16
    3de0:	01 c0       	rjmp	.+2      	; 0x3de4 <CRCHi+0xe4>
    3de2:	80 41       	sbci	r24, 0x10	; 16
    3de4:	00 c1       	rjmp	.+512    	; 0x3fe6 <Wait_ee+0x6>
    3de6:	81 40       	sbci	r24, 0x01	; 1
    3de8:	00 c1       	rjmp	.+512    	; 0x3fea <Success_prog>
    3dea:	81 40       	sbci	r24, 0x01	; 1
    3dec:	01 c0       	rjmp	.+2      	; 0x3df0 <CRCHi+0xf0>
    3dee:	80 41       	sbci	r24, 0x10	; 16
    3df0:	00 c1       	rjmp	.+512    	; 0x3ff2 <Error_prog>
    3df2:	81 40       	sbci	r24, 0x01	; 1
    3df4:	01 c0       	rjmp	.+2      	; 0x3df8 <CRCHi+0xf8>
    3df6:	80 41       	sbci	r24, 0x10	; 16
    3df8:	01 c0       	rjmp	.+2      	; 0x3dfc <CRCHi+0xfc>
    3dfa:	80 41       	sbci	r24, 0x10	; 16
    3dfc:	00 c1       	rjmp	.+512    	; 0x3ffe <Error_prog+0xc>
    3dfe:	81 40       	sbci	r24, 0x01	; 1

00003e00 <FLASH_TT>:
	...

00003e80 <FLASH_RD>:
	...

00003f00 <init_io>:
    3f00:	0b b3       	in	r16, 0x1b	; 27
    3f02:	0f 7f       	andi	r16, 0xFF	; 255
    3f04:	0f 6f       	ori	r16, 0xFF	; 255
    3f06:	0b bb       	out	0x1b, r16	; 27
    3f08:	0a b3       	in	r16, 0x1a	; 26
    3f0a:	00 70       	andi	r16, 0x00	; 0
    3f0c:	00 60       	ori	r16, 0x00	; 0
    3f0e:	0a bb       	out	0x1a, r16	; 26
    3f10:	08 b3       	in	r16, 0x18	; 24
    3f12:	0f 7f       	andi	r16, 0xFF	; 255
    3f14:	0c 6f       	ori	r16, 0xFC	; 252
    3f16:	08 bb       	out	0x18, r16	; 24
    3f18:	07 b3       	in	r16, 0x17	; 23
    3f1a:	03 70       	andi	r16, 0x03	; 3
    3f1c:	00 60       	ori	r16, 0x00	; 0
    3f1e:	07 bb       	out	0x17, r16	; 23
    3f20:	05 b3       	in	r16, 0x15	; 21
    3f22:	0f 7f       	andi	r16, 0xFF	; 255
    3f24:	0f 6f       	ori	r16, 0xFF	; 255
    3f26:	05 bb       	out	0x15, r16	; 21
    3f28:	04 b3       	in	r16, 0x14	; 20
    3f2a:	00 70       	andi	r16, 0x00	; 0
    3f2c:	00 60       	ori	r16, 0x00	; 0
    3f2e:	04 bb       	out	0x14, r16	; 20
    3f30:	02 b3       	in	r16, 0x12	; 18
    3f32:	0f 7f       	andi	r16, 0xFF	; 255
    3f34:	00 6f       	ori	r16, 0xF0	; 240
    3f36:	02 bb       	out	0x12, r16	; 18
    3f38:	01 b3       	in	r16, 0x11	; 17
    3f3a:	0f 70       	andi	r16, 0x0F	; 15
    3f3c:	00 60       	ori	r16, 0x00	; 0
    3f3e:	01 bb       	out	0x11, r16	; 17
    3f40:	08 95       	ret
    3f42:	08 95       	ret
	...

00003f80 <write_page>:
    3f80:	f8 94       	cli
    3f82:	ee 27       	eor	r30, r30
    3f84:	f0 91 f0 00 	lds	r31, 0x00F0	; 0x8000f0 <frame+0x4>
    3f88:	f6 95       	lsr	r31
    3f8a:	e7 95       	ror	r30
    3f8c:	63 e0       	ldi	r22, 0x03	; 3
    3f8e:	25 d0       	rcall	.+74     	; 0x3fda <Do_spm>
    3f90:	61 e1       	ldi	r22, 0x11	; 17
    3f92:	23 d0       	rcall	.+70     	; 0x3fda <Do_spm>
    3f94:	70 91 f1 00 	lds	r23, 0x00F1	; 0x8000f1 <frame+0x5>
    3f98:	a2 ef       	ldi	r26, 0xF2	; 242
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0

00003f9c <Wrloop>:
    3f9c:	0d 90       	ld	r0, X+
    3f9e:	1d 90       	ld	r1, X+
    3fa0:	61 e0       	ldi	r22, 0x01	; 1
    3fa2:	1b d0       	rcall	.+54     	; 0x3fda <Do_spm>
    3fa4:	32 96       	adiw	r30, 0x02	; 2
    3fa6:	72 50       	subi	r23, 0x02	; 2
    3fa8:	c9 f7       	brne	.-14     	; 0x3f9c <Wrloop>
    3faa:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <frame+0x5>
    3fae:	e8 1b       	sub	r30, r24
    3fb0:	f0 40       	sbci	r31, 0x00	; 0
    3fb2:	65 e0       	ldi	r22, 0x05	; 5
    3fb4:	12 d0       	rcall	.+36     	; 0x3fda <Do_spm>
    3fb6:	61 e1       	ldi	r22, 0x11	; 17
    3fb8:	10 d0       	rcall	.+32     	; 0x3fda <Do_spm>
    3fba:	70 91 f1 00 	lds	r23, 0x00F1	; 0x8000f1 <frame+0x5>
    3fbe:	a2 ef       	ldi	r26, 0xF2	; 242
    3fc0:	b0 e0       	ldi	r27, 0x00	; 0

00003fc2 <Rdloop>:
    3fc2:	05 90       	lpm	r0, Z+
    3fc4:	1d 90       	ld	r1, X+
    3fc6:	01 10       	cpse	r0, r1
    3fc8:	14 c0       	rjmp	.+40     	; 0x3ff2 <Error_prog>
    3fca:	7a 95       	dec	r23
    3fcc:	d1 f7       	brne	.-12     	; 0x3fc2 <Rdloop>

00003fce <Return>:
    3fce:	87 b7       	in	r24, 0x37	; 55
    3fd0:	86 ff       	sbrs	r24, 6
    3fd2:	0b c0       	rjmp	.+22     	; 0x3fea <Success_prog>
    3fd4:	61 e1       	ldi	r22, 0x11	; 17
    3fd6:	01 d0       	rcall	.+2      	; 0x3fda <Do_spm>
    3fd8:	fa cf       	rjmp	.-12     	; 0x3fce <Return>

00003fda <Do_spm>:
    3fda:	87 b7       	in	r24, 0x37	; 55
    3fdc:	80 fd       	sbrc	r24, 0
    3fde:	fd cf       	rjmp	.-6      	; 0x3fda <Do_spm>

00003fe0 <Wait_ee>:
    3fe0:	e1 99       	sbic	0x1c, 1	; 28
    3fe2:	fe cf       	rjmp	.-4      	; 0x3fe0 <Wait_ee>
    3fe4:	67 bf       	out	0x37, r22	; 55
    3fe6:	e8 95       	spm
    3fe8:	08 95       	ret

00003fea <Success_prog>:
    3fea:	78 94       	sei
    3fec:	11 24       	eor	r1, r1
    3fee:	81 2d       	mov	r24, r1
    3ff0:	08 95       	ret

00003ff2 <Error_prog>:
    3ff2:	78 94       	sei
    3ff4:	11 24       	eor	r1, r1
    3ff6:	8f ef       	ldi	r24, 0xFF	; 255
    3ff8:	08 95       	ret

Disassembly of section .tab:

000011f0 <FLASH_TWI-0x10>:
	...

00001200 <FLASH_TWI>:
	...
